#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: '3.0'
dependencies:
- ID: aiofiles+23.2.1
  additional_info:
    fossa-attribution:
      Description: '# aiofiles: file support for asyncio[![PyPI](https://img.shields.io/pypi/v/aiofiles.svg)](https://pypi.python.org/pypi/aiofiles)[![Build](https://github.com/Tinche/aiofiles/workflows/CI/badge.svg)](https://github.com/Tinche/aiofiles/actions)[![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/Tinche/882f02e3df32136c847ba90d2688f06e/raw/covbadge.json)](https://github.com/Tinche/aiofiles/actions/workflows/main.yml)[![Supported
        Python versions](https://img.shields.io/pypi/pyversions/aiofiles.svg)](https://github.com/Tinche/aiofiles)[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)**aiofiles**
        is an Apache2 licensed library, written in Python, for handling localdisk
        files in asyncio applications.Ordinary local file IO is blocking, and cannot
        easily and portably be madeasynchronous. This means doing file IO may interfere
        with asyncio applications,which shouldn''t block the executing thread. aiofiles
        helps with this byintroducing asynchronous versions of files that support
        delegating operations toa separate thread pool.```pythonasync with aiofiles.open(''filename'',
        mode=''r'') as f:    contents = await f.read()print(contents)''My file contents''```Asynchronous
        iteration is also supported.```pythonasync with aiofiles.open(''filename'')
        as f:    async for line in f:        ...```Asynchronous interface to tempfile
        module.```pythonasync with aiofiles.tempfile.TemporaryFile(''wb'') as f:    await
        f.write(b''Hello, World!'')```## Features- a file API very similar to Python''s
        standard, blocking API- support for buffered and unbuffered binary files,
        and buffered text files- support for `async`/`await` ([PEP 492](https://peps.python.org/pep-0492/))
        constructs- async interface to tempfile module## InstallationTo install aiofiles,
        simply:```bash$ pip install aiofiles```## UsageFiles are opened using the
        `aiofiles.open()` coroutine, which in addition tomirroring the builtin `open`
        accepts optional `loop` and `executor`arguments. If `loop` is absent, the
        default loop will be used, as per theset asyncio policy. If `executor` is
        not specified, the default event loopexecutor will be used.In case of success,
        an asynchronous file object is returned with anAPI identical to an ordinary
        file, except the following methods are coroutinesand delegate to an executor:-
        `close`- `flush`- `isatty`- `read`- `readall`- `read1`- `readinto`- `readline`-
        `readlines`- `seek`- `seekable`- `tell`- `truncate`- `writable`- `write`-
        `writelines`In case of failure, one of the usual exceptions will be raised.`aiofiles.stdin`,
        `aiofiles.stdout`, `aiofiles.stderr`,`aiofiles.stdin_bytes`, `aiofiles.stdout_bytes`,
        and`aiofiles.stderr_bytes` provide async access to `sys.stdin`,`sys.stdout`,
        `sys.stderr`, and their corresponding `.buffer` properties.The `aiofiles.os`
        module contains executor-enabled coroutine versions ofseveral useful `os`
        functions that deal with files:- `stat`- `statvfs`- `sendfile`- `rename`-
        `renames`- `replace`- `remove`- `unlink`- `mkdir`- `makedirs`- `rmdir`- `removedirs`-
        `link`- `symlink`- `readlink`- `listdir`- `scandir`- `access`- `path.exists`-
        `path.isfile`- `path.isdir`- `path.islink`- `path.ismount`- `path.getsize`-
        `path.getatime`- `path.getctime`- `path.samefile`- `path.sameopenfile`###
        Tempfile**aiofiles.tempfile** implements the following interfaces:- TemporaryFile-
        NamedTemporaryFile- SpooledTemporaryFile- TemporaryDirectoryResults return
        wrapped with a context manager allowing use with async with and async for.```pythonasync
        with aiofiles.tempfile.NamedTemporaryFile(''wb+'') as f:    await f.write(b''Line1\n
        Line2'')    await f.seek(0)    async for line in f:        print(line)async
        with aiofiles.tempfile.TemporaryDirectory() as d:    filename = os.path.join(d,
        "file.ext")```### Writing tests for aiofilesReal file IO can be mocked by
        patching `aiofiles.threadpool.sync_open`as desired. The return type also needs
        to be registered with the`aiofiles.threadpool.wrap` dispatcher:```pythonaiofiles.threadpool.wrap.register(mock.MagicMock)(    lambda
        *args, **kwargs: threadpool.AsyncBufferedIOBase(*args, **kwargs))async def
        test_stuff():    data = ''data''    mock_file = mock.MagicMock()    with mock.patch(''aiofiles.threadpool.sync_open'',
        return_value=mock_file) as mock_open:        async with aiofiles.open(''filename'',
        ''w'') as f:            await f.write(data)        mock_file.write.assert_called_once_with(data)```###
        History#### 23.2.1 (2023-08-09)- Import `os.statvfs` conditionally to fix
        importing on non-UNIX systems.  [#171](https://github.com/Tinche/aiofiles/issues/171)
        [#172](https://github.com/Tinche/aiofiles/pull/172)#### 23.2.0 (2023-08-09)-
        aiofiles is now tested on Python 3.12 too.  [#166](https://github.com/Tinche/aiofiles/issues/166)
        [#168](https://github.com/Tinche/aiofiles/pull/168)- On Python 3.12, `aiofiles.tempfile.NamedTemporaryFile`
        now accepts a `delete_on_close` argument, just like the stdlib version.- On
        Python 3.12, `aiofiles.tempfile.NamedTemporaryFile` no longer exposes a `delete`
        attribute, just like the stdlib version.- Added `aiofiles.os.statvfs` and
        `aiofiles.os.path.ismount`.  [#162](https://github.com/Tinche/aiofiles/pull/162)-
        Use [PDM](https://pdm.fming.dev/latest/) instead of Poetry.  [#169](https://github.com/Tinche/aiofiles/pull/169)####
        23.1.0 (2023-02-09)- Added `aiofiles.os.access`.  [#146](https://github.com/Tinche/aiofiles/pull/146)-
        Removed `aiofiles.tempfile.temptypes.AsyncSpooledTemporaryFile.softspace`.  [#151](https://github.com/Tinche/aiofiles/pull/151)-
        Added `aiofiles.stdin`, `aiofiles.stdin_bytes`, and other stdio streams.  [#154](https://github.com/Tinche/aiofiles/pull/154)-
        Transition to `asyncio.get_running_loop` (vs `asyncio.get_event_loop`) internally.####
        22.1.0 (2022-09-04)- Added `aiofiles.os.path.islink`.  [#126](https://github.com/Tinche/aiofiles/pull/126)-
        Added `aiofiles.os.readlink`.  [#125](https://github.com/Tinche/aiofiles/pull/125)-
        Added `aiofiles.os.symlink`.  [#124](https://github.com/Tinche/aiofiles/pull/124)-
        Added `aiofiles.os.unlink`.  [#123](https://github.com/Tinche/aiofiles/pull/123)-
        Added `aiofiles.os.link`.  [#121](https://github.com/Tinche/aiofiles/pull/121)-
        Added `aiofiles.os.renames`.  [#120](https://github.com/Tinche/aiofiles/pull/120)-
        Added `aiofiles.os.{listdir, scandir}`.  [#143](https://github.com/Tinche/aiofiles/pull/143)-
        Switched to CalVer.- Dropped Python 3.6 support. If you require it, use version
        0.8.0.- aiofiles is now tested on Python 3.11.#### 0.8.0 (2021-11-27)- aiofiles
        is now tested on Python 3.10.- Added `aiofiles.os.replace`.  [#107](https://github.com/Tinche/aiofiles/pull/107)-
        Added `aiofiles.os.{makedirs, removedirs}`.- Added `aiofiles.os.path.{exists,
        isfile, isdir, getsize, getatime, getctime, samefile, sameopenfile}`.  [#63](https://github.com/Tinche/aiofiles/pull/63)-
        Added `suffix`, `prefix`, `dir` args to `aiofiles.tempfile.TemporaryDirectory`.  [#116](https://github.com/Tinche/aiofiles/pull/116)####
        0.7.0 (2021-05-17)- Added the `aiofiles.tempfile` module for async temporary
        files.  [#56](https://github.com/Tinche/aiofiles/pull/56)- Switched to Poetry
        and GitHub actions.- Dropped 3.5 support.#### 0.6.0 (2020-10-27)- `aiofiles`
        is now tested on ppc64le.- Added `name` and `mode` properties to async file
        objects.  [#82](https://github.com/Tinche/aiofiles/pull/82)- Fixed a DeprecationWarning
        internally.  [#75](https://github.com/Tinche/aiofiles/pull/75)- Python 3.9
        support and tests.#### 0.5.0 (2020-04-12)- Python 3.8 support. Code base modernization
        (using `async/await` instead of `asyncio.coroutine`/`yield from`).- Added
        `aiofiles.os.remove`, `aiofiles.os.rename`, `aiofiles.os.mkdir`, `aiofiles.os.rmdir`.  [#62](https://github.com/Tinche/aiofiles/pull/62)####
        0.4.0 (2018-08-11)- Python 3.7 support.- Removed Python 3.3/3.4 support. If
        you use these versions, stick to aiofiles 0.3.x.#### 0.3.2 (2017-09-23)- The
        LICENSE is now included in the sdist.  [#31](https://github.com/Tinche/aiofiles/pull/31)####
        0.3.1 (2017-03-10)- Introduced a changelog.- `aiofiles.os.sendfile` will now
        work if the standard `os` module contains a `sendfile` function.### ContributingContributions
        are very welcome. Tests can be run with `tox`, please ensurethe coverage at
        least stays the same before you submit a pull request.'
      Package: aiofiles
      Source: pip
      Version: 23.2.1
      Hash: ''
      licenses:
      - Apache-2.0
      Title: aiofiles
      DownloadURL: https://files.pythonhosted.org/packages/af/41/cfed10bc64d774f497a86e5ede9248e1d062db675504b41c320954d99641/aiofiles-23.2.1.tar.gz
  bazaar:
    register: 'no'
    prim: 7/CTX1028162
    community_link: https://github.com/Tinche/aiofiles
    community_name: https://github.com/Tinche/aiofiles
    community_url: https://github.com/Tinche/aiofiles
    component_comment: ''
    component_highlevel_description: File support for asyncio
    component_name: aiofiles
    component_platform: linux
    component_programing_language: Python
    component_version: V23.2.1
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/Tinche/aiofiles/archive/v23.2.1.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low Community Activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1063084&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Croatia
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: aiofiles
    target_sw: linux
    vendor: pip
    version: 23.2.1
    web_url: https://pypi.org/project/aiofiles/23.2.1/
  licenses:
  - Apache-2.0
  name: aiofiles
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 23.2.1
  mimer:
    linking: Static
    product_number: CTX1028162
    product_version_label: V23.2.1
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: aiokafka+0.10.0
  additional_info:
    fossa-attribution:
      Description: 'aiokafka========.. image:: https://github.com/aio-libs/aiokafka/actions/workflows/tests.yml/badge.svg?branch=master    :target:
        https://github.com/aio-libs/aiokafka/actions/workflows/tests.yml?query=branch%3Amaster    :alt:
        |Build status|.. image:: https://codecov.io/github/aio-libs/aiokafka/coverage.svg?branch=master    :target:
        https://codecov.io/gh/aio-libs/aiokafka/branch/master    :alt: |Coverage|..
        image:: https://badges.gitter.im/Join%20Chat.svg    :target: https://gitter.im/aio-libs/Lobby    :alt:
        |Chat on Gitter|asyncio client for KafkaAIOKafkaProducer****************AIOKafkaProducer
        is a high-level, asynchronous message producer.Example of AIOKafkaProducer
        usage:.. code-block:: python    from aiokafka import AIOKafkaProducer    import
        asyncio    async def send_one():        producer = AIOKafkaProducer(bootstrap_servers=''localhost:9092'')        #
        Get cluster layout and initial topic/partition leadership information        await
        producer.start()        try:            # Produce message            await
        producer.send_and_wait("my_topic", b"Super message")        finally:            #
        Wait for all pending messages to be delivered or expire.            await
        producer.stop()    asyncio.run(send_one())AIOKafkaConsumer****************AIOKafkaConsumer
        is a high-level, asynchronous message consumer.It interacts with the assigned
        Kafka Group Coordinator node to allow multipleconsumers to load balance consumption
        of topics (requires kafka >= 0.9.0.0).Example of AIOKafkaConsumer usage:..
        code-block:: python    from aiokafka import AIOKafkaConsumer    import asyncio    async
        def consume():        consumer = AIOKafkaConsumer(            ''my_topic'',
        ''my_other_topic'',            bootstrap_servers=''localhost:9092'',            group_id="my-group")        #
        Get cluster layout and join group `my-group`        await consumer.start()        try:            #
        Consume messages            async for msg in consumer:                print("consumed:
        ", msg.topic, msg.partition, msg.offset,                      msg.key, msg.value,
        msg.timestamp)        finally:            # Will leave consumer group; perform
        autocommit if enabled.            await consumer.stop()    asyncio.run(consume())Running
        tests-------------Docker is required to run tests. See https://docs.docker.com/engine/installation
        for installation notes. Also note, that `lz4` compression libraries for python
        will require `python-dev` package,or python source header files for compilation
        on Linux.NOTE: You will also need a valid java installation. It''s required
        for the ``keytool`` utility, used togenerate ssh keys for some tests.Setting
        up tests requirements (assuming you''re within virtualenv on ubuntu 14.04+)::    sudo
        apt-get install -y libsnappy-dev libzstd-dev libkrb5-dev krb5-user    make
        setupRunning tests with coverage::    make covTo run tests with a specific
        version of Kafka (default one is 1.0.2) use KAFKA_VERSION variable::    make
        cov KAFKA_VERSION=0.10.2.1Test running cheatsheat: * ``make test FLAGS="-l
        -x --ff"`` - run until 1 failure, rerun failed tests first. Great for cleaning
        up a lot of errors, say after a big refactor. * ``make test FLAGS="-k consumer"``
        - run only the consumer tests. * ``make test FLAGS="-m ''not ssl''"`` - run
        tests excluding ssl. * ``make test FLAGS="--no-pull"`` - do not try to pull
        new docker image before test run.'
      Package: aiokafka
      Source: pip
      Version: 0.10.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - Zlib
      Title: aiokafka
      DownloadURL: https://files.pythonhosted.org/packages/7c/f9/085b37eb3819556713a7cfc9f3b3f7a2c3c1bc0c8f2809b230c7f00ee26c/aiokafka-0.10.0.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1034212
    community_link: https://github.com/aio-libs/aiokafka
    community_name: https://github.com/aio-libs/aiokafka
    community_url: https://github.com/aio-libs/aiokafka
    component_comment: ''
    component_highlevel_description: asyncio client for kafka
    component_name: aiokafka
    component_platform: linux
    component_programing_language: Python
    component_version: V0.10.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/aio-libs/aiokafka/archive/v0.10.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1082896&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: aiokafka
    target_sw: linux
    vendor: pip
    version: 0.10.0
    web_url: https://pypi.org/project/aiokafka/0.10.0/
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - Zlib
  name: aiokafka
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.10.0
  mimer:
    linking: Static
    product_number: CTX1034212
    product_version_label: V0.10.0
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: anyio+4.3.0
  additional_info:
    fossa-attribution:
      Description: ".. image:: https://github.com/agronholm/anyio/actions/workflows/test.yml/badge.svg
        \ :target: https://github.com/agronholm/anyio/actions/workflows/test.yml  :alt:
        Build Status.. image:: https://coveralls.io/repos/github/agronholm/anyio/badge.svg?branch=master
        \ :target: https://coveralls.io/github/agronholm/anyio?branch=master  :alt:
        Code Coverage.. image:: https://readthedocs.org/projects/anyio/badge/?version=latest
        \ :target: https://anyio.readthedocs.io/en/latest/?badge=latest  :alt: Documentation..
        image:: https://badges.gitter.im/gitterHQ/gitter.svg  :target: https://gitter.im/python-trio/AnyIO
        \ :alt: Gitter chatAnyIO is an asynchronous networking and concurrency library
        that works on top of either asyncio_ ortrio_. It implements trio-like `structured
        concurrency`_ (SC) on top of asyncio and works in harmonywith the native SC
        of trio itself.Applications and libraries written against AnyIO's API will
        run unmodified on either asyncio_ ortrio_. AnyIO can also be adopted into
        a library or application incrementally \u2013 bit by bit, no fullrefactoring
        necessary. It will blend in with the native libraries of your chosen backend.Documentation-------------View
        full documentation at: https://anyio.readthedocs.io/Features--------AnyIO
        offers the following functionality:* Task groups (nurseries_ in trio terminology)*
        High-level networking (TCP, UDP and UNIX sockets)  * `Happy eyeballs`_ algorithm
        for TCP connections (more robust than that of asyncio on Python    3.8)  *
        async/await style UDP sockets (unlike asyncio where you still have to use
        Transports and    Protocols)* A versatile API for byte streams and object
        streams* Inter-task synchronization and communication (locks, conditions,
        events, semaphores, object  streams)* Worker threads* Subprocesses* Asynchronous
        file I/O (using worker threads)* Signal handlingAnyIO also comes with its
        own pytest_ plugin which also supports asynchronous fixtures.It even works
        with the popular Hypothesis_ library... _asyncio: https://docs.python.org/3/library/asyncio.html..
        _trio: https://github.com/python-trio/trio.. _structured concurrency: https://en.wikipedia.org/wiki/Structured_concurrency..
        _nurseries: https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning..
        _Happy eyeballs: https://en.wikipedia.org/wiki/Happy_Eyeballs.. _pytest: https://docs.pytest.org/en/latest/..
        _Hypothesis: https://hypothesis.works/"
      Package: anyio
      Source: pip
      Version: 4.3.0
      Hash: ''
      licenses:
      - MIT
      Title: anyio
      DownloadURL: https://files.pythonhosted.org/packages/db/4d/3970183622f0330d3c23d9b8a5f52e365e50381fd484d08e3285104333d3/anyio-4.3.0.tar.gz
  bazaar:
    register: 'no'
    prim: 14/CTX1032961
    community_link: https://pypi.org/project/anyio/4.3.0/
    community_name: https://pypi.org/project/anyio/4.3.0/
    community_url: https://pypi.org/project/anyio/4.3.0/
    component_comment: ''
    component_highlevel_description: High level asynchronous concurrency and networking
      framework that works on top of either trio or asyncio
    component_name: anyio
    component_platform: linux
    component_programing_language: Python
    component_version: 4.3.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/db/4d/3970183622f0330d3c23d9b8a5f52e365e50381fd484d08e3285104333d3/anyio-4.3.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1079543&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Finland
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: anyio
    target_sw: linux
    vendor: pip
    version: 4.3.0
    web_url: https://pypi.org/project/anyio/4.3.0/
  licenses:
  - MIT
  name: anyio
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 4.3.0
  mimer:
    linking: Static
    product_number: CTX1032961
    product_version_label: 4.3.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: asgiref+3.7.2
  additional_info:
    fossa-attribution:
      Description: 'asgiref=======.. image:: https://github.com/django/asgiref/actions/workflows/tests.yml/badge.svg    :target:
        https://github.com/django/asgiref/actions/workflows/tests.yml.. image:: https://img.shields.io/pypi/v/asgiref.svg    :target:
        https://pypi.python.org/pypi/asgirefASGI is a standard for Python asynchronous
        web apps and servers to communicatewith each other, and positioned as an asynchronous
        successor to WSGI. You canread more at https://asgi.readthedocs.io/en/latest/This
        package includes ASGI base libraries, such as:* Sync-to-async and async-to-sync
        function wrappers, ``asgiref.sync``* Server base classes, ``asgiref.server``*
        A WSGI-to-ASGI adapter, in ``asgiref.wsgi``Function wrappers-----------------These
        allow you to wrap or decorate async or sync functions to call them fromthe
        other style (so you can call async functions from a synchronous thread,or
        vice-versa).In particular:* AsyncToSync lets a synchronous subthread stop
        and wait while the async  function is called on the main thread''s event loop,
        and then control is  returned to the thread when the async function is finished.*
        SyncToAsync lets async code call a synchronous function, which is run in  a
        threadpool and control returned to the async coroutine when the synchronous  function
        completes.The idea is to make it easier to call synchronous APIs from async
        code andasynchronous APIs from synchronous code so it''s easier to transition
        code fromone style to the other. In the case of Channels, we wrap the (synchronous)Django
        view system with SyncToAsync to allow it to run inside the (asynchronous)ASGI
        server.Note that exactly what threads things run in is very specific, and
        aimed tokeep maximum compatibility with old synchronous code. See"Synchronous
        code & Threads" below for a full explanation. By default,``sync_to_async``
        will run all synchronous code in the program in the samethread for safety
        reasons; you can disable this for more performance with``@sync_to_async(thread_sensitive=False)``,
        but make sure that your code doesnot rely on anything bound to threads (like
        database connections) when you do.Threadlocal replacement-----------------------This
        is a drop-in replacement for ``threading.local`` that works with boththreads
        and asyncio Tasks. Even better, it will proxy values through from atask-local
        context to a thread-local context when you use ``sync_to_async``to run things
        in a threadpool, and vice-versa for ``async_to_sync``.If you instead want
        true thread- and task-safety, you can set``thread_critical`` on the Local
        object to ensure this instead.Server base classes-------------------Includes
        a ``StatelessServer`` class which provides all the hard work ofwriting a stateless
        server (as in, does not handle direct incoming socketsbut instead consumes
        external streams or sockets to work out what is happening).An example of such
        a server would be a chatbot server that connects out toa central chat server
        and provides a "connection scope" per user chatting toit. There''s only one
        actual connection, but the server has to separate thingsinto several scopes
        for easier writing of the code.You can see an example of this being used in
        `frequensgi <https://github.com/andrewgodwin/frequensgi>`_.WSGI-to-ASGI adapter--------------------Allows
        you to wrap a WSGI application so it appears as a valid ASGI application.Simply
        wrap it around your WSGI application like so::    asgi_application = WsgiToAsgi(wsgi_application)The
        WSGI application will be run in a synchronous threadpool, and the wrappedASGI
        application will be one that accepts ``http`` class messages.Please note that
        not all extended features of WSGI may be supported (such asfile handles for
        incoming POST bodies).Dependencies------------``asgiref`` requires Python
        3.8 or higher.Contributing------------Please refer to the`main Channels contributing
        docs <https://github.com/django/channels/blob/master/CONTRIBUTING.rst>`_.Testing''''''''''''''To
        run tests, make sure you have installed the ``tests`` extra with the package::    cd
        asgiref/    pip install -e .[tests]    pytestBuilding the documentation''''''''''''''''''''''''''''''''''''''''''''''''''''The
        documentation uses `Sphinx <http://www.sphinx-doc.org>`_::    cd asgiref/docs/    pip
        install sphinxTo build the docs, you can use the default tools::    sphinx-build
        -b html . _build/html  # or `make html`, if you''ve got make set up    cd
        _build/html    python -m http.server...or you can use ``sphinx-autobuild``
        to run a server and rebuild/reloadyour documentation changes automatically::    pip
        install sphinx-autobuild    sphinx-autobuild . _build/htmlReleasing''''''''''''''''''To
        release, first add details to CHANGELOG.txt and update the version number
        in ``asgiref/__init__.py``.Then, build and push the packages::    python -m
        build    twine upload dist/*    rm -r build/ dist/Implementation Details----------------------Synchronous
        code & threads''''''''''''''''''''''''''''''''''''''''''''''''''''The ``asgiref.sync``
        module provides two wrappers that let you go betweenasynchronous and synchronous
        code at will, while taking care of the rough edgesfor you.Unfortunately, the
        rough edges are numerous, and the code has to work especiallyhard to keep
        things in the same thread as much as possible. Notably, therestrictions we
        are working with are:* All synchronous code called through ``SyncToAsync``
        and marked with  ``thread_sensitive`` should run in the same thread as each
        other (and if the  outer layer of the program is synchronous, the main thread)*
        If a thread already has a running async loop, ``AsyncToSync`` can''t run things  on
        that loop if it''s blocked on synchronous code that is above you in the  call
        stack.The first compromise you get to might be that ``thread_sensitive`` code
        shouldjust run in the same thread and not spawn in a sub-thread, fulfilling
        the firstrestriction, but that immediately runs you into the second restriction.The
        only real solution is to essentially have a variant of ThreadPoolExecutorthat
        executes any ``thread_sensitive`` code on the outermost synchronousthread
        - either the main thread, or a single spawned subthread.This means you now
        have two basic states:* If the outermost layer of your program is synchronous,
        then all async code  run through ``AsyncToSync`` will run in a per-call event
        loop in arbitrary  sub-threads, while all ``thread_sensitive`` code will run
        in the main thread.* If the outermost layer of your program is asynchronous,
        then all async code  runs on the main thread''s event loop, and all ``thread_sensitive``
        synchronous  code will run in a single shared sub-thread.Crucially, this means
        that in both cases there is a thread which is a sharedresource that all ``thread_sensitive``
        code must run on, and there is a chancethat this thread is currently blocked
        on its own ``AsyncToSync`` call. Thus,``AsyncToSync`` needs to act as an executor
        for thread code while it''s blocking.The ``CurrentThreadExecutor`` class provides
        this functionality; rather thansimply waiting on a Future, you can call its
        ``run_until_future`` method andit will run submitted code until that Future
        is done. This means that codeinside the call can then run code on your thread.Maintenance
        and Security------------------------To report security issues, please contact
        security@djangoproject.com. For GPGsignatures and more security process information,
        seehttps://docs.djangoproject.com/en/dev/internals/security/.To report bugs
        or request new features, please open a new GitHub issue.This repository is
        part of the Channels project. For the shepherd and maintenance team, please
        see the`main Channels readme <https://github.com/django/channels/blob/master/README.rst>`_.'
      Package: asgiref
      Source: pip
      Version: 3.7.2
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: asgiref
      DownloadURL: https://files.pythonhosted.org/packages/12/19/64e38c1c2cbf0da9635b7082bbdf0e89052e93329279f59759c24a10cc96/asgiref-3.7.2.tar.gz
  bazaar:
    register: 'no'
    prim: 10/CTX1020290
    community_link: https://github.com/django/asgiref
    community_name: https://github.com/django/asgiref
    community_url: https://github.com/django/asgiref
    component_comment: ''
    component_highlevel_description: ASGI specification and utilities
    component_name: asgiref
    component_platform: linux
    component_programing_language: Python
    component_version: 3.7.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/django/asgiref/archive/3.7.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low Community Activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1059817&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: asgiref
    target_sw: linux
    vendor: pip
    version: 3.7.2
    web_url: https://github.com/django/asgiref/
  licenses:
  - BSD-3-Clause
  name: asgiref
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 3.7.2
  mimer:
    linking: Static
    product_number: CTX1020290
    product_version_label: 3.7.2
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: async-timeout+4.0.3
  additional_info:
    fossa-attribution:
      Description: 'async-timeout=============.. image:: https://travis-ci.com/aio-libs/async-timeout.svg?branch=master    :target:
        https://travis-ci.com/aio-libs/async-timeout.. image:: https://codecov.io/gh/aio-libs/async-timeout/branch/master/graph/badge.svg    :target:
        https://codecov.io/gh/aio-libs/async-timeout.. image:: https://img.shields.io/pypi/v/async-timeout.svg    :target:
        https://pypi.python.org/pypi/async-timeout.. image:: https://badges.gitter.im/Join%20Chat.svg    :target:
        https://gitter.im/aio-libs/Lobby    :alt: Chat on Gitterasyncio-compatible
        timeout context manager.Usage example-------------The context manager is useful
        in cases when you want to apply timeoutlogic around block of code or in cases
        when ``asyncio.wait_for()`` isnot suitable. Also it''s much faster than ``asyncio.wait_for()``because
        ``timeout`` doesn''t create a new task.The ``timeout(delay, *, loop=None)``
        call returns a context managerthat cancels a block on *timeout* expiring::   from
        async_timeout import timeout   async with timeout(1.5):       await inner()1.
        If ``inner()`` is executed faster than in ``1.5`` seconds nothing   happens.2.
        Otherwise ``inner()`` is cancelled internally by sending   ``asyncio.CancelledError``
        into but ``asyncio.TimeoutError`` is   raised outside of context manager scope.*timeout*
        parameter could be ``None`` for skipping timeout functionality.Alternatively,
        ``timeout_at(when)`` can be used for schedulingat the absolute time::   loop
        = asyncio.get_event_loop()   now = loop.time()   async with timeout_at(now
        + 1.5):       await inner()Please note: it is not POSIX time but a time withundefined
        starting base, e.g. the time of the system power on.Context manager has ``.expired``
        property for check if timeout happensexactly in context manager::   async
        with timeout(1.5) as cm:       await inner()   print(cm.expired)The property
        is ``True`` if ``inner()`` execution is cancelled bytimeout context manager.If
        ``inner()`` call explicitly raises ``TimeoutError`` ``cm.expired``is ``False``.The
        scheduled deadline time is available as ``.deadline`` property::   async with
        timeout(1.5) as cm:       cm.deadlineNot finished yet timeout can be rescheduled
        by ``shift_by()``or ``shift_to()`` methods::   async with timeout(1.5) as
        cm:       cm.shift(1)  # add another second on waiting       cm.update(loop.time()
        + 5)  # reschedule to now+5 secondsRescheduling is forbidden if the timeout
        is expired or after exit from ``async with``code block.Installation------------::   $
        pip install async-timeoutThe library is Python 3 only!Authors and License-------------------The
        module is written by Andrew Svetlov.It''s *Apache 2* licensed and freely available.'
      Package: async-timeout
      Source: pip
      Version: 4.0.3
      Hash: ''
      licenses:
      - Apache-2.0
      Title: async-timeout
      DownloadURL: https://files.pythonhosted.org/packages/87/d6/21b30a550dafea84b1b8eee21b5e23fa16d010ae006011221f33dcd8d7f8/async-timeout-4.0.3.tar.gz
  bazaar:
    register: 'no'
    prim: 4/CTX1028739
    community_link: https://pypi.org/project/async-timeout
    community_name: https://pypi.org/project/async-timeout
    community_url: https://pypi.org/project/async-timeout
    component_comment: ''
    component_highlevel_description: asyncio-compatible timeout context manager.
    component_name: async-timeout
    component_platform: linux
    component_programing_language: Python
    component_version: 4.0.3
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://files.pythonhosted.org/packages/87/d6/21b30a550dafea84b1b8eee21b5e23fa16d010ae006011221f33dcd8d7f8/async-timeout-4.0.3.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1062789&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Ukraine
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: async-timeout
    target_sw: linux
    vendor: pip
    version: 4.0.3
    web_url: https://github.com/aio-libs/async-timeout
  licenses:
  - Apache-2.0
  name: async-timeout
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 4.0.3
  mimer:
    linking: Static
    product_number: CTX1028739
    product_version_label: 4.0.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: certifi+2024.2.2
  additional_info:
    fossa-attribution:
      Description: 'Certifi: Python SSL Certificates================================Certifi
        provides Mozilla''s carefully curated collection of Root Certificates forvalidating
        the trustworthiness of SSL certificates while verifying the identityof TLS
        hosts. It has been extracted from the `Requests`_ project.Installation------------``certifi``
        is available on PyPI. Simply install it with ``pip``::    $ pip install certifiUsage-----To
        reference the installed certificate authority (CA) bundle, you can use thebuilt-in
        function::    >>> import certifi    >>> certifi.where()    ''/usr/local/lib/python3.7/site-packages/certifi/cacert.pem''Or
        from the command line::    $ python -m certifi    /usr/local/lib/python3.7/site-packages/certifi/cacert.pemEnjoy!..
        _`Requests`: https://requests.readthedocs.io/en/master/Addition/Removal of
        Certificates--------------------------------Certifi does not support any addition/removal
        or other modification of theCA trust store content. This project is intended
        to provide a reliable andhighly portable root of trust to python deployments.
        Look to upstream projectsfor methods to use alternate trust.'
      Package: certifi
      Source: pip
      Version: 2024.2.2
      Hash: ''
      licenses:
      - MPL-2.0
      Title: certifi
      DownloadURL: https://files.pythonhosted.org/packages/71/da/e94e26401b62acd6d91df2b52954aceb7f561743aa5ccc32152886c76c96/certifi-2024.2.2.tar.gz
  bazaar:
    register: 'no'
    prim: 39/CTX1020628
    community_link: https://github.com/certifi/python-certifi
    community_name: https://github.com/certifi/python-certifi
    community_url: https://github.com/certifi/python-certifi
    component_comment: ''
    component_highlevel_description: (Python Distribution) A carefully curated collection
      of Root Certificates for validating the trustworthiness of SSL certificates
      while verifying the identity of TLS hosts.
    component_name: certifi
    component_platform: linux
    component_programing_language: Python
    component_version: 2024.02.02
    licenses:
    - ''
    src_download_link: https://files.pythonhosted.org/packages/71/da/e94e26401b62acd6d91df2b52954aceb7f561743aa5ccc32152886c76c96/certifi-2024.2.2.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1077790&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: certifi
    target_sw: linux
    vendor: pip
    version: 2024.2.2
    web_url: https://github.com/certifi/python-certifi
  licenses:
  - MPL-2.0
  name: certifi
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2024.2.2
  mimer:
    linking: Static
    product_number: CTX1020628
    product_version_label: 2024.02.02
    selected_licenses:
    - MPL-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: click+8.1.7
  additional_info:
    fossa-attribution:
      Description: '\$ click\_==========Click is a Python package for creating beautiful
        command line interfacesin a composable way with as little code as necessary.
        It''s the "CommandLine Interface Creation Kit". It''s highly configurable
        but comes withsensible defaults out of the box.It aims to make the process
        of writing command line tools quick and funwhile also preventing any frustration
        caused by the inability toimplement an intended CLI API.Click in three points:-   Arbitrary
        nesting of commands-   Automatic help page generation-   Supports lazy loading
        of subcommands at runtimeInstalling----------Install and update using `pip`_:..
        code-block:: text    $ pip install -U click.. _pip: https://pip.pypa.io/en/stable/getting-started/A
        Simple Example----------------.. code-block:: python    import click    @click.command()    @click.option("--count",
        default=1, help="Number of greetings.")    @click.option("--name", prompt="Your
        name", help="The person to greet.")    def hello(count, name):        """Simple
        program that greets NAME for a total of COUNT times."""        for _ in range(count):            click.echo(f"Hello,
        {name}!")    if __name__ == ''__main__'':        hello().. code-block:: text    $
        python hello.py --count=3    Your name: Click    Hello, Click!    Hello, Click!    Hello,
        Click!Donate------The Pallets organization develops and supports Click and
        other popularpackages. In order to grow the community of contributors and
        users, andallow the maintainers to devote more time to the projects, `pleasedonate
        today`_... _please donate today: https://palletsprojects.com/donateLinks------   Documentation:
        https://click.palletsprojects.com/-   Changes: https://click.palletsprojects.com/changes/-   PyPI
        Releases: https://pypi.org/project/click/-   Source Code: https://github.com/pallets/click-   Issue
        Tracker: https://github.com/pallets/click/issues-   Chat: https://discord.gg/pallets'
      Package: click
      Source: pip
      Version: 8.1.7
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: click
      DownloadURL: https://files.pythonhosted.org/packages/96/d3/f04c7bfcf5c1862a2a5b845c6b2b360488cf47af55dfa79c98f6a6bf98b5/click-8.1.7.tar.gz
  bazaar:
    register: 'no'
    prim: 20/CAX1058601
    community_link: https://pypi.org/project/click
    community_name: https://pypi.org/project/click
    community_url: https://pypi.org/project/click
    component_comment: ''
    component_highlevel_description: Python composable command line interface toolkit
    component_name: click
    component_platform: linux
    component_programing_language: Python
    component_version: 8.1.7
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://files.pythonhosted.org/packages/96/d3/f04c7bfcf5c1862a2a5b845c6b2b360488cf47af55dfa79c98f6a6bf98b5/click-8.1.7.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1059544&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: click
    target_sw: linux
    vendor: pip
    version: 8.1.7
    web_url: https://palletsprojects.com/p/click/
  licenses:
  - BSD-3-Clause
  name: click
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 8.1.7
  mimer:
    linking: Static
    product_number: CAX1058601
    product_version_label: 8.1.7
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: fastapi+0.110.0
  additional_info:
    fossa-attribution:
      Description: "<p align=\"center\">  <a href=\"https://fastapi.tiangolo.com\"><img
        src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" alt=\"FastAPI\"></a></p><p
        align=\"center\">    <em>FastAPI framework, high performance, easy to learn,
        fast to code, ready for production</em></p><p align=\"center\"><a href=\"https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster\"
        target=\"_blank\">    <img src=\"https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&branch=master\"
        alt=\"Test\"></a><a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/fastapi\"
        target=\"_blank\">    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/tiangolo/fastapi.svg\"
        alt=\"Coverage\"></a><a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">
        \   <img src=\"https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package\"
        alt=\"Package version\"></a><a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">
        \   <img src=\"https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058\"
        alt=\"Supported Python versions\"></a></p>---**Documentation**: <a href=\"https://fastapi.tiangolo.com\"
        target=\"_blank\">https://fastapi.tiangolo.com</a>**Source Code**: <a href=\"https://github.com/tiangolo/fastapi\"
        target=\"_blank\">https://github.com/tiangolo/fastapi</a>---FastAPI is a modern,
        fast (high-performance), web framework for building APIs with Python based
        on standard Python type hints.The key features are:* **Fast**: Very high performance,
        on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One
        of the fastest Python frameworks available](#performance).* **Fast to code**:
        Increase the speed to develop features by about 200% to 300%. ** **Fewer bugs**:
        Reduce about 40% of human (developer) induced errors. ** **Intuitive**: Great
        editor support. <abbr title=\"also known as auto-complete, autocompletion,
        IntelliSense\">Completion</abbr> everywhere. Less time debugging.* **Easy**:
        Designed to be easy to use and learn. Less time reading docs.* **Short**:
        Minimize code duplication. Multiple features from each parameter declaration.
        Fewer bugs.* **Robust**: Get production-ready code. With automatic interactive
        documentation.* **Standards-based**: Based on (and fully compatible with)
        the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\"
        class=\"external-link\" target=\"_blank\">OpenAPI</a> (previously known as
        Swagger) and <a href=\"https://json-schema.org/\" class=\"external-link\"
        target=\"_blank\">JSON Schema</a>.<small>* estimation based on tests on an
        internal development team, building production applications.</small>## Sponsors<!--
        sponsors --><a href=\"https://cryptapi.io/\" target=\"_blank\" title=\"CryptAPI:
        Your easy to use, secure and privacy oriented payment gateway.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg\"></a><a
        href=\"https://platform.sh/try-it-now/?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023\"
        target=\"_blank\" title=\"Build, run and scale your apps on a modern, reliable,
        and secure PaaS.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/platform-sh.png\"></a><a
        href=\"https://www.porter.run\" target=\"_blank\" title=\"Deploy FastAPI on
        AWS with a few clicks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/porter.png\"></a><a
        href=\"https://bump.sh/fastapi?utm_source=fastapi&utm_medium=referral&utm_campaign=sponsor\"
        target=\"_blank\" title=\"Automate FastAPI documentation generation with Bump.sh\"><img
        src=\"https://fastapi.tiangolo.com/img/sponsors/bump-sh.svg\"></a><a href=\"https://reflex.dev\"
        target=\"_blank\" title=\"Reflex\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/reflex.png\"></a><a
        href=\"https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge\"
        target=\"_blank\" title=\"Scalar: Beautiful Open-Source API References from
        Swagger/OpenAPI files\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/scalar.svg\"></a><a
        href=\"https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge\"
        target=\"_blank\" title=\"Auth, user management and more for your B2B product\"><img
        src=\"https://fastapi.tiangolo.com/img/sponsors/propelauth.png\"></a><a href=\"https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=banner%20january%2024\"
        target=\"_blank\" title=\"Coherence\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/coherence.png\"></a><a
        href=\"https://www.mongodb.com/developer/languages/python/python-quickstart-fastapi/?utm_campaign=fastapi_framework&utm_source=fastapi_sponsorship&utm_medium=web_referral\"
        target=\"_blank\" title=\"Simplify Full Stack Development with FastAPI & MongoDB\"><img
        src=\"https://fastapi.tiangolo.com/img/sponsors/mongodb.png\"></a><a href=\"https://training.talkpython.fm/fastapi-courses\"
        target=\"_blank\" title=\"FastAPI video courses on demand from people you
        trust\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/talkpython-v2.jpg\"></a><a
        href=\"https://github.com/deepset-ai/haystack/\" target=\"_blank\" title=\"Build
        powerful search from composable, open source building blocks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg\"></a><a
        href=\"https://databento.com/\" target=\"_blank\" title=\"Pay as you go for
        market data\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/databento.svg\"></a><a
        href=\"https://speakeasyapi.dev?utm_source=fastapi+repo&utm_medium=github+sponsorship\"
        target=\"_blank\" title=\"SDKs for your API | Speakeasy\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/speakeasy.png\"></a><a
        href=\"https://www.svix.com/\" target=\"_blank\" title=\"Svix - Webhooks as
        a service\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/svix.svg\"></a><a
        href=\"https://www.codacy.com/?utm_source=github&utm_medium=sponsors&utm_id=pioneers\"
        target=\"_blank\" title=\"Take code reviews from hours to minutes\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/codacy.png\"></a><!--
        /sponsors --><a href=\"https://fastapi.tiangolo.com/fastapi-people/#sponsors\"
        class=\"external-link\" target=\"_blank\">Other sponsors</a>## Opinions\"_[...]
        I'm using **FastAPI** a ton these days. [...] I'm actually planning to use
        it for all of my team's **ML services at Microsoft**. Some of them are getting
        integrated into the core **Windows** product and some **Office** products._\"<div
        style=\"text-align: right; margin-right: 10%;\">Kabir Khan - <strong>Microsoft</strong>
        <a href=\"https://github.com/tiangolo/fastapi/pull/26\" target=\"_blank\"><small>(ref)</small></a></div>---\"_We
        adopted the **FastAPI** library to spawn a **REST** server that can be queried
        to obtain **predictions**. [for Ludwig]_\"<div style=\"text-align: right;
        margin-right: 10%;\">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala
        - <strong>Uber</strong> <a href=\"https://eng.uber.com/ludwig-v0-2/\" target=\"_blank\"><small>(ref)</small></a></div>---\"_**Netflix**
        is pleased to announce the open-source release of our **crisis management**
        orchestration framework: **Dispatch**! [built with **FastAPI**]_\"<div style=\"text-align:
        right; margin-right: 10%;\">Kevin Glisson, Marc Vilanova, Forest Monsen -
        <strong>Netflix</strong> <a href=\"https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072\"
        target=\"_blank\"><small>(ref)</small></a></div>---\"_I\u2019m over the moon
        excited about **FastAPI**. It\u2019s so fun!_\"<div style=\"text-align: right;
        margin-right: 10%;\">Brian Okken - <strong><a href=\"https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855\"
        target=\"_blank\">Python Bytes</a> podcast host</strong> <a href=\"https://twitter.com/brianokken/status/1112220079972728832\"
        target=\"_blank\"><small>(ref)</small></a></div>---\"_Honestly, what you've
        built looks super solid and polished. In many ways, it's what I wanted **Hug**
        to be - it's really inspiring to see someone build that._\"<div style=\"text-align:
        right; margin-right: 10%;\">Timothy Crosley - <strong><a href=\"https://www.hug.rest/\"
        target=\"_blank\">Hug</a> creator</strong> <a href=\"https://news.ycombinator.com/item?id=19455465\"
        target=\"_blank\"><small>(ref)</small></a></div>---\"_If you're looking to
        learn one **modern framework** for building REST APIs, check out **FastAPI**
        [...] It's fast, easy to use and easy to learn [...]_\"\"_We've switched over
        to **FastAPI** for our **APIs** [...] I think you'll like it [...]_\"<div
        style=\"text-align: right; margin-right: 10%;\">Ines Montani - Matthew Honnibal
        - <strong><a href=\"https://explosion.ai\" target=\"_blank\">Explosion AI</a>
        founders - <a href=\"https://spacy.io\" target=\"_blank\">spaCy</a> creators</strong>
        <a href=\"https://twitter.com/_inesmontani/status/1144173225322143744\" target=\"_blank\"><small>(ref)</small></a>
        - <a href=\"https://twitter.com/honnibal/status/1144031421859655680\" target=\"_blank\"><small>(ref)</small></a></div>---\"_If
        anyone is looking to build a production Python API, I would highly recommend
        **FastAPI**. It is **beautifully designed**, **simple to use** and **highly
        scalable**, it has become a **key component** in our API first development
        strategy and is driving many automations and services such as our Virtual
        TAC Engineer._\"<div style=\"text-align: right; margin-right: 10%;\">Deon
        Pillsbury - <strong>Cisco</strong> <a href=\"https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/\"
        target=\"_blank\"><small>(ref)</small></a></div>---## **Typer**, the FastAPI
        of CLIs<a href=\"https://typer.tiangolo.com\" target=\"_blank\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg\"
        style=\"width: 20%;\"></a>If you are building a <abbr title=\"Command Line
        Interface\">CLI</abbr> app to be used in the terminal instead of a web API,
        check out <a href=\"https://typer.tiangolo.com/\" class=\"external-link\"
        target=\"_blank\">**Typer**</a>.**Typer** is FastAPI's little sibling. And
        it's intended to be the **FastAPI of CLIs**. \u2328\uFE0F \U0001F680## RequirementsFastAPI
        stands on the shoulders of giants:* <a href=\"https://www.starlette.io/\"
        class=\"external-link\" target=\"_blank\">Starlette</a> for the web parts.*
        <a href=\"https://docs.pydantic.dev/\" class=\"external-link\" target=\"_blank\">Pydantic</a>
        for the data parts.## Installation<div class=\"termy\">```console$ pip install
        fastapi---> 100%```</div>## Example### Create it* Create a file `main.py`
        with:```Pythonfrom typing import Unionfrom fastapi import FastAPIapp = FastAPI()@app.get(\"/\")def
        read_root():    return {\"Hello\": \"World\"}@app.get(\"/items/{item_id}\")def
        read_item(item_id: int, q: Union[str, None] = None):    return {\"item_id\":
        item_id, \"q\": q}```<details markdown=\"1\"><summary>Or use <code>async def</code>...</summary>If
        your code uses `async` / `await`, use `async def`:```Python hl_lines=\"9  14\"from
        typing import Unionfrom fastapi import FastAPIapp = FastAPI()@app.get(\"/\")async
        def read_root():    return {\"Hello\": \"World\"}@app.get(\"/items/{item_id}\")async
        def read_item(item_id: int, q: Union[str, None] = None):    return {\"item_id\":
        item_id, \"q\": q}```**Note**:If you don't know, check the _\"In a hurry?\"_
        section about <a href=\"https://fastapi.tiangolo.com/async/#in-a-hurry\" target=\"_blank\">`async`
        and `await` in the docs</a>.</details>### Run itRun the server with:<div class=\"termy\">```console$
        fastapi dev main.py \u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
        FastAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E
        \u2502                                                     \u2502 \u2502  Serving
        at: http://127.0.0.1:8000                  \u2502 \u2502                                                     \u2502
        \u2502  API docs: http://127.0.0.1:8000/docs               \u2502 \u2502                                                     \u2502
        \u2502  Running in development mode, for production use:   \u2502 \u2502                                                     \u2502
        \u2502  fastapi run                                        \u2502 \u2502                                                     \u2502
        \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256FINFO:
        \    Will watch for changes in these directories: ['/home/user/code/awesomeapp']INFO:
        \    Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:
        \    Started reloader process [2248755] using WatchFilesINFO:     Started
        server process [2248757]INFO:     Waiting for application startup.INFO:     Application
        startup complete.```</div><details markdown=\"1\"><summary>About the command
        <code>fastapi dev main.py</code>...</summary>The command `fastapi dev` reads
        your `main.py` file, detects the **FastAPI** app in it, and starts a server
        using <a href=\"https://www.uvicorn.org\" class=\"external-link\" target=\"_blank\">Uvicorn</a>.By
        default, `fastapi dev` will start with auto-reload enabled for local development.You
        can read more about it in the <a href=\"https://fastapi.tiangolo.com/fastapi-cli/\"
        target=\"_blank\">FastAPI CLI docs</a>.</details>### Check itOpen your browser
        at <a href=\"http://127.0.0.1:8000/items/5?q=somequery\" class=\"external-link\"
        target=\"_blank\">http://127.0.0.1:8000/items/5?q=somequery</a>.You will see
        the JSON response as:```JSON{\"item_id\": 5, \"q\": \"somequery\"}```You already
        created an API that:* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.*
        Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).*
        The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should
        be an `int`.* The _path_ `/items/{item_id}` has an optional `str` _query parameter_
        `q`.### Interactive API docsNow go to <a href=\"http://127.0.0.1:8000/docs\"
        class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.You
        will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\"
        class=\"external-link\" target=\"_blank\">Swagger UI</a>):![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)###
        Alternative API docsAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\"
        class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.You
        will see the alternative automatic documentation (provided by <a href=\"https://github.com/Rebilly/ReDoc\"
        class=\"external-link\" target=\"_blank\">ReDoc</a>):![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)##
        Example upgradeNow modify the file `main.py` to receive a body from a `PUT`
        request.Declare the body using standard Python types, thanks to Pydantic.```Python
        hl_lines=\"4  9-12  25-27\"from typing import Unionfrom fastapi import FastAPIfrom
        pydantic import BaseModelapp = FastAPI()class Item(BaseModel):    name: str
        \   price: float    is_offer: Union[bool, None] = None@app.get(\"/\")def read_root():
        \   return {\"Hello\": \"World\"}@app.get(\"/items/{item_id}\")def read_item(item_id:
        int, q: Union[str, None] = None):    return {\"item_id\": item_id, \"q\":
        q}@app.put(\"/items/{item_id}\")def update_item(item_id: int, item: Item):
        \   return {\"item_name\": item.name, \"item_id\": item_id}```The `fastapi
        dev` server should reload automatically.### Interactive API docs upgradeNow
        go to <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.*
        The interactive API documentation will be automatically updated, including
        the new body:![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)*
        Click on the button \"Try it out\", it allows you to fill the parameters and
        directly interact with the API:![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)*
        Then click on the \"Execute\" button, the user interface will communicate
        with your API, send the parameters, get the results and show them on the screen:![Swagger
        UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)###
        Alternative API docs upgradeAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\"
        class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.*
        The alternative documentation will also reflect the new query parameter and
        body:![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)###
        RecapIn summary, you declare **once** the types of parameters, body, etc.
        as function parameters.You do that with standard modern Python types.You don't
        have to learn a new syntax, the methods or classes of a specific library,
        etc.Just standard **Python**.For example, for an `int`:```Pythonitem_id: int```or
        for a more complex `Item` model:```Pythonitem: Item```...and with that single
        declaration you get:* Editor support, including:    * Completion.    * Type
        checks.* Validation of data:    * Automatic and clear errors when the data
        is invalid.    * Validation even for deeply nested JSON objects.* <abbr title=\"also
        known as: serialization, parsing, marshalling\">Conversion</abbr> of input
        data: coming from the network to Python data and types. Reading from:    *
        JSON.    * Path parameters.    * Query parameters.    * Cookies.    * Headers.
        \   * Forms.    * Files.* <abbr title=\"also known as: serialization, parsing,
        marshalling\">Conversion</abbr> of output data: converting from Python data
        and types to network data (as JSON):    * Convert Python types (`str`, `int`,
        `float`, `bool`, `list`, etc).    * `datetime` objects.    * `UUID` objects.
        \   * Database models.    * ...and many more.* Automatic interactive API documentation,
        including 2 alternative user interfaces:    * Swagger UI.    * ReDoc.---Coming
        back to the previous code example, **FastAPI** will:* Validate that there
        is an `item_id` in the path for `GET` and `PUT` requests.* Validate that the
        `item_id` is of type `int` for `GET` and `PUT` requests.    * If it is not,
        the client will see a useful, clear error.* Check if there is an optional
        query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`)
        for `GET` requests.    * As the `q` parameter is declared with `= None`, it
        is optional.    * Without the `None` it would be required (as is the body
        in the case with `PUT`).* For `PUT` requests to `/items/{item_id}`, Read the
        body as JSON:    * Check that it has a required attribute `name` that should
        be a `str`.    * Check that it has a required attribute `price` that has to
        be a `float`.    * Check that it has an optional attribute `is_offer`, that
        should be a `bool`, if present.    * All this would also work for deeply nested
        JSON objects.* Convert from and to JSON automatically.* Document everything
        with OpenAPI, that can be used by:    * Interactive documentation systems.
        \   * Automatic client code generation systems, for many languages.* Provide
        2 interactive documentation web interfaces directly.---We just scratched the
        surface, but you already get the idea of how it all works.Try changing the
        line with:```Python    return {\"item_name\": item.name, \"item_id\": item_id}```...from:```Python
        \       ... \"item_name\": item.name ...```...to:```Python        ... \"item_price\":
        item.price ...```...and see how your editor will auto-complete the attributes
        and know their types:![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)For
        a more complete example including more features, see the <a href=\"https://fastapi.tiangolo.com/tutorial/\">Tutorial
        - User Guide</a>.**Spoiler alert**: the tutorial - user guide includes:* Declaration
        of **parameters** from other different places as: **headers**, **cookies**,
        **form fields** and **files**.* How to set **validation constraints** as `maximum_length`
        or `regex`.* A very powerful and easy to use **<abbr title=\"also known as
        components, resources, providers, services, injectables\">Dependency Injection</abbr>**
        system.* Security and authentication, including support for **OAuth2** with
        **JWT tokens** and **HTTP Basic** auth.* More advanced (but equally easy)
        techniques for declaring **deeply nested JSON models** (thanks to Pydantic).*
        **GraphQL** integration with <a href=\"https://strawberry.rocks\" class=\"external-link\"
        target=\"_blank\">Strawberry</a> and other libraries.* Many extra features
        (thanks to Starlette) as:    * **WebSockets**    * extremely easy tests based
        on HTTPX and `pytest`    * **CORS**    * **Cookie Sessions**    * ...and more.##
        PerformanceIndependent TechEmpower benchmarks show **FastAPI** applications
        running under Uvicorn as <a href=\"https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7\"
        class=\"external-link\" target=\"_blank\">one of the fastest Python frameworks
        available</a>, only below Starlette and Uvicorn themselves (used internally
        by FastAPI). (*)To understand more about it, see the section <a href=\"https://fastapi.tiangolo.com/benchmarks/\"
        class=\"internal-link\" target=\"_blank\">Benchmarks</a>.## DependenciesUsed
        by Pydantic:* <a href=\"https://github.com/JoshData/python-email-validator\"
        target=\"_blank\"><code>email_validator</code></a> - for email validation.*
        <a href=\"https://docs.pydantic.dev/latest/usage/pydantic_settings/\" target=\"_blank\"><code>pydantic-settings</code></a>
        - for settings management.* <a href=\"https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/\"
        target=\"_blank\"><code>pydantic-extra-types</code></a> - for extra types
        to be used with Pydantic.Used by Starlette:* <a href=\"https://www.python-httpx.org\"
        target=\"_blank\"><code>httpx</code></a> - Required if you want to use the
        `TestClient`.* <a href=\"https://jinja.palletsprojects.com\" target=\"_blank\"><code>jinja2</code></a>
        - Required if you want to use the default template configuration.* <a href=\"https://github.com/Kludex/python-multipart\"
        target=\"_blank\"><code>python-multipart</code></a> - Required if you want
        to support form <abbr title=\"converting the string that comes from an HTTP
        request into Python data\">\"parsing\"</abbr>, with `request.form()`.Used
        by FastAPI / Starlette:* <a href=\"https://www.uvicorn.org\" target=\"_blank\"><code>uvicorn</code></a>
        - for the server that loads and serves your application.* <a href=\"https://github.com/ijl/orjson\"
        target=\"_blank\"><code>orjson</code></a> - Required if you want to use `ORJSONResponse`.*
        <a href=\"https://github.com/esnme/ultrajson\" target=\"_blank\"><code>ujson</code></a>
        - Required if you want to use `UJSONResponse`.* `fastapi-cli` - to provide
        the `fastapi` command.When you install `fastapi` it comes these standard dependencies.##
        `fastapi-slim`If you don't want the extra standard optional dependencies,
        install `fastapi-slim` instead.When you install with:```bashpip install fastapi```...it
        includes the same code and dependencies as:```bashpip install \"fastapi-slim[standard]\"```The
        standard extra dependencies are the ones mentioned above.## LicenseThis project
        is licensed under the terms of the MIT license."
      Package: fastapi
      Source: pip
      Version: 0.110.0
      Hash: ''
      licenses:
      - Apache-2.0
      - MIT
      Title: fastapi
      DownloadURL: https://files.pythonhosted.org/packages/61/53/326977db62bf34bbdfc64acb9414e1881af7ea14e8a062fd1c11a8697616/fastapi-0.110.0.tar.gz
  bazaar:
    register: 'no'
    prim: 36/CTX1030071
    community_link: https://github.com/tiangolo/fastapi
    community_name: https://github.com/tiangolo/fastapi
    community_url: https://github.com/tiangolo/fastapi
    component_comment: ''
    component_highlevel_description: FastAPI framework, high performance, easy to
      learn, fast to code, ready for production
    component_name: fastapi
    component_platform: linux
    component_programing_language: Python
    component_version: 0.110.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/tiangolo/fastapi/archive/0.110.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080932&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: fastapi
    target_sw: linux
    vendor: pip
    version: 0.110.0
    web_url: https://pypi.org/project/fastapi/0.111.0/
  licenses:
  - Apache-2.0
  - MIT
  name: fastapi
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.110.0
  mimer:
    linking: Static
    product_number: CTX1030071
    product_version_label: 0.110.0
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: filelock+3.13.1
  additional_info:
    fossa-attribution:
      Description: '# py-filelock![travis-ci](https://travis-ci.org/benediktschmitt/py-filelock.svg?branch=master)This
        package contains a single module, which implements a platform independentfile
        lock in Python, which provides a simple way of inter-process communication:```Pythonfrom
        filelock import Timeout, FileLocklock = FileLock("high_ground.txt.lock")with
        lock:    open("high_ground.txt", "a").write("You were the chosen one.")        ```**Don''t
        use** a *FileLock* to lock the file you want to write to, instead createa
        separate *.lock* file as shown above.![animated example](https://raw.githubusercontent.com/benediktschmitt/py-filelock/master/example/example.gif)##
        Similar librariesPerhaps you are looking for something like*   https://pypi.python.org/pypi/pid/2.1.1*   https://docs.python.org/3.6/library/msvcrt.html#msvcrt.locking*   or
        https://docs.python.org/3/library/fcntl.html#fcntl.flock## Installation*py-filelock*
        is available via PyPi:```$ pip3 install filelock```## DocumentationThe documentation
        for the API is available on[readthedocs.org](https://filelock.readthedocs.io/).###
        ExamplesA *FileLock* is used to indicate another process of your application
        that aresource or workingdirectory is currently used. To do so, create a *FileLock*
        first:```Pythonfrom filelock import Timeout, FileLockfile_path = "high_ground.txt"lock_path
        = "high_ground.txt.lock"lock = FileLock(lock_path, timeout=1)```The lock object
        supports multiple ways for acquiring the lock, including theones used to acquire
        standard Python thread locks:```Pythonwith lock:    open(file_path, "a").write("Hello
        there!")lock.acquire()try:    open(file_path, "a").write("General Kenobi!")finally:    lock.release()```The
        *acquire()* method accepts also a *timeout* parameter. If the lock cannot
        beacquired within *timeout* seconds, a *Timeout* exception is raised:```Pythontry:    with
        lock.acquire(timeout=10):        open(file_path, "a").write("I have a bad
        feeling about this.")except Timeout:    print("Another instance of this application
        currently holds the lock.")```The lock objects are recursive locks, which
        means that once acquired, they willnot block on successive lock requests:```Pythondef
        cite1():    with lock:        open(file_path, "a").write("I hate it when he
        does that.")def cite2():    with lock:        open(file_path, "a").write("You
        don''t want to sell me death sticks.")# The lock is acquired here.with lock:    cite1()    cite2()#
        And released here.```## FileLock vs SoftFileLockThe *FileLock* is platform
        dependent while the *SoftFileLock* is not. Use the*FileLock* if all instances
        of your application are running on the same host anda *SoftFileLock* otherwise.The
        *SoftFileLock* only watches the existence of the lock file. This makes itultra
        portable, but also more prone to dead locks if the application crashes.You
        can simply delete the lock file in such cases.## ContributionsContributions
        are always welcome, please make sure they pass all tests beforecreating a
        pull request. Never hesitate to open a new issue, although it maytake some
        time for me to respond.## LicenseThis package is [public domain](./LICENSE.rst).'
      Package: filelock
      Source: pip
      Version: 3.13.1
      Hash: ''
      licenses:
      - Unlicense
      Title: filelock
      DownloadURL: https://files.pythonhosted.org/packages/70/70/41905c80dcfe71b22fb06827b8eae65781783d4a14194bce79d16a013263/filelock-3.13.1.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1026319
    community_link: https://github.com/tox-dev/py-filelock
    community_name: https://github.com/tox-dev/py-filelock
    community_url: https://github.com/tox-dev/py-filelock
    component_comment: ''
    component_highlevel_description: A platform-independent file lock for Python.
    component_name: py-filelock
    component_platform: linux
    component_programing_language: Python
    component_version: 3.3.1
    licenses:
    - FAL1159993 (Public Domain)
    src_download_link: https://github.com/tox-dev/py-filelock/archive/3.3.1.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=989008&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: filelock
    target_sw: linux
    vendor: pip
    version: 3.13.1
    web_url: https://github.com/benediktschmitt/py-filelock
  licenses:
  - Unlicense
  name: filelock
  primary:
  - torch+2.2.2
  subcomponent: false
  type: FOSS
  versions:
  - 3.13.1
  mimer:
    linking: Static
    product_number: CTX1026319
    product_version_label: 3.3.1
    selected_licenses:
    - Public Domain
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: fsspec+2024.2.0
  additional_info:
    fossa-attribution:
      Description: '# filesystem_spec[![PyPI version](https://badge.fury.io/py/fsspec.svg)](https://pypi.python.org/pypi/fsspec/)[![Anaconda-Server
        Badge](https://anaconda.org/conda-forge/fsspec/badges/version.svg)](https://anaconda.org/conda-forge/fsspec)![Build](https://github.com/fsspec/filesystem_spec/workflows/CI/badge.svg)[![Docs](https://readthedocs.org/projects/filesystem-spec/badge/?version=latest)](https://filesystem-spec.readthedocs.io/en/latest/?badge=latest)[![PyPi
        downloads](https://img.shields.io/pypi/dm/fsspec?label=pypi%20downloads&style=flat)](https://pepy.tech/project/fsspec)A
        specification for pythonic filesystems.## Install```bashpip install fsspec```would
        install the base fsspec. Various optionally supported features might require
        specification of customextra require, e.g. `pip install fsspec[ssh]` will
        install dependencies for `ssh` backends support.Use `pip install fsspec[full]`
        for installation of all known extra dependencies.Up-to-date package also provided
        through conda-forge distribution:```bashconda install -c conda-forge fsspec```##
        PurposeTo produce a template or specification for a file-system interface,
        that specific implementations should follow,so that applications making use
        of them can rely on a common behaviour and not have to worry about the specificinternal
        implementation decisions with any given backend. Many such implementations
        are included in this package,or in sister projects such as `s3fs` and `gcsfs`.In
        addition, if this is well-designed, then additional functionality, such as
        a key-value store or FUSEmounting of the file-system implementation may be
        available for all implementations "for free".## DocumentationPlease refer
        to [RTD](https://filesystem-spec.readthedocs.io/en/latest/?badge=latest)##
        Developfsspec uses GitHub Actions for CI. Environment files can be foundin
        the "ci/" directory. Note that the main environment is called "py38",but it
        is expected that the version of python installed be adjustable atCI runtime.
        For local use, pick a version suitable for you.### TestingTests can be run
        in the dev environment, if activated, via ``pytest fsspec``.The full fsspec
        suite requires a system-level docker, docker-compose, and fuseinstallation.
        If only making changes to one backend implementation, it isnot generally necessary
        to run all tests locally.It is expected that contributors ensure that any
        change to fsspec does notcause issues or regressions for either other fsspec-related
        packages suchas gcsfs and s3fs, nor for downstream users of fsspec. The "downstream"
        CIrun and corresponding environment file run a set of tests from the dasktest
        suite, and very minimal tests against pandas and zarr from thetest_downstream.py
        module in this repo.### Code Formattingfsspec uses [Black](https://black.readthedocs.io/en/stable)
        to ensurea consistent code format throughout the project.Run ``black fsspec``
        from the root of the filesystem_spec repository toauto-format your code. Additionally,
        many editors have plugins that will apply``black`` as you edit files. ``black``
        is included in the ``tox`` environments.Optionally, you may wish to setup
        [pre-commit hooks](https://pre-commit.com) toautomatically run ``black`` when
        you make a git commit.Run ``pre-commit install --install-hooks`` from the
        root of thefilesystem_spec repository to setup pre-commit hooks. ``black``
        will now be runbefore you commit, reformatting any changed files. You can
        format withoutcommitting via ``pre-commit run`` or skip these checks with
        ``git commit--no-verify``.'
      Package: fsspec
      Source: pip
      Version: 2024.2.0
      Hash: ''
      licenses:
      - BSD-3-Clause
      - Unlicense
      Title: fsspec
      DownloadURL: https://files.pythonhosted.org/packages/28/d3/c2e0403c735548abf991bba3f45ba39194dff4569f76a99fbe77078ba7c5/fsspec-2024.2.0.tar.gz
  bazaar:
    register: 'no'
    prim: 15/CTX1033524
    community_link: https://github.com/fsspec/filesystem_spec
    community_name: https://github.com/fsspec/filesystem_spec
    community_url: https://github.com/fsspec/filesystem_spec
    component_comment: ''
    component_highlevel_description: S3FS builds on aiobotocore to provide a convenient Python filesystem interface for S3.
    component_name: fsspec
    component_platform: linux
    component_programing_language: Python
    component_version: 2024.2.0
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/fsspec/filesystem_spec/archive/refs/tags/2024.2.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080447&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: fsspec
    target_sw: linux
    vendor: pip
    version: 2024.2.0
    web_url: https://github.com/fsspec/filesystem_spec
  licenses:
  - BSD-3-Clause
  - Unlicense
  name: fsspec
  primary:
  - torch+2.2.2
  subcomponent: false
  type: FOSS
  versions:
  - 2024.2.0
  mimer:
    linking: Static
    product_number: CTX1033524
    product_version_label: 2024.2.0
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: gevent+24.2.1
  additional_info:
    fossa-attribution:
      Description: '======== gevent========.. image:: https://github.com/gevent/gevent/workflows/gevent%20testing/badge.svg   :target:
        https://github.com/gevent/gevent/actions.. image:: https://ci.appveyor.com/api/projects/status/bqxl88yhpho223jg?svg=true   :target:
        https://ci.appveyor.com/project/denik/gevent.. image:: https://coveralls.io/repos/gevent/gevent/badge.svg?branch=master&service=github   :target:
        https://coveralls.io/github/gevent/gevent?branch=master..  This file is included
        in README.rst from the top-level  so it is limited to pure ReST markup, not
        Sphinx.gevent is a coroutine_ -based Python_ networking library that uses`greenlet
        <https://greenlet.readthedocs.io>`_ to provide a high-level synchronous API
        on top of the `libev`_or `libuv`_ event loop.Features include:* Fast event
        loop based on `libev`_ or `libuv`_.* Lightweight execution units based on
        greenlets.* API that re-uses concepts from the Python standard library (for  examples
        there are `events`_ and  `queues`_).* `Cooperative sockets with SSL support
        <http://www.gevent.org/api/index.html#networking>`_* `Cooperative DNS queries
        <http://www.gevent.org/dns.html>`_ performed through a threadpool,  dnspython,
        or c-ares.* `Monkey patching utility <http://www.gevent.org/intro.html#monkey-patching>`_
        to get 3rd party modules to become cooperative* TCP/UDP/HTTP servers* Subprocess
        support (through `gevent.subprocess`_)* Thread poolsgevent is `inspired by
        eventlet`_ but features a more consistent API,simpler implementation and better
        performance. Read why others `usegevent`_ and check out the list of the `open
        source projects based ongevent`_.gevent was written by `Denis Bilenko <http://denisbilenko.com/>`_.Since
        version 1.1, gevent is maintained by Jason Madden for`NextThought <https://nextthought.com>`_
        (through gevent 21) and`Institutional Shareholder Services <https://www.issgovernance.com>`_with
        help from the `contributors<https://github.com/gevent/gevent/graphs/contributors>`_
        and islicensed under the MIT license.See `what''s new`_ in the latest major
        release.Check out the detailed changelog_ for this version... _events: http://www.gevent.org/api/gevent.event.html#gevent.event.Event..
        _queues: http://www.gevent.org/api/gevent.queue.html#gevent.queue.Queue..
        _gevent.subprocess: http://www.gevent.org/api/gevent.subprocess.html#module-gevent.subprocess..
        _coroutine: https://en.wikipedia.org/wiki/Coroutine.. _Python: http://python.org..
        _libev: http://software.schmorp.de/pkg/libev.html.. _libuv: http://libuv.org..
        _inspired by eventlet: http://blog.gevent.org/2010/02/27/why-gevent/.. _use
        gevent: http://groups.google.com/group/gevent/browse_thread/thread/4de9703e5dca8271..
        _open source projects based on gevent: https://github.com/gevent/gevent/wiki/Projects..
        _what''s new: http://www.gevent.org/whatsnew_1_5.html.. _changelog: http://www.gevent.org/changelog.htmlRead
        the documentation online at http://www.gevent.org.Post issues on the `bug
        tracker`_, discuss and ask open endedquestions on the `mailing list`_, and
        find announcements andinformation on the blog_ and `twitter (@gevent)`_.===============================
        Installation and Requirements===============================.. _installation:..  This
        file is included in README.rst so it is limited to plain  ReST markup, not
        Sphinx... note::   If you are reading this document on the `Python Package
        Index`_   (PyPI, https://pypi.org/), it is specific to the version of gevent
        that   you are viewing. If you are viewing this document on gevent.org, it   refers
        to the current state of gevent in source control (git   master).Supported
        Platforms===================This version of gevent runs on Python 3.8 and
        up, (for exact detailsof tested versions, see the classifiers on the PyPI
        page or in``setup.py``). gevent requires the `greenlet<https://greenlet.readthedocs.io>`_
        library and will install the`cffi`_ library by default on Windows. The cffi
        library will becomethe default on all platforms in a future release of gevent.This
        version of gevent is also tested on on PyPy 3.10 (7.3.12); itshould run on
        PyPy 3.9 and above. On PyPy, there are no externaldependencies.gevent is tested
        on Windows, macOS, and Linux, and should run on mostother Unix-like operating
        systems (e.g., FreeBSD, Solaris, etc.).. note::   Windows is supported as
        a tier 2, "best effort," platform. It is   suitable for development, but not
        recommended for production. In   particular, PyPy3 on Windows may have issues,
        especially with   subprocesses.   On Windows using the deprecated libev backend,
        gevent is   limited to a maximum of 1024 open sockets due to   `limitations
        in libev`_. This limitation should not exist   with the default libuv backend.Older
        Versions of Python------------------------Users of older versions of Python
        2 or Python 3 may install an olderversion of gevent. Note that these versions
        are generally notsupported.+-------+-------+|Python |Gevent ||Version|Version|+=======+=======+|2.5    |1.0.x  ||       |       |+-------+-------+|2.6    |1.1.x  |+-------+-------+|<=     |1.2.x  ||2.7.8  |       |+-------+-------+|3.3    |1.2.x  |+-------+-------+|3.4.0
        -| 1.3.x ||3.4.2  |       ||       |       |+-------+-------+|3.4.3  | 1.4.x
        ||       |       ||       |       |+-------+-------+|3.5.x  | 20.9.0||       |       ||       |       |+-------+-------+|2.7.9
        -|       ||2.7.18,| 22.10 ||3.6,   |       ||3.7    |       ||       |       |+-------+-------+Installation============..
        note::   This section is about installing released versions of gevent as   distributed
        on the `Python Package Index`_. For building gevent   from source, including
        customizing the build and embedded   libraries, see `Installing From Source`_...
        _Python Package Index: http://pypi.org/project/geventgevent and greenlet can
        both be installed with `pip`_, e.g., ``pipinstall gevent``. Installation using
        `buildout<http://docs.buildout.org/en/latest/>`_ is also supported.On Windows,
        macOS, and Linux, both gevent and greenlet aredistributed as binary `wheels`_...
        tip::   You need Pip 8.0 or later, or buildout 2.10.0 to install the binary   wheels
        on Windows or macOS. On Linux, you''ll need `pip 19   <https://github.com/pypa/pip/pull/5008>`_
        to install the   manylinux2010 wheels... tip::   While the x86-64 binaries
        are considered production quality, they   are built with relatively low optimization
        levels and no hardware   specific optimizations. Serious production users
        are encouraged to   install from source with appropriate compiler flags...
        tip::   Beginning with gevent 20.12.0, 64-bit ARM binaries are distributed   on
        PyPI for aarch64 manylinux2014 compatible systems. Installing these   needs
        a very recent version of ``pip``. These wheels *do not*   contain the c-ares
        resolver, are not tested, and are built with   very low levels of optimizations.
        Serious production users of   gevent on 64-bit ARM systems are encouraged
        to build their own   binary wheels.   Beginning with gevent 22.10.0, ppc64le
        binaries are distributed on   PyPI. The same caveats apply as for 64-bit ARM
        binaries. Using them   for anything other than local development is discouraged.   Beginning
        with gevent 23, muslinux aarch64 and S390X binaries   are distributed on PyPI.
        The same caveats apply as for 64-bit ARM   binaries. Using them for anything
        other than local development is   discouraged.Installing From Source----------------------If
        you are unable to use the binary wheels (for platforms where nopre-built wheels
        are available or if wheel installation is disabled),you can build gevent from
        source. A normal ``pip install`` willfall back to doing this if no binary
        wheel is available. See`Installing From Source`_ for more, including common
        installation issues.Extra Dependencies==================There are a numberof
        additional libraries that extend gevent''s functionality and will beused if
        they are available. All of these may be installed using`setuptools extras<https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies>`_,as
        named below, e.g., ``pip install gevent[events]``.events    In versions of
        gevent up to and including 20.5.0, this provided configurable    event support
        using `zope.event    <https://pypi.org/project/zope.event>`_ and was highly    recommended.    In
        versions after that, this extra is empty and does nothing. It    will be removed
        in gevent 21.0.dnspython    Enables a pure-Python resolver, backed by `dnspython    <https://pypi.org/project/dnspython>`_.
        On Python 2, this also    includes `idna <https://pypi.org/project/idna>`_.
        They can be    installed with the ``dnspython`` extra.    .. note:: This is
        not compatible with Python 3.10+ or dnspython 2.monitor    Enhancements to
        gevent''s self-monitoring capabilities. This    includes the `psutil <https://pypi.org/project/psutil>`_
        library    which is needed to monitor memory usage. (Note that this may not    build
        on all platforms.)recommended    A shortcut for installing suggested extras
        together. This includes    the non-test extras defined here, plus additions
        that improve    gevent''s operation on certain platforms (for example, in
        the past,    it has included backports of newer APIs).test    Everything needed
        to run the complete gevent test suite... _`pip`: https://pip.pypa.io/en/stable/installing/..
        _`wheels`: http://pythonwheels.com.. _`gevent 1.5`: whatsnew_1_5.html.. _`Installing
        From Source`: https://www.gevent.org/development/installing_from_source.html..
        _`cffi`: https://cffi.readthedocs.io.. _`limitations in libev`: http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#WIN32_PLATFORM_LIMITATIONS_AND_WORKA..
        _bug tracker: https://github.com/gevent/gevent/issues.. _mailing list: http://groups.google.com/group/gevent..
        _blog: https://dev.nextthought.com/blog/categories/gevent.html.. _twitter
        (@gevent): http://twitter.com/gevent'
      Package: gevent
      Source: pip
      Version: 24.2.1
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - CC-BY-4.0
      - FSFAP
      - FSFUL
      - FSFULLR
      - GPL-2.0-or-later
      - GPL-2.0-with-autoconf-exception
      - GPL-2.0-with-libtool-exception
      - GPL-3.0-or-later
      - ISC
      - LGPL-2.1-or-later
      - MIT
      - PSF-2.0
      - WTFPL
      - X11
      - gpl-3.0-plus WITH autoconf-macro-exception
      - gpl-3.0-plus WITH autoconf-simple-exception
      - gpl-3.0-plus WITH libtool-exception-2.0
      - mit-old-style
      - mit-old-style-no-advert
      Title: gevent
      DownloadURL: https://files.pythonhosted.org/packages/27/24/a3a7b713acfcf1177207f49ec25c665123f8972f42bee641bcc9f32961f4/gevent-24.2.1.tar.gz
  bazaar:
    register: 'no'
    prim: 24/CAX1057438
    community_link: https://github.com/gevent/gevent
    community_name: https://github.com/gevent/gevent
    community_url: https://github.com/gevent/gevent
    component_comment: ''
    component_highlevel_description: Coroutine-based concurrency library for Python
    component_name: gevent
    component_platform: linux
    component_programing_language: Python
    component_version: 24.2.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/gevent/gevent/archive/24.2.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080623&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: gevent
    target_sw: linux
    vendor: pip
    version: 24.2.1
    web_url: http://www.gevent.org/
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - CC-BY-4.0
  - FSFAP
  - FSFUL
  - FSFULLR
  - GPL-2.0-or-later
  - GPL-2.0-with-autoconf-exception
  - GPL-2.0-with-libtool-exception
  - GPL-3.0-or-later
  - ISC
  - LGPL-2.1-or-later
  - MIT
  - PSF-2.0
  - WTFPL
  - X11
  - gpl-3.0-plus WITH autoconf-macro-exception
  - gpl-3.0-plus WITH autoconf-simple-exception
  - gpl-3.0-plus WITH libtool-exception-2.0
  - mit-old-style
  - mit-old-style-no-advert
  name: gevent
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 24.2.1
  mimer:
    linking: Static
    product_number: CAX1057438
    product_version_label: 24.2.1
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: geventhttpclient+2.0.2
  additional_info:
    fossa-attribution:
      Description: A high performance, concurrent HTTP client library for python using
        gevent.gevent.httplib support was removed in gevent 1.0, geventhttpclient
        nowprovides that missing functionality.geventhttpclient uses a fast http parser,
        written in C, originating fromnginx, extracted and modified by Joyent.geventhttpclient
        has been specifically designed for high concurrency,streaming and support
        HTTP 1.1 persistent connections. More generally it isdesigned for efficiently
        pulling from REST APIs and streaming APIslike Twitter's.Safe SSL support is
        provided by default. geventhttpclient depends onthe certifi CA Bundle. This
        is the same CA Bundle which ships with theRequests codebase, and is derived
        from Mozilla Firefox's canonical set.As of 1.5, only Python 3.6+ is fully
        supported (with prebuilt wheels), but Python 2.7 and 3.5 *should* work too.Use
        of SSL/TLS with python 2.7.9 is not recommended and may be broken.
      Package: geventhttpclient
      Source: pip
      Version: 2.0.2
      Hash: ''
      licenses:
      - MIT
      Title: geventhttpclient
      DownloadURL: https://files.pythonhosted.org/packages/68/98/1ee9fbab4ae97d5f0f05035059a56a61a9c966331e6c837f974b402fdf63/geventhttpclient-2.0.2.tar.gz
  bazaar:
    register: 'no'
    prim: 5/CTX1027332
    community_link: https://github.com/gwik/geventhttpclient
    community_name: https://github.com/gwik/geventhttpclient
    community_url: https://github.com/gwik/geventhttpclient
    component_comment: ''
    component_highlevel_description: A high performance, concurrent http client library
      for python with gevent
    component_name: geventhttpclient
    component_platform: linux
    component_programing_language: Python
    component_version: 2.0.2
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/gwik/geventhttpclient/archive/2.0.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low Community Activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1067186&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: France
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: geventhttpclient
    target_sw: linux
    vendor: pip
    version: 2.0.2
    web_url: http://github.com/gwik/geventhttpclient
  licenses:
  - MIT
  name: geventhttpclient
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2.0.2
  mimer:
    linking: Static
    product_number: CTX1027332
    product_version_label: 2.0.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: googleapis-common-protos+1.62.0
  additional_info:
    fossa-attribution:
      Description: 'Google APIs common protos-------------------------.. image:: https://img.shields.io/pypi/v/googleapis-common-protos.svg    :target:
        https://pypi.org/project/googleapis-common-protos/googleapis-common-protos
        contains the python classes generated from the commonprotos in the `googleapis/googleapis
        <https://github.com/googleapis/googleapis>`_ repository.'
      Package: googleapis-common-protos
      Source: pip
      Version: 1.62.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: googleapis-common-protos
      DownloadURL: https://files.pythonhosted.org/packages/4a/5f/eb12d721b45d20a977289d674e179995a0ddab1684d2c61b29a63d43a5f1/googleapis-common-protos-1.62.0.tar.gz
  bazaar:
    register: 'no'
    prim: 11/CTX1030911
    community_link: https://pypi.org/project/googleapis-common-protos/
    community_name: https://pypi.org/project/googleapis-common-protos/
    community_url: https://pypi.org/project/googleapis-common-protos/
    component_comment: ''
    component_highlevel_description: Common protobufs used in Google APIs
    component_name: googleapis-common-protos
    component_platform: linux
    component_programing_language: Python
    component_version: 1.62.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://files.pythonhosted.org/packages/4a/5f/eb12d721b45d20a977289d674e179995a0ddab1684d2c61b29a63d43a5f1/googleapis-common-protos-1.62.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1078545&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: googleapis-common-protos
    target_sw: linux
    vendor: pip
    version: 1.62.0
    web_url: https://github.com/googleapis/python-api-common-protos
  licenses:
  - Apache-2.0
  name: googleapis-common-protos
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.62.0
  mimer:
    linking: Static
    product_number: CTX1030911
    product_version_label: 1.62.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: greenlet+3.0.3
  additional_info:
    fossa-attribution:
      Description: '.. This file is included into docs/history.rstGreenlets are lightweight
        coroutines for in-process concurrentprogramming.The "greenlet" package is
        a spin-off of `Stackless`_, a version ofCPython that supports micro-threads
        called "tasklets". Tasklets runpseudo-concurrently (typically in a single
        or a few OS-level threads)and are synchronized with data exchanges on "channels".A
        "greenlet", on the other hand, is a still more primitive notion ofmicro-thread
        with no implicit scheduling; coroutines, in other words.This is useful when
        you want to control exactly when your code runs.You can build custom scheduled
        micro-threads on top of greenlet;however, it seems that greenlets are useful
        on their own as a way tomake advanced control flow structures. For example,
        we can recreategenerators; the difference with Python''s own generators is
        that ourgenerators can call nested functions and the nested functions canyield
        values too. (Additionally, you don''t need a "yield" keyword. Seethe example
        in `test_generator.py<https://github.com/python-greenlet/greenlet/blob/adca19bf1f287b3395896a8f41f3f4fd1797fdc7/src/greenlet/tests/test_generator.py#L1>`_).Greenlets
        are provided as a C extension module for the regular unmodifiedinterpreter...
        _`Stackless`: http://www.stackless.comWho is using Greenlet?======================There
        are several libraries that use Greenlet as a more flexiblealternative to Python''s
        built in coroutine support: - `Concurrence`_ - `Eventlet`_ - `Gevent`_.. _Concurrence:
        http://opensource.hyves.org/concurrence/.. _Eventlet: http://eventlet.net/..
        _Gevent: http://www.gevent.org/Getting Greenlet================The easiest
        way to get Greenlet is to install it with pip::  pip install greenletSource
        code archives and binary distributions are available on thepython package
        index at https://pypi.org/project/greenletThe source code repository is hosted
        on github:https://github.com/python-greenlet/greenletDocumentation is available
        on readthedocs.org:https://greenlet.readthedocs.io'
      Package: greenlet
      Source: pip
      Version: 3.0.3
      Hash: ''
      licenses:
      - MIT
      - PSF-2.0
      Title: greenlet
      DownloadURL: https://files.pythonhosted.org/packages/17/14/3bddb1298b9a6786539ac609ba4b7c9c0842e12aa73aaa4d8d73ec8f8185/greenlet-3.0.3.tar.gz
  bazaar:
    register: 'no'
    prim: 25/CAX1056535
    community_link: https://github.com/python-greenlet/greenlet
    community_name: https://github.com/python-greenlet/greenlet
    community_url: https://github.com/python-greenlet/greenlet
    component_comment: ''
    component_highlevel_description: The greenlet package is a spin-off of Stackless,
      a version of CPython that supports micro-threads called "tasklets".Greenlets
      are lightweight coroutines for in-process concurrent programming.
    component_name: greenlet
    component_platform: linux
    component_programing_language: C++
    component_version: 3.0.3
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/python-greenlet/greenlet/archive/3.0.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1075931&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: C++
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: greenlet
    target_sw: linux
    vendor: pip
    version: 3.0.3
    web_url: https://greenlet.readthedocs.io/
  licenses:
  - MIT
  - PSF-2.0
  name: greenlet
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 3.0.3
  mimer:
    linking: Static
    product_number: CAX1056535
    product_version_label: 3.0.3
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: grpcio+1.62.0
  additional_info:
    fossa-attribution:
      Description: 'gRPC Python===========|compat_check_pypi|Package for gRPC Python...
        |compat_check_pypi| image:: https://python-compatibility-tools.appspot.com/one_badge_image?package=grpcio   :target:
        https://python-compatibility-tools.appspot.com/one_badge_target?package=grpcioSupported
        Python Versions-------------------------Python >= 3.8Installation------------gRPC
        Python is available for Linux, macOS, and Windows.Installing From PyPI~~~~~~~~~~~~~~~~~~~~If
        you are installing locally...::  $ pip install grpcioElse system wide (on
        Ubuntu)...::  $ sudo pip install grpcioIf you''re on Windows make sure that
        you installed the :code:`pip.exe` componentwhen you installed Python (if not
        go back and install it!) then invoke:::  $ pip.exe install grpcioWindows users
        may need to invoke :code:`pip.exe` from a command line ran asadministrator.n.b.
        On Windows and on Mac OS X one *must* have a recent release of :code:`pip`to
        retrieve the proper wheel from PyPI. Be sure to upgrade to the latestversion!Installing
        From Source~~~~~~~~~~~~~~~~~~~~~~Building from source requires that you have
        the Python headers (usually apackage named :code:`python-dev`).::  $ export
        REPO_ROOT=grpc  # REPO_ROOT can be any directory of your choice  $ git clone
        -b RELEASE_TAG_HERE https://github.com/grpc/grpc $REPO_ROOT  $ cd $REPO_ROOT  $
        git submodule update --init  # For the next two commands do `sudo pip install`
        if you get permission-denied errors  $ pip install -r requirements.txt  $
        GRPC_PYTHON_BUILD_WITH_CYTHON=1 pip install .You cannot currently install
        Python from source on Windows. Things might workout for you in MSYS2 (follow
        the Linux instructions), but it isn''t officiallysupported at the moment.Troubleshooting~~~~~~~~~~~~~~~Help,
        I ...* **... see the following error on some platforms**  ::    /tmp/pip-build-U8pSsr/cython/Cython/Plex/Scanners.c:4:20:
        fatal error: Python.h: No such file or directory    #include "Python.h"                    ^    compilation
        terminated.  You can fix it by installing `python-dev` package. i.e  ::    sudo
        apt-get install python-dev'
      Package: grpcio
      Source: pip
      Version: 1.62.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - GPL-1.0-or-later
      - GPL-2.0-only
      - ISC
      - Info-ZIP
      - MIT
      - MPL-2.0
      - OpenSSL
      - Zlib
      - apache-2.0 WITH llvm-exception
      - mit-old-style
      - mit-old-style-no-advert
      - openssl-nokia-psk-contribution
      - openssl-ssleay
      Title: grpcio
      DownloadURL: https://files.pythonhosted.org/packages/50/4e/7ed8c24c93c8d000b9ea2927f555ae3b03cfabe035d65eda0db848cb20b6/grpcio-1.62.0.tar.gz
  bazaar:
    register: 'yes'
    prim: SCAS-642775
    community_link: https://github.com/grpc/grpc
    community_name: https://github.com/grpc/grpc
    community_url: https://github.com/grpc/grpc
    component_comment: ''
    component_highlevel_description: ''
    component_name: grpc
    component_platform: linux
    component_programing_language: ''
    component_version: 1.62.0
    licenses: []
    src_download_link: https://github.com/grpc/grpc/archive/refs/tags/v1.62.0.tar.gz
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: grpcio
    target_sw: linux
    vendor: pip
    version: 1.62.0
    web_url: https://grpc.io
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - GPL-1.0-or-later
  - GPL-2.0-only
  - ISC
  - Info-ZIP
  - MIT
  - MPL-2.0
  - OpenSSL
  - Zlib
  - apache-2.0 WITH llvm-exception
  - mit-old-style
  - mit-old-style-no-advert
  - openssl-nokia-psk-contribution
  - openssl-ssleay
  name: grpcio
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.62.0
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 1.62.0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: h11+0.14.0
  additional_info:
    fossa-attribution:
      Description: 'h11===.. image:: https://travis-ci.org/python-hyper/h11.svg?branch=master   :target:
        https://travis-ci.org/python-hyper/h11   :alt: Automated test status.. image::
        https://codecov.io/gh/python-hyper/h11/branch/master/graph/badge.svg   :target:
        https://codecov.io/gh/python-hyper/h11   :alt: Test coverage.. image:: https://readthedocs.org/projects/h11/badge/?version=latest   :target:
        http://h11.readthedocs.io/en/latest/?badge=latest   :alt: Documentation StatusThis
        is a little HTTP/1.1 library written from scratch in Python,heavily inspired
        by `hyper-h2 <https://hyper-h2.readthedocs.io/>`_.It''s a "bring-your-own-I/O"
        library; h11 contains no IO codewhatsoever. This means you can hook h11 up
        to your favorite networkAPI, and that could be anything you want: synchronous,
        threaded,asynchronous, or your own implementation of `RFC 6214<https://tools.ietf.org/html/rfc6214>`_
        -- h11 won''t judge you.(Compare this to the current state of the art, where
        every time a `newnetwork API <https://trio.readthedocs.io/>`_ comes along
        then someonegets to start over reimplementing the entire HTTP protocol fromscratch.)
        Cory Benfield made an `excellent blog post describing thebenefits of this
        approach<https://lukasa.co.uk/2015/10/The_New_Hyper/>`_, or if you like videothen
        here''s his `PyCon 2016 talk on the same theme<https://www.youtube.com/watch?v=7cC3_jGwl_U>`_.This
        also means that h11 is not immediately useful out of the box:it''s a toolkit
        for building programs that speak HTTP, not somethingthat could directly replace
        ``requests`` or ``twisted.web`` orwhatever. But h11 makes it much easier to
        implement something like``requests`` or ``twisted.web``.At a high level, working
        with h11 goes like this:1) First, create an ``h11.Connection`` object to track
        the state of a   single HTTP/1.1 connection.2) When you read data off the
        network, pass it to   ``conn.receive_data(...)``; you''ll get back a list
        of objects   representing high-level HTTP "events".3) When you want to send
        a high-level HTTP event, create the   corresponding "event" object and pass
        it to ``conn.send(...)``;   this will give you back some bytes that you can
        then push out   through the network.For example, a client might instantiate
        and then send a``h11.Request`` object, then zero or more ``h11.Data`` objects
        for therequest body (e.g., if this is a POST), and then a``h11.EndOfMessage``
        to indicate the end of the message. Then theserver would then send back a
        ``h11.Response``, some ``h11.Data``, andits own ``h11.EndOfMessage``. If either
        side violates the protocol,you''ll get a ``h11.ProtocolError`` exception.h11
        is suitable for implementing both servers and clients, and has apleasantly
        symmetric API: the events you send as a client are exactlythe ones that you
        receive as a server and vice-versa.`Here''s an example of a tiny HTTP client<https://github.com/python-hyper/h11/blob/master/examples/basic-client.py>`_It
        also has `a fine manual <https://h11.readthedocs.io/>`_.FAQ---*Whyyyyy?*I
        wanted to play with HTTP in `Curio<https://curio.readthedocs.io/en/latest/tutorial.html>`__
        and `Trio<https://trio.readthedocs.io>`__, which at the time didn''t have
        anyHTTP libraries. So I thought, no big deal, Python has, like, a dozendifferent
        implementations of HTTP, surely I can find one that''sreusable. I didn''t
        find one, but I did find Cory''s call-to-armsblog-post. So I figured, well,
        fine, if I have to implement HTTP fromscratch, at least I can make sure no-one
        *else* has to ever again.*Should I use it?*Maybe. You should be aware that
        it''s a very young project. But, it''sfeature complete and has an exhaustive
        test-suite and complete docs,so the next step is for people to try using it
        and see how it goes:-). If you do then please let us know -- if nothing else
        we''ll wantto talk to you before making any incompatible changes!*What are
        the features/limitations?*Roughly speaking, it''s trying to be a robust, complete,
        and non-hackyimplementation of the first "chapter" of the HTTP/1.1 spec: `RFC
        7230:HTTP/1.1 Message Syntax and Routing<https://tools.ietf.org/html/rfc7230>`_.
        That is, it mostly focuses onimplementing HTTP at the level of taking bytes
        on and off the wire,and the headers related to that, and tries to be anal
        about specconformance. It doesn''t know about higher-level concerns like URLrouting,
        conditional GETs, cross-origin cookie policies, or contentnegotiation. But
        it does know how to take care of framing,cross-version differences in keep-alive
        handling, and the "obsoleteline folding" rule, so you can focus your energies
        on the hard /interesting parts for your application, and it tries to support
        thefull specification in the sense that any useful HTTP/1.1 conformantapplication
        should be able to use h11.It''s pure Python, and has no dependencies outside
        of the standardlibrary.It has a test suite with 100.0% coverage for both statements
        andbranches.Currently it supports Python 3 (testing on 3.7-3.10) and PyPy
        3.The last Python 2-compatible version was h11 0.11.x.(Originally it had a
        Cython wrapper for `http-parser<https://github.com/nodejs/http-parser>`_ and
        a beautiful nested statemachine implemented with ``yield from`` to postprocess
        the output. ButI had to take these out -- the new *parser* needs fewer lines-of-codethan
        the old *parser wrapper*, is written in pure Python, uses noexotic language
        syntax, and has more features. It''s sad, really; thatold state machine was
        really slick. I just need a few sentences hereto mourn that.)I don''t know
        how fast it is. I haven''t benchmarked or profiled it yet,so it''s probably
        got a few pointless hot spots, and I''ve been tryingto err on the side of
        simplicity and robustness instead ofmicro-optimization. But at the architectural
        level I tried hard toavoid fundamentally bad decisions, e.g., I believe that
        all theparsing algorithms remain linear-time even in the face of pathologicalinput
        like slowloris, and there are no byte-by-byte loops. (I alsobelieve that it
        maintains bounded memory usage in the face ofarbitrary/pathological input.)The
        whole library is ~800 lines-of-code. You can read and understandthe whole
        thing in less than an hour. Most of the energy invested inthis so far has
        been spent on trying to keep things simple byminimizing special-cases and
        ad hoc state manipulation; even though itis now quite small and simple, I''m
        still annoyed that I haven''tfigured out how to make it even smaller and simpler.
        (Unfortunately,HTTP does not lend itself to simplicity.)The API is ~feature
        complete and I don''t expect the general outlinesto change much, but you can''t
        judge an API''s ergonomics until youactually document and use it, so I''d
        expect some changes in thedetails.*How do I try it?*.. code-block:: sh  $
        pip install h11  $ git clone git@github.com:python-hyper/h11  $ cd h11/examples  $
        python basic-client.pyand go from there.*License?*MIT*Code of conduct?*Contributors
        are requested to follow our `code of conduct<https://github.com/python-hyper/h11/blob/master/CODE_OF_CONDUCT.md>`_
        inall project spaces.'
      Package: h11
      Source: pip
      Version: 0.14.0
      Hash: ''
      licenses:
      - BSD-3-Clause
      - MIT
      Title: h11
      DownloadURL: https://files.pythonhosted.org/packages/f5/38/3af3d3633a34a3316095b39c8e8fb4853a28a536e55d347bd8d8e9a14b03/h11-0.14.0.tar.gz
  bazaar:
    register: 'no'
    prim: 3/CTX1031576
    community_link: https://github.com/python-hyper/h11
    community_name: https://github.com/python-hyper/h11
    community_url: https://github.com/python-hyper/h11
    component_comment: ''
    component_highlevel_description: This is a little HTTP/1.1 library written from
      scratch in Python, heavily inspired by hyper-h2.
    component_name: h11
    component_platform: linux
    component_programing_language: Python
    component_version: 0.14.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/python-hyper/h11/archive/v0.14.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1028078&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: h11
    target_sw: linux
    vendor: pip
    version: 0.14.0
    web_url: https://github.com/python-hyper/h11
  licenses:
  - BSD-3-Clause
  - MIT
  name: h11
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.14.0
  mimer:
    linking: Static
    product_number: CTX1031576
    product_version_label: v0.14.0
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: idna+3.6
  additional_info:
    fossa-attribution:
      Description: "Internationalized Domain Names in Applications (IDNA)=====================================================Support
        for the Internationalized Domain Names inApplications (IDNA) protocol as specified
        in `RFC 5891<https://tools.ietf.org/html/rfc5891>`_. This is the latest version
        ofthe protocol and is sometimes referred to as \u201CIDNA 2008\u201D.This
        library also provides support for Unicode TechnicalStandard 46, `Unicode IDNA
        Compatibility Processing<https://unicode.org/reports/tr46/>`_.This acts as
        a suitable replacement for the \u201Cencodings.idna\u201Dmodule that comes
        with the Python standard library, but whichonly supports the older superseded
        IDNA specification (`RFC 3490<https://tools.ietf.org/html/rfc3490>`_).Basic
        functions are simply executed:.. code-block:: pycon    >>> import idna    >>>
        idna.encode('\u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8')    b'xn--eckwd4c7c.xn--zckzah'
        \   >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))    \u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8Installation------------This
        package is available for installation from PyPI:.. code-block:: bash    $
        python3 -m pip install idnaUsage-----For typical usage, the ``encode`` and
        ``decode`` functions will take adomain name argument and perform a conversion
        to A-labels or U-labelsrespectively... code-block:: pycon    >>> import idna
        \   >>> idna.encode('\u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8')    b'xn--eckwd4c7c.xn--zckzah'
        \   >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))    \u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8You
        may use the codec encoding and decoding methods using the``idna.codec`` module:..
        code-block:: pycon    >>> import idna.codec    >>> print('\u0434\u043E\u043C\u0435\u043D.\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435'.encode('idna2008'))
        \   b'xn--d1acufc.xn--80akhbyknj4f'    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna2008'))
        \   \u0434\u043E\u043C\u0435\u043D.\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435Conversions
        can be applied at a per-label basis using the ``ulabel`` or``alabel`` functions
        if necessary:.. code-block:: pycon    >>> idna.alabel('\u6D4B\u8BD5')    b'xn--0zwm56d'Compatibility
        Mapping (UTS #46)+++++++++++++++++++++++++++++++As described in `RFC 5895
        <https://tools.ietf.org/html/rfc5895>`_, theIDNA specification does not normalize
        input from different potentialways a user may input a domain name. This functionality,
        known asa \u201Cmapping\u201D, is considered by the specification to be a
        localuser-interface issue distinct from IDNA conversion functionality.This
        library provides one such mapping that was developed by theUnicode Consortium.
        Known as `Unicode IDNA Compatibility Processing<https://unicode.org/reports/tr46/>`_,
        it provides for both a regularmapping for typical applications, as well as
        a transitional mapping tohelp migrate from older IDNA 2003 applications.For
        example, \u201CK\xF6nigsg\xE4\xDFchen\u201D is not a permissible label as
        *LATINCAPITAL LETTER K* is not allowed (nor are capital letters in general).UTS
        46 will convert this into lower case prior to applying the IDNAconversion...
        code-block:: pycon    >>> import idna    >>> idna.encode('K\xF6nigsg\xE4\xDFchen')
        \   ...    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'K\xF6nigsg\xE4\xDFchen'
        not allowed    >>> idna.encode('K\xF6nigsg\xE4\xDFchen', uts46=True)    b'xn--knigsgchen-b4a3dun'
        \   >>> print(idna.decode('xn--knigsgchen-b4a3dun'))    k\xF6nigsg\xE4\xDFchenTransitional
        processing provides conversions to help transition fromthe older 2003 standard
        to the current standard. For example, in theoriginal IDNA specification, the
        *LATIN SMALL LETTER SHARP S* (\xDF) wasconverted into two *LATIN SMALL LETTER
        S* (ss), whereas in the currentIDNA specification this conversion is not performed...
        code-block:: pycon    >>> idna.encode('K\xF6nigsg\xE4\xDFchen', uts46=True,
        transitional=True)    'xn--knigsgsschen-lcb0w'Implementers should use transitional
        processing with caution, only inrare cases where conversion from legacy labels
        to current labels must beperformed (i.e. IDNA implementations that pre-date
        2008). For typicalapplications that just need to convert labels, transitional
        processingis unlikely to be beneficial and could produce unexpected incompatibleresults.``encodings.idna``
        Compatibility++++++++++++++++++++++++++++++++Function calls from the Python
        built-in ``encodings.idna`` module aremapped to their IDNA 2008 equivalents
        using the ``idna.compat`` module.Simply substitute the ``import`` clause in
        your code to refer to the newmodule name.Exceptions----------All errors raised
        during the conversion following the specificationshould raise an exception
        derived from the ``idna.IDNAError`` baseclass.More specific exceptions that
        may be generated as ``idna.IDNABidiError``when the error reflects an illegal
        combination of left-to-right andright-to-left characters in a label; ``idna.InvalidCodepoint``
        whena specific codepoint is an illegal character in an IDN label (i.e.INVALID);
        and ``idna.InvalidCodepointContext`` when the codepoint isillegal based on
        its positional context (i.e. it is CONTEXTO or CONTEXTJbut the contextual
        requirements are not satisfied.)Building and Diagnostics------------------------The
        IDNA and UTS 46 functionality relies upon pre-calculated lookuptables for
        performance. These tables are derived from computing againsteligibility criteria
        in the respective standards. These tables arecomputed using the command-line
        script ``tools/idna-data``.This tool will fetch relevant codepoint data from
        the Unicode repositoryand perform the required calculations to identify eligibility.
        There arethree main modes:* ``idna-data make-libdata``. Generates ``idnadata.py``
        and  ``uts46data.py``, the pre-calculated lookup tables used for IDNA and
        \ UTS 46 conversions. Implementers who wish to track this library against
        \ a different Unicode version may use this tool to manually generate a  different
        version of the ``idnadata.py`` and ``uts46data.py`` files.* ``idna-data make-table``.
        Generate a table of the IDNA disposition  (e.g. PVALID, CONTEXTJ, CONTEXTO)
        in the format found in Appendix  B.1 of RFC 5892 and the pre-computed tables
        published by `IANA  <https://www.iana.org/>`_.* ``idna-data U+0061``. Prints
        debugging output on the various  properties associated with an individual
        Unicode codepoint (in this  case, U+0061), that are used to assess the IDNA
        and UTS 46 status of a  codepoint. This is helpful in debugging or analysis.The
        tool accepts a number of arguments, described using ``idna-data-h``. Most
        notably, the ``--version`` argument allows the specificationof the version
        of Unicode to be used in computing the table data. Forexample, ``idna-data
        --version 9.0.0 make-libdata`` will generatelibrary data against Unicode 9.0.0.Additional
        Notes----------------* **Packages**. The latest tagged release version is
        published in the  `Python Package Index <https://pypi.org/project/idna/>`_.*
        **Version support**. This library supports Python 3.5 and higher.  As this
        library serves as a low-level toolkit for a variety of  applications, many
        of which strive for broad compatibility with older  Python versions, there
        is no rush to remove older interpreter support.  Removing support for older
        versions should be well justified in that the  maintenance burden has become
        too high.* **Python 2**. Python 2 is supported by version 2.x of this library.
        \ While active development of the version 2.x series has ended, notable  issues
        being corrected may be backported to 2.x. Use \"idna<3\" in your  requirements
        file if you need this library for a Python 2 application.* **Testing**. The
        library has a test suite based on each rule of the  IDNA specification, as
        well as tests that are provided as part of the  Unicode Technical Standard
        46, `Unicode IDNA Compatibility Processing  <https://unicode.org/reports/tr46/>`_.*
        **Emoji**. It is an occasional request to support emoji domains in  this library.
        Encoding of symbols like emoji is expressly prohibited by  the technical standard
        IDNA 2008 and emoji domains are broadly phased  out across the domain industry
        due to associated security risks. For  now, applications that need to support
        these non-compliant labels  may wish to consider trying the encode/decode
        operation in this library  first, and then falling back to using `encodings.idna`.
        See `the Github  project <https://github.com/kjd/idna/issues/18>`_ for more
        discussion."
      Package: idna
      Source: pip
      Version: '3.6'
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: idna
      DownloadURL: https://files.pythonhosted.org/packages/bf/3f/ea4b9117521a1e9c50344b909be7886dd00a519552724809bb1f486986c2/idna-3.6.tar.gz
  bazaar:
    register: 'no'
    prim: 14/CAX1058316
    community_link: https://github.com/kjd/idna
    community_name: https://github.com/kjd/idna
    community_url: https://github.com/kjd/idna
    component_comment: ''
    component_highlevel_description: Internationalized Domain Names for Python (IDNA
      2008 and UTS 46)
    component_name: idna
    component_platform: linux
    component_programing_language: Python
    component_version: V3.6
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/kjd/idna/archive/v3.6.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1072146&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: idna
    target_sw: linux
    vendor: pip
    version: '3.6'
    web_url: https://pypi.org/project/idna/3.7/
  licenses:
  - BSD-3-Clause
  name: idna
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '3.6'
  mimer:
    linking: Static
    product_number: CAX1058316
    product_version_label: V3.6
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: importlib-metadata+6.11.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/importlib_metadata.svg   :target:
        https://pypi.org/project/importlib_metadata.. image:: https://img.shields.io/pypi/pyversions/importlib_metadata.svg..
        image:: https://github.com/python/importlib_metadata/actions/workflows/main.yml/badge.svg   :target:
        https://github.com/python/importlib_metadata/actions?query=workflow%3A%22tests%22   :alt:
        tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target:
        https://github.com/astral-sh/ruff    :alt: Ruff.. image:: https://readthedocs.org/projects/importlib-metadata/badge/?version=latest   :target:
        https://importlib-metadata.readthedocs.io/en/latest/?badge=latest.. image::
        https://img.shields.io/badge/skeleton-2024-informational   :target: https://blog.jaraco.com/skeleton..
        image:: https://tidelift.com/badges/package/pypi/importlib-metadata   :target:
        https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=readmeLibrary
        to access the metadata for a Python package.This package supplies third-party
        access to the functionality of`importlib.metadata <https://docs.python.org/3/library/importlib.metadata.html>`_including
        improvements added to subsequent Python versions.Compatibility=============New
        features are introduced in this third-party library and later mergedinto CPython.
        The following table indicates which versions of this librarywere contributed
        to different versions in the standard library:.. list-table::   :header-rows:
        1   * - importlib_metadata     - stdlib   * - 7.0     - 3.13   * - 6.5     -
        3.12   * - 4.13     - 3.11   * - 4.6     - 3.10   * - 1.4     - 3.8Usage=====See
        the `online documentation <https://importlib-metadata.readthedocs.io/>`_for
        usage details.`Finder authors<https://docs.python.org/3/reference/import.html#finders-and-loaders>`_
        canalso add support for custom package installers.  See the above documentationfor
        details.Caveats=======This project primarily supports third-party packages
        installed by PyPAtools (or other conforming packages). It does not support:-
        Packages in the stdlib.- Packages installed without metadata.Project details===============
        * Project home: https://github.com/python/importlib_metadata * Report bugs
        at: https://github.com/python/importlib_metadata/issues * Code hosting: https://github.com/python/importlib_metadata
        * Documentation: https://importlib-metadata.readthedocs.io/For Enterprise==============Available
        as part of the Tidelift Subscription.This project and the maintainers of thousands
        of other packages are working with Tidelift to deliver one enterprise subscription
        that covers all of the open source you use.`Learn more <https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=referral&utm_campaign=github>`_.'
      Package: importlib-metadata
      Source: pip
      Version: 6.11.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: importlib-metadata
      DownloadURL: https://files.pythonhosted.org/packages/ee/eb/58c2ab27ee628ad801f56d4017fe62afab0293116f6d0b08f1d5bd46e06f/importlib_metadata-6.11.0.tar.gz
  bazaar:
    register: 'no'
    prim: 56/CTX1026316
    community_link: https://github.com/python/importlib_metadata
    community_name: https://github.com/python/importlib_metadata
    community_url: https://github.com/python/importlib_metadata
    component_comment: ''
    component_highlevel_description: Backport of the importlib.metadata module
    component_name: importlib_metadata
    component_platform: linux
    component_programing_language: Python
    component_version: V6.11.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/python/importlib_metadata/archive/v6.11.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1076002&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: importlib-metadata
    target_sw: linux
    vendor: pip
    version: 6.11.0
    web_url: https://github.com/python/importlib_metadata
  licenses:
  - Apache-2.0
  name: importlib-metadata
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 6.11.0
  mimer:
    linking: Static
    product_number: CTX1026316
    product_version_label: V6.11.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: importlib-resources+5.13.0
  additional_info:
    fossa-attribution:
      Description: The fossa information is fetched from  FOSSA service. Don't Edit!
      Package: importlib-resources
      Source: pip
      Version: 5.13.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: importlib-resources
      DownloadURL: https://files.pythonhosted.org/packages/a5/f1/8711c49ffd121083007a24c1bff0d324c9ff621d4fdf8b4ffcb8d9e60330/importlib_resources-5.13.0.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1040609
    community_link: https://github.com/python/importlib_resources
    community_name: https://github.com/python/importlib_resources
    community_url: https://github.com/python/importlib_resources
    component_comment: ''
    component_highlevel_description: Backport of the importlib.resources module
    component_name: importlib_resources
    component_platform: linux
    component_programing_language: Python
    component_version: V5.13.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/python/importlib_resources/archive/v5.13.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1089128&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: importlib-resources
    target_sw: linux
    vendor: pip
    version: 5.13.0
    web_url: ''
  licenses:
  - Apache-2.0
  name: importlib-resources
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 5.13.0
  mimer:
    linking: Static
    product_number: CTX1040609
    product_version_label: V5.13.0
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: mlserver+1.5.0
  additional_info:
    fossa-attribution:
      Description: "# MLServerAn open source inference server for your machine learning
        models.[![video_play_icon](https://user-images.githubusercontent.com/10466106/151803854-75d17c32-541c-4eee-b589-d45b07ea486d.png)](https://www.youtube.com/watch?v=aZHe3z-8C_w)##
        OverviewMLServer aims to provide an easy way to start serving your machine
        learningmodels through a REST and gRPC interface, fully compliant with [KFServing's
        V2Dataplane](https://docs.seldon.io/projects/seldon-core/en/latest/reference/apis/v2-protocol.html)spec.
        Watch a quick video introducing the project [here](https://www.youtube.com/watch?v=aZHe3z-8C_w).-
        Multi-model serving, letting users run multiple models within the same  process.-
        Ability to run [inference in parallel for vertical  scaling](https://mlserver.readthedocs.io/en/latest/user-guide/parallel-inference.html)
        \ across multiple models through a pool of inference workers.- Support for
        [adaptive  batching](https://mlserver.readthedocs.io/en/latest/user-guide/adaptive-batching.html),
        \ to group inference requests together on the fly.- Scalability with deployment
        in Kubernetes native frameworks, including  [Seldon Core](https://docs.seldon.io/projects/seldon-core/en/latest/graph/protocols.html#v2-kfserving-protocol)
        and  [KServe (formerly known as KFServing)](https://kserve.github.io/website/modelserving/v1beta1/sklearn/v2/),
        where  MLServer is the core Python inference server used to serve machine
        learning  models.- Support for the standard [V2 Inference Protocol](https://docs.seldon.io/projects/seldon-core/en/latest/reference/apis/v2-protocol.html)
        on  both the gRPC and REST flavours, which has been standardised and adopted
        by  various model serving frameworks.You can read more about the goals of
        this project on the [initial designdocument](https://docs.google.com/document/d/1C2uf4SaAtwLTlBCciOhvdiKQ2Eay4U72VxAD4bXe7iU/edit?usp=sharing).##
        UsageYou can install the `mlserver` package running:```bashpip install mlserver```Note
        that to use any of the optional [inference runtimes](#inference-runtimes),you'll
        need to install the relevant package.For example, to serve a `scikit-learn`
        model, you would need to install the`mlserver-sklearn` package:```bashpip
        install mlserver-sklearn```For further information on how to use MLServer,
        you can check any of the[available examples](#examples).## Inference RuntimesInference
        runtimes allow you to define how your model should be used withinMLServer.You
        can think of them as the **backend glue** between MLServer and your machinelearning
        framework of choice.You can read more about [inference runtimes in their documentationpage](./docs/runtimes/index.md).Out
        of the box, MLServer comes with a set of pre-packaged runtimes which letyou
        interact with a subset of common frameworks.This allows you to start serving
        models saved in these frameworks straightaway.However, it's also possible
        to **[write customruntimes](./docs/runtimes/custom.md)**.Out of the box, MLServer
        provides support for:| Framework     | Supported | Documentation                                                    ||
        ------------- | --------- | ----------------------------------------------------------------
        || Scikit-Learn  | \u2705        | [MLServer SKLearn](./runtimes/sklearn)
        \                          || XGBoost       | \u2705        | [MLServer XGBoost](./runtimes/xgboost)
        \                          || Spark MLlib   | \u2705        | [MLServer MLlib](./runtimes/mllib)
        \                              || LightGBM      | \u2705        | [MLServer
        LightGBM](./runtimes/lightgbm)                         || CatBoost      |
        \u2705        | [MLServer CatBoost](./runtimes/catboost)                         ||
        Tempo         | \u2705        | [`github.com/SeldonIO/tempo`](https://github.com/SeldonIO/tempo)
        || MLflow        | \u2705        | [MLServer MLflow](./runtimes/mlflow)                             ||
        Alibi-Detect  | \u2705        | [MLServer Alibi Detect](./runtimes/alibi-detect)
        \                || Alibi-Explain | \u2705        | [MLServer Alibi Explain](./runtimes/alibi-explain)
        \              || HuggingFace   | \u2705        | [MLServer HuggingFace](./runtimes/huggingface)
        \                  |## Supported Python Versions\U0001F534 Unsupported\U0001F7E0
        Deprecated: To be removed in a future version\U0001F7E2 Supported\U0001F535
        Untested| Python Version | Status || -------------- | ------ || 3.7            |
        \U0001F534     || 3.8            | \U0001F534     || 3.9            | \U0001F7E2
        \    || 3.10           | \U0001F7E2     || 3.11           | \U0001F535     ||
        3.12           | \U0001F535     |## ExamplesTo see MLServer in action, check
        out [our full list ofexamples](./docs/examples/index.md).You can find below
        a few selected examples showcasing how you can leverageMLServer to start serving
        your machine learning models.- [Serving a `scikit-learn` model](./docs/examples/sklearn/README.md)-
        [Serving a `xgboost` model](./docs/examples/xgboost/README.md)- [Serving a
        `lightgbm` model](./docs/examples/lightgbm/README.md)- [Serving a `catboost`
        model](./docs/examples/catboost/README.md)- [Serving a `tempo` pipeline](./docs/examples/tempo/README.md)-
        [Serving a custom model](./docs/examples/custom/README.md)- [Serving an `alibi-detect`
        model](./docs/examples/alibi-detect/README.md)- [Serving a `HuggingFace` model](./docs/examples/huggingface/README.md)-
        [Multi-Model Serving with multiple frameworks](./docs/examples/mms/README.md)-
        [Loading / unloading models from a model repository](./docs/examples/model-repository/README.md)##
        Developer Guide### VersioningBoth the main `mlserver` package and the [inference
        runtimespackages](./docs/runtimes/index.md) try to follow the same versioning
        schema.To bump the version across all of them, you can use the[`./hack/update-version.sh`](./hack/update-version.sh)
        script.We generally keep the version as a placeholder for an upcoming version.For
        example:```bash./hack/update-version.sh 0.2.0.dev1```### TestingTo run all
        of the tests for MLServer and the runtimes, use:```bashmake test```To run
        run tests for a single file, use something like:```bashtox -e py3 -- tests/batch_processing/test_rest.py```"
      Package: mlserver
      Source: pip
      Version: 1.5.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: mlserver
      DownloadURL: https://files.pythonhosted.org/packages/a0/46/fb9dec266364d45baedb212c319005e71e7bec673cf14b724eae76c9ffc4/mlserver-1.5.0.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1039304
    community_link: https://github.com/SeldonIO/MLServer
    community_name: https://github.com/SeldonIO/MLServer
    community_url: https://github.com/SeldonIO/MLServer
    component_comment: ''
    component_highlevel_description: An inference server for your machine learning
      models, including support for multiple frameworks, multi-model serving and more
    component_name: MLServer
    component_platform: linux
    component_programing_language: Python
    component_version: 1.5.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/SeldonIO/MLServer/archive/1.5.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1085547&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: mlserver
    target_sw: linux
    vendor: pip
    version: 1.5.0
    web_url: https://pypi.org/project/mlserver/1.5.0/
  licenses:
  - Apache-2.0
  name: mlserver
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.5.0
  mimer:
    linking: Static
    product_number: CTX1039304
    product_version_label: 1.5.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: mpmath+1.3.0
  additional_info:
    fossa-attribution:
      Description: 'mpmath======|pypi version| |Build status| |Code coverage status|
        |Zenodo Badge|.. |pypi version| image:: https://img.shields.io/pypi/v/mpmath.svg   :target:
        https://pypi.python.org/pypi/mpmath.. |Build status| image:: https://github.com/fredrik-johansson/mpmath/workflows/test/badge.svg   :target:
        https://github.com/fredrik-johansson/mpmath/actions?workflow=test.. |Code
        coverage status| image:: https://codecov.io/gh/fredrik-johansson/mpmath/branch/master/graph/badge.svg   :target:
        https://codecov.io/gh/fredrik-johansson/mpmath.. |Zenodo Badge| image:: https://zenodo.org/badge/2934512.svg   :target:
        https://zenodo.org/badge/latestdoi/2934512A Python library for arbitrary-precision
        floating-point arithmetic.Website: http://mpmath.org/Main author: Fredrik
        Johansson <fredrik.johansson@gmail.com>Mpmath is free software released under
        the New BSD License (see theLICENSE file for details)0. History and credits----------------------The
        following people (among others) have contributed major patchesor new features
        to mpmath:* Pearu Peterson <pearu.peterson@gmail.com>* Mario Pernici <mario.pernici@mi.infn.it>*
        Ondrej Certik <ondrej@certik.cz>* Vinzent Steinberg <vinzent.steinberg@gmail.cm>*
        Nimish Telang <ntelang@gmail.com>* Mike Taschuk <mtaschuk@ece.ualberta.ca>*
        Case Van Horsen <casevh@gmail.com>* Jorn Baayen <jorn.baayen@gmail.com>* Chris
        Smith <smichr@gmail.com>* Juan Arias de Reyna <arias@us.es>* Ioannis Tziakos
        <itziakos@gmail.com>* Aaron Meurer <asmeurer@gmail.com>* Stefan Krastanov
        <krastanov.stefan@gmail.com>* Ken Allen <ken.allen@sbcglobal.net>* Timo Hartmann
        <thartmann15@gmail.com>* Sergey B Kirpichev <skirpichev@gmail.com>* Kris Kuhlman
        <kristopher.kuhlman@gmail.com>* Paul Masson <paulmasson@analyticphysics.com>*
        Michael Kagalenko <michael.kagalenko@gmail.com>* Jonathan Warner <warnerjon12@gmail.com>*
        Max Gaukler <max.gaukler@fau.de>* Guillermo Navas-Palencia <g.navas.palencia@gmail.com>*
        Nike Dattani <nike@hpqc.org>Numerous other people have contributed by reporting
        bugs,requesting new features, or suggesting improvements to thedocumentation.For
        a detailed changelog, including individual contributions,see the CHANGES file.Fredrik''s
        work on mpmath during summer 2008 was sponsored by Googleas part of the Google
        Summer of Code program.Fredrik''s work on mpmath during summer 2009 was sponsored
        by theAmerican Institute of Mathematics under the support of the National
        ScienceFoundation Grant No. 0757627 (FRG: L-functions and Modular Forms).Any
        opinions, findings, and conclusions or recommendations expressed in thismaterial
        are those of the author(s) and do not necessarily reflect theviews of the
        sponsors.Credit also goes to:* The authors of the GMP library and the Python
        wrapper  gmpy, enabling mpmath to become much faster at  high precision* The
        authors of MPFR, pari/gp, MPFUN, and other arbitrary-  precision libraries,
        whose documentation has been helpful  for implementing many of the algorithms
        in mpmath* Wikipedia contributors; Abramowitz & Stegun; Gradshteyn & Ryzhik;  Wolfram
        Research for MathWorld and the Wolfram Functions site.  These are the main
        references used for special functions  implementations.* George Brandl for
        developing the Sphinx documentation tool  used to build mpmath''s documentationRelease
        history:* Version 1.3.0 released on March 7, 2023* Version 1.2.0 released
        on February 1, 2021* Version 1.1.0 released on December 11, 2018* Version
        1.0.0 released on September 27, 2017* Version 0.19 released on June 10, 2014*
        Version 0.18 released on December 31, 2013* Version 0.17 released on February
        1, 2011* Version 0.16 released on September 24, 2010* Version 0.15 released
        on June 6, 2010* Version 0.14 released on February 5, 2010* Version 0.13 released
        on August 13, 2009* Version 0.12 released on June 9, 2009* Version 0.11 released
        on January 26, 2009* Version 0.10 released on October 15, 2008* Version 0.9
        released on August 23, 2008* Version 0.8 released on April 20, 2008* Version
        0.7 released on March 12, 2008* Version 0.6 released on January 13, 2008*
        Version 0.5 released on November 24, 2007* Version 0.4 released on November
        3, 2007* Version 0.3 released on October 5, 2007* Version 0.2 released on
        October 2, 2007* Version 0.1 released on September 27, 20071. Download & installation--------------------------Mpmath
        requires Python 2.7 or 3.5 (or later versions). It has been testedwith CPython
        2.7, 3.5 through 3.7 and for PyPy.The latest release of mpmath can be downloaded
        from the mpmathwebsite and from https://github.com/fredrik-johansson/mpmath/releasesIt
        should also be available in the Python Package Index athttps://pypi.python.org/pypi/mpmathTo
        install latest release of Mpmath with pip, simply run``pip install mpmath``Or
        unpack the mpmath archive and run``python setup.py install``Mpmath can also
        be installed using``python -m easy_install mpmath``The latest development
        code is available fromhttps://github.com/fredrik-johansson/mpmathSee the main
        documentation for more detailed instructions.2. Running tests----------------The
        unit tests in mpmath/tests/ can be run via the scriptruntests.py, but it is
        recommended to run them with py.test(https://pytest.org/), especiallyto generate
        more useful reports in case there are failures.You may also want to check
        out the demo scripts in the demodirectory.The master branch is automatically
        tested by Travis CI.3. Documentation----------------Documentation in reStructuredText
        format is available in thedoc directory included with the source package.
        These filesare human-readable, but can be compiled to prettier HTML usingthe
        build.py script (requires Sphinx, http://sphinx.pocoo.org/).See setup.txt
        in the documentation for more information.The most recent documentation is
        also available in HTML format:http://mpmath.org/doc/current/4. Known problems-----------------Mpmath
        is a work in progress. Major issues include:* Some functions may return incorrect
        values when given extremely  large arguments or arguments very close to singularities.*
        Directed rounding works for arithmetic operations. It is implemented  heuristically
        for other operations, and their results may be off by one  or two units in
        the last place (even if otherwise accurate).* Some IEEE 754 features are not
        available. Inifinities and NaN are  partially supported; denormal rounding
        is currently not available  at all.* The interface for switching precision
        and rounding is not finalized.  The current method is not threadsafe.5. Help
        and bug reports-----------------------General questions and comments can be
        sent to the mpmath mailinglist,mpmath@googlegroups.comYou can also report
        bugs and send patches to the mpmath issue tracker,https://github.com/fredrik-johansson/mpmath/issues'
      Package: mpmath
      Source: pip
      Version: 1.3.0
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: mpmath
      DownloadURL: https://files.pythonhosted.org/packages/e0/47/dd32fa426cc72114383ac549964eecb20ecfd886d1e5ccf5340b55b02f57/mpmath-1.3.0.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1035649
    community_link: https://pypi.org/project/mpmath/
    community_name: https://pypi.org/project/mpmath/
    community_url: https://pypi.org/project/mpmath/
    component_comment: ''
    component_highlevel_description: A Python library for arbitrary-precision floating-point
      arithmetic.
    component_name: mpmath
    component_platform: linux
    component_programing_language: Python
    component_version: 1.3.0
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://files.pythonhosted.org/packages/e0/47/dd32fa426cc72114383ac549964eecb20ecfd886d1e5ccf5340b55b02f57/mpmath-1.3.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1062811&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: France
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: mpmath
    target_sw: linux
    vendor: pip
    version: 1.3.0
    web_url: http://mpmath.org/
  licenses:
  - BSD-3-Clause
  name: mpmath
  primary:
  - torch+2.2.2
  subcomponent: false
  type: FOSS
  versions:
  - 1.3.0
  mimer:
    linking: Static
    product_number: CTX1035649
    product_version_label: 1.3.0
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: networkx+3.2.1
  additional_info:
    fossa-attribution:
      Description: 'NetworkX========.. image:: https://github.com/networkx/networkx/workflows/test/badge.svg?branch=main  :target:
        https://github.com/networkx/networkx/actions?query=workflow%3A%22test%22..
        image:: https://codecov.io/gh/networkx/networkx/branch/main/graph/badge.svg   :target:
        https://app.codecov.io/gh/networkx/networkx/branch/main   .. image:: https://img.shields.io/github/labels/networkx/networkx/Good%20First%20Issue?color=green&label=Contribute%20&style=flat-square   :target:
        https://github.com/networkx/networkx/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22   NetworkX
        is a Python package for the creation, manipulation,and study of the structure,
        dynamics, and functionsof complex networks.- **Website (including documentation):**
        https://networkx.org- **Mailing list:** https://groups.google.com/forum/#!forum/networkx-discuss-
        **Source:** https://github.com/networkx/networkx- **Bug reports:** https://github.com/networkx/networkx/issues-
        **Report a security vulnerability:** https://tidelift.com/security- **Tutorial:**
        https://networkx.org/documentation/latest/tutorial.html- **GitHub Discussions:**
        https://github.com/networkx/networkx/discussionsSimple example--------------Find
        the shortest path between two nodes in an undirected graph:.. code:: pycon    >>>
        import networkx as nx    >>> G = nx.Graph()    >>> G.add_edge("A", "B", weight=4)    >>>
        G.add_edge("B", "D", weight=2)    >>> G.add_edge("A", "C", weight=3)    >>>
        G.add_edge("C", "D", weight=4)    >>> nx.shortest_path(G, "A", "D", weight="weight")    [''A'',
        ''B'', ''D'']Install-------Install the latest version of NetworkX::    $ pip
        install networkxInstall with all optional dependencies::    $ pip install
        networkx[all]For additional details, please see `INSTALL.rst`.Bugs----Please
        report any bugs that you find `here <https://github.com/networkx/networkx/issues>`_.Or,
        even better, fork the repository on `GitHub <https://github.com/networkx/networkx>`_and
        create a pull request (PR). We welcome all changes, big or small, and wewill
        help you make the PR if you are new to `git` (just ask on the issue and/orsee
        `CONTRIBUTING.rst`).License-------Released under the 3-Clause BSD license
        (see `LICENSE.txt`)::   Copyright (C) 2004-2024 NetworkX Developers   Aric
        Hagberg <hagberg@lanl.gov>   Dan Schult <dschult@colgate.edu>   Pieter Swart
        <swart@lanl.gov>'
      Package: networkx
      Source: pip
      Version: 3.2.1
      Hash: ''
      licenses: []
      Title: networkx
  bazaar:
    register: 'no'
    prim: 1/CTX1040640
    community_link: https://pypi.org/project/networkx/
    community_name: https://pypi.org/project/networkx/
    community_url: https://pypi.org/project/networkx/
    component_comment: ''
    component_highlevel_description: Python package for creating and manipulating
      graphs and networks
    component_name: networkx
    component_platform: linux
    component_programing_language: Python
    component_version: 3.2.1
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://files.pythonhosted.org/packages/c4/80/a84676339aaae2f1cfdf9f418701dd634aef9cc76f708ef55c36ff39c3ca/networkx-3.2.1.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1078641&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: networkx
    target_sw: linux
    vendor: pip
    version: 3.2.1
    web_url: https://pypi.org/project/networkx/3.3/
  licenses: []
  name: networkx
  primary:
  - torch+2.2.2
  subcomponent: false
  type: FOSS
  versions:
  - 3.2.1
  mimer:
    linking: Static
    product_number: CTX1040640
    product_version_label: 3.2.1
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: numpy+1.26.4
  additional_info:
    fossa-attribution:
      Description: "<h1 align=\"center\"><img src=\"https://raw.githubusercontent.com/numpy/numpy/main/branding/logo/primary/numpylogo.svg\"
        width=\"300\"></h1><br>[![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)[![PyPI
        Downloads](https://img.shields.io/pypi/dm/numpy.svg?label=PyPI%20downloads)](https://pypi.org/project/numpy/)[![Conda
        Downloads](https://img.shields.io/conda/dn/conda-forge/numpy.svg?label=Conda%20downloads)](https://anaconda.org/conda-forge/numpy)[![Stack
        Overflow](https://img.shields.io/badge/stackoverflow-Ask%20questions-blue.svg)](https://stackoverflow.com/questions/tagged/numpy)[![Nature
        Paper](https://img.shields.io/badge/DOI-10.1038%2Fs41592--019--0686--2-blue)](https://doi.org/10.1038/s41586-020-2649-2)[![OpenSSF
        Scorecard](https://api.securityscorecards.dev/projects/github.com/numpy/numpy/badge)](https://api.securityscorecards.dev/projects/github.com/numpy/numpy)NumPy
        is the fundamental package for scientific computing with Python.- **Website:**
        https://www.numpy.org- **Documentation:** https://numpy.org/doc- **Mailing
        list:** https://mail.python.org/mailman/listinfo/numpy-discussion- **Source
        code:** https://github.com/numpy/numpy- **Contributing:** https://www.numpy.org/devdocs/dev/index.html-
        **Bug reports:** https://github.com/numpy/numpy/issues- **Report a security
        vulnerability:** https://tidelift.com/docs/securityIt provides:- a powerful
        N-dimensional array object- sophisticated (broadcasting) functions- tools
        for integrating C/C++ and Fortran code- useful linear algebra, Fourier transform,
        and random number capabilitiesTesting:NumPy requires `pytest` and `hypothesis`.
        \ Tests can then be run after installation with:    python -c \"import numpy,
        sys; sys.exit(numpy.test() is False)\"Code of Conduct----------------------NumPy
        is a community-driven open source project developed by a diverse group of[contributors](https://numpy.org/teams/).
        The NumPy leadership has made a strongcommitment to creating an open, inclusive,
        and positive community. Please read the[NumPy Code of Conduct](https://numpy.org/code-of-conduct/)
        for guidance on how to interactwith others in a way that makes our community
        thrive.Call for Contributions----------------------The NumPy project welcomes
        your expertise and enthusiasm!Small improvements or fixes are always appreciated.
        If you are considering larger contributionsto the source code, please contact
        us through the [mailinglist](https://mail.python.org/mailman/listinfo/numpy-discussion)
        first.Writing code isn\u2019t the only way to contribute to NumPy. You can
        also:- review pull requests- help us stay on top of new and old issues- develop
        tutorials, presentations, and other educational materials- maintain and improve
        [our website](https://github.com/numpy/numpy.org)- develop graphic design
        for our brand assets and promotional materials- translate website content-
        help with outreach and onboard new contributors- write grant proposals and
        help with other fundraising effortsFor more information about the ways you
        can contribute to NumPy, visit [our website](https://numpy.org/contribute/).
        If you\u2019re unsure where to start or how your skills fit in, reach out!
        You canask on the mailing list or here, on GitHub, by opening a new issue
        or leaving acomment on a relevant issue that is already open.Our preferred
        channels of communication are all public, but if you\u2019d like tospeak to
        us in private first, contact our community coordinators atnumpy-team@googlegroups.com
        or on Slack (write numpy-team@googlegroups.com foran invitation).We also have
        a biweekly community call, details of which are announced on themailing list.
        You are very welcome to join.If you are new to contributing to open source,
        [thisguide](https://opensource.guide/how-to-contribute/) helps explain why,
        what,and how to successfully get involved."
      Package: numpy
      Source: pip
      Version: 1.26.4
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - BSL-1.0
      - CC-BY-4.0
      - CC-BY-SA-3.0
      - CC-BY-SA-4.0
      - CC0-1.0
      - FSFAP
      - GPL-1.0-or-later
      - GPL-3.0-only
      - GPL-3.0-or-later
      - GPL-3.0-with-GCC-exception
      - LGPL-2.0-or-later
      - MIT
      - NCSA
      - OPL-1.0
      - SunPro
      - Zlib
      - bsd-3-clause-open-mpi
      - lgpl-2.1-nokia-qt
      - openpub
      - public-domain
      - unknown
      - zsh
      Title: numpy
      DownloadURL: https://files.pythonhosted.org/packages/65/6e/09db70a523a96d25e115e71cc56a6f9031e7b8cd166c1ac8438307c14058/numpy-1.26.4.tar.gz
  bazaar:
    register: 'no'
    prim: 73/CAX1057111
    community_link: https://pypi.org/project/numpy/
    community_name: https://pypi.org/project/numpy/
    community_url: https://pypi.org/project/numpy/
    component_comment: ''
    component_highlevel_description: The fundamental package for scientific computing
      with Python.
    component_name: numpy
    component_platform: linux
    component_programing_language: Python
    component_version: 1.26.4
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://files.pythonhosted.org/packages/65/6e/09db70a523a96d25e115e71cc56a6f9031e7b8cd166c1ac8438307c14058/numpy-1.26.4.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1077793&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: numpy
    target_sw: linux
    vendor: pip
    version: 1.26.4
    web_url: https://numpy.org
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - BSL-1.0
  - CC-BY-4.0
  - CC-BY-SA-3.0
  - CC-BY-SA-4.0
  - CC0-1.0
  - FSFAP
  - GPL-1.0-or-later
  - GPL-3.0-only
  - GPL-3.0-or-later
  - GPL-3.0-with-GCC-exception
  - LGPL-2.0-or-later
  - MIT
  - NCSA
  - OPL-1.0
  - SunPro
  - Zlib
  - bsd-3-clause-open-mpi
  - lgpl-2.1-nokia-qt
  - openpub
  - public-domain
  - unknown
  - zsh
  name: numpy
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.26.4
  mimer:
    linking: Static
    product_number: CAX1057111
    product_version_label: v1.26.4
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: opentelemetry-api+1.23.0
  additional_info:
    fossa-attribution:
      Description: 'OpenTelemetry Python API============================================================================|pypi|..
        |pypi| image:: https://badge.fury.io/py/opentelemetry-api.svg   :target: https://pypi.org/project/opentelemetry-api/Installation------------::    pip
        install opentelemetry-apiReferences----------* `OpenTelemetry Project <https://opentelemetry.io/>`_'
      Package: opentelemetry-api
      Source: pip
      Version: 1.23.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: opentelemetry-api
      DownloadURL: https://files.pythonhosted.org/packages/96/e4/0bfd837c625517dd4c908789a89063247e5769be02b47bf432cde53964e2/opentelemetry_api-1.23.0-py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 10/CTX1029840
    community_link: https://github.com/open-telemetry/opentelemetry-python
    community_name: https://github.com/open-telemetry/opentelemetry-python
    community_url: https://github.com/open-telemetry/opentelemetry-python
    component_comment: ''
    component_highlevel_description: OpenTelemetry Python API and SDK
    component_name: opentelemetry-api
    component_platform: linux
    component_programing_language: Python
    component_version: V1.23.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/open-telemetry/opentelemetry-python/archive/v1.23.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1079950&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: opentelemetry-api
    target_sw: linux
    vendor: pip
    version: 1.23.0
    web_url: https://pypi.org/project/opentelemetry-api/1.24.0/
  licenses:
  - Apache-2.0
  name: opentelemetry-api
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.23.0
  mimer:
    linking: Static
    product_number: CTX1029840
    product_version_label: v1.23.0
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: opentelemetry-instrumentation+0.44b0
  additional_info:
    fossa-attribution:
      Description: 'OpenTelemetry Instrumentation=============================|pypi|..
        |pypi| image:: https://badge.fury.io/py/opentelemetry-instrumentation.svg   :target:
        https://pypi.org/project/opentelemetry-instrumentation/Installation------------::    pip
        install opentelemetry-instrumentationThis package provides commands that help
        automatically instrument a program:.. note::    You need to install a distro
        package to get auto instrumentation working. The ``opentelemetry-distro``    package
        contains the default distro and configurator and automatically configures
        some of the common options for users.    For more info about ``opentelemetry-distro``
        check `here <https://opentelemetry-python.readthedocs.io/en/latest/examples/distro/README.html>`__    ::        pip
        install "opentelemetry-distro[otlp]"    When creating a custom distro and/or
        configurator, be sure to add entry points for each under `opentelemetry_distro`
        and `opentelemetry_configurator` respectfully.    If you have entry points
        for multiple distros or configurators present in your environment, you should
        specify the entry point name of the distro and configurator you want to be
        used via the `OTEL_PYTHON_DISTRO` and `OTEL_PYTHON_CONFIGURATOR` environment
        variables.opentelemetry-bootstrap-----------------------::    opentelemetry-bootstrap
        [-a |--action=][install|requirements]This command install default instrumentation
        packages and detects active Python site-packagesto figure out which instrumentation
        packages the user might want to install. By default, itprints out a list of
        the default and detected instrumentation packages that can be added to arequirements.txt
        file. It also supports installing the packages when run with:code:`--action=install`
        or :code:`-a install` flag. All default and detectableinstrumentation packages
        are defined `here <https://github.com/flands/opentelemetry-python-contrib/blob/main/opentelemetry-instrumentation/src/opentelemetry/instrumentation/bootstrap_gen.py>`.opentelemetry-instrument------------------------::    opentelemetry-instrument
        python program.pyThe instrument command will try to automatically detect packages
        used by your python programand when possible, apply automatic tracing instrumentation
        on them. This means your programwill get automatic distributed tracing without
        having to make any code changes. This willalso configure a global tracer and
        tracing exporter as well as a meter and meter exporter.By default, the instrument
        command will use the OTLP exporter but this can be overridden.The command
        supports the following configuration options as CLI arguments and environmentvariables:*
        ``--traces_exporter`` or ``OTEL_TRACES_EXPORTER``* ``--metrics_exporter``
        or ``OTEL_METRICS_EXPORTER``* ``--distro`` or ``OTEL_PYTHON_DISTRO``* ``--configurator``
        or ``OTEL_PYTHON_CONFIGURATOR``The exporter options define what exporter destination
        to use and can be set to one or moreexporter names (see below). You can pass
        multiple values to configure multiple exporters(e.g., ``zipkin_json,otlp``).    -
        Defaults to `otlp`.    - Can be set to `none` to disable automatic tracer
        initialization.    - Can be set to ''console` to display JSON results locally.Trace
        exporter names:    - jaeger_proto    - jaeger_thrift    - opencensus    -
        otlp    - otlp_proto_grpc (`deprecated`)    - otlp_proto_http (`deprecated`)    -
        zipkin_json    - zipkin_protoMetric exporter names:    - otlp    - otlp_proto_grpc
        (`deprecated`)    - prometheusNote: The default transport protocol for ``otlp``
        is gRPC.* ``--id-generator`` or ``OTEL_PYTHON_ID_GENERATOR``Used to specify
        which IDs Generator to use for the global Tracer Provider. By default, itwill
        use the random IDs generator.The code in ``program.py`` needs to use one of
        the packages for which there isan OpenTelemetry integration. For a list of
        the available integrations pleasecheck `here <https://opentelemetry-python.readthedocs.io/en/stable/index.html#integrations>`_*
        ``OTEL_PYTHON_DISABLED_INSTRUMENTATIONS``If set by the user, opentelemetry-instrument
        will read this environment variable to disable specific instrumentations.e.g
        OTEL_PYTHON_DISABLED_INSTRUMENTATIONS = "requests,django"Examples^^^^^^^^::    opentelemetry-instrument
        --traces_exporter console flask run --port=3000The above command will pass
        ``--traces_exporter console`` to the instrument command and ``--port=3000``
        to ``flask run``.::    opentelemetry-instrument --traces_exporter zipkin_json,otlp
        celery -A tasks worker --loglevel=infoThe above command will configure global
        trace provider, attach zipkin and otlp exporters to it and thenstart celery
        with the rest of the arguments.::    opentelemetry-instrument --id_generator
        random flask run --port=3000The above command will configure the global trace
        provider to use the Random IDs Generator, and thenpass ``--port=3000`` to
        ``flask run``.References----------* `OpenTelemetry Project <https://opentelemetry.io/>`_'
      Package: opentelemetry-instrumentation
      Source: pip
      Version: 0.44b0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: opentelemetry-instrumentation
      DownloadURL: https://files.pythonhosted.org/packages/bf/e3/b2a8260862d278ac2505c8cb61d11185349f5ea537946220f5c7d738de2a/opentelemetry_instrumentation-0.44b0-py3-none-any.whl
  bazaar:
    register: 'yes'
    prim: SCAS-642726
    community_link: https://pypi.org/project/opentelemetry-instrumentation/0.45b0/
    community_name: https://pypi.org/project/opentelemetry-instrumentation/0.45b0/
    community_url: https://pypi.org/project/opentelemetry-instrumentation/0.45b0/
    component_comment: ''
    component_highlevel_description: ''
    component_name: opentelemetry-instrumentation
    component_platform: linux
    component_programing_language: ''
    component_version: 0.44b0
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/bf/e3/b2a8260862d278ac2505c8cb61d11185349f5ea537946220f5c7d738de2a/opentelemetry_instrumentation-0.44b0-py3-none-any.whl
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: opentelemetry-instrumentation
    target_sw: linux
    vendor: pip
    version: 0.44b0
    web_url: https://pypi.org/project/opentelemetry-instrumentation/0.45b0/
  licenses:
  - Apache-2.0
  name: opentelemetry-instrumentation
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.44b0
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 0.44b0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: opentelemetry-util-http+0.44b0
  additional_info:
    fossa-attribution:
      Description: 'OpenTelemetry Util HTTP=======================|pypi|.. |pypi|
        image:: https://badge.fury.io/py/opentelemetry-util-http.svg   :target: https://pypi.org/project/opentelemetry-util-http/This
        library provides ASGI, WSGI middleware and other HTTP-relatedfunctionality
        that is common to instrumented web frameworks (such as Django,Starlette, FastAPI,
        etc.) to track requests timing through OpenTelemetry.Installation------------::    pip
        install opentelemetry-util-httpUsage (Quart)-------------.. code-block:: python    from
        quart import Quart    from opentelemetry.instrumentation.asgi import OpenTelemetryMiddleware    app
        = Quart(__name__)    app.asgi_app = OpenTelemetryMiddleware(app.asgi_app)    @app.route("/")    async
        def hello():        return "Hello!"    if __name__ == "__main__":        app.run(debug=True)Usage
        (Django 3.0)------------------Modify the application''s ``asgi.py`` file as
        shown below... code-block:: python    import os    from django.core.asgi import
        get_asgi_application    from opentelemetry.instrumentation.asgi import OpenTelemetryMiddleware    os.environ.setdefault(''DJANGO_SETTINGS_MODULE'',
        ''asgi_example.settings'')    application = get_asgi_application()    application
        = OpenTelemetryMiddleware(application)Usage (Raw ASGI)----------------.. code-block::
        python    from opentelemetry.instrumentation.asgi import OpenTelemetryMiddleware    app
        = ...  # An ASGI application.    app = OpenTelemetryMiddleware(app)References----------*
        `OpenTelemetry Project <https://opentelemetry.io/>`_'
      Package: opentelemetry-util-http
      Source: pip
      Version: 0.44b0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: opentelemetry-util-http
      DownloadURL: https://files.pythonhosted.org/packages/81/bc/c9073aa85f073093c6f095d9872e12d2c75402cabc9bd87b4e27bfcc7280/opentelemetry_util_http-0.44b0-py3-none-any.whl
  bazaar:
    register: 'yes'
    prim: SCAS-642726
    community_link: https://pypi.org/project/opentelemetry-util-http/0.45b0/
    community_name: https://pypi.org/project/opentelemetry-util-http/0.45b0/
    community_url: https://pypi.org/project/opentelemetry-util-http/0.45b0/
    component_comment: ''
    component_highlevel_description: ''
    component_name: opentelemetry-util-http
    component_platform: linux
    component_programing_language: ''
    component_version: 0.44b0
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/81/bc/c9073aa85f073093c6f095d9872e12d2c75402cabc9bd87b4e27bfcc7280/opentelemetry_util_http-0.44b0-py3-none-any.whl
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: opentelemetry-util-http
    target_sw: linux
    vendor: pip
    version: 0.44b0
    web_url: https://pypi.org/project/opentelemetry-util-http/0.45b0/
  licenses:
  - Apache-2.0
  name: opentelemetry-util-http
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.44b0
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 0.44b0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: orjson+3.9.15
  additional_info:
    fossa-attribution:
      Description: "# orjsonorjson is a fast, correct JSON library for Python. It[benchmarks](https://github.com/ijl/orjson#performance)
        as the fastest Pythonlibrary for JSON and is more correct than the standard
        json library or otherthird-party libraries. It serializes[dataclass](https://github.com/ijl/orjson#dataclass),[datetime](https://github.com/ijl/orjson#datetime),[numpy](https://github.com/ijl/orjson#numpy),
        and[UUID](https://github.com/ijl/orjson#uuid) instances natively.Its features
        and drawbacks compared to other Python JSON libraries:* serializes `dataclass`
        instances 40-50x as fast as other libraries* serializes `datetime`, `date`,
        and `time` instances to RFC 3339 format,e.g., \"1970-01-01T00:00:00+00:00\"*
        serializes `numpy.ndarray` instances 4-12x as fast with 0.3x the memoryusage
        of other libraries* pretty prints 10x to 20x as fast as the standard library*
        serializes to `bytes` rather than `str`, i.e., is not a drop-in replacement*
        serializes `str` without escaping unicode to ASCII, e.g., \"\u597D\" rather
        than\"\\\\\\u597d\"* serializes `float` 10x as fast and deserializes twice
        as fast as otherlibraries* serializes subclasses of `str`, `int`, `list`,
        and `dict` natively,requiring `default` to specify how to serialize others*
        serializes arbitrary types using a `default` hook* has strict UTF-8 conformance,
        more correct than the standard library* has strict JSON conformance in not
        supporting Nan/Infinity/-Infinity* has an option for strict JSON conformance
        on 53-bit integers with defaultsupport for 64-bit* does not provide `load()`
        or `dump()` functions for reading from/writing tofile-like objectsorjson supports
        CPython 3.8, 3.9, 3.10, 3.11, and 3.12. It distributesamd64/x86_64, aarch64/armv8,
        arm7, POWER/ppc64le, and s390x wheels for Linux,amd64 and aarch64 wheels for
        macOS, and amd64 and i686/x86 wheels for Windows.orjson does not and will
        not support PyPy. orjson does not and will notsupport PEP 554 subinterpreters.
        Releases follow semantic versioning andserializing a new object type without
        an opt-in flag is considered abreaking change.orjson is licensed under both
        the Apache 2.0 and MIT licenses. Therepository and issue tracker is[github.com/ijl/orjson](https://github.com/ijl/orjson),
        and patches may besubmitted there. There is a[CHANGELOG](https://github.com/ijl/orjson/blob/master/CHANGELOG.md)available
        in the repository.1. [Usage](https://github.com/ijl/orjson#usage)    1. [Install](https://github.com/ijl/orjson#install)
        \   2. [Quickstart](https://github.com/ijl/orjson#quickstart)    3. [Migrating](https://github.com/ijl/orjson#migrating)
        \   4. [Serialize](https://github.com/ijl/orjson#serialize)        1. [default](https://github.com/ijl/orjson#default)
        \       2. [option](https://github.com/ijl/orjson#option)        3. [Fragment](https://github.com/ijl/orjson#fragment)
        \   5. [Deserialize](https://github.com/ijl/orjson#deserialize)2. [Types](https://github.com/ijl/orjson#types)
        \   1. [dataclass](https://github.com/ijl/orjson#dataclass)    2. [datetime](https://github.com/ijl/orjson#datetime)
        \   3. [enum](https://github.com/ijl/orjson#enum)    4. [float](https://github.com/ijl/orjson#float)
        \   5. [int](https://github.com/ijl/orjson#int)    6. [numpy](https://github.com/ijl/orjson#numpy)
        \   7. [str](https://github.com/ijl/orjson#str)    8. [uuid](https://github.com/ijl/orjson#uuid)3.
        [Testing](https://github.com/ijl/orjson#testing)4. [Performance](https://github.com/ijl/orjson#performance)
        \   1. [Latency](https://github.com/ijl/orjson#latency)    2. [Memory](https://github.com/ijl/orjson#memory)
        \   3. [Reproducing](https://github.com/ijl/orjson#reproducing)5. [Questions](https://github.com/ijl/orjson#questions)6.
        [Packaging](https://github.com/ijl/orjson#packaging)7. [License](https://github.com/ijl/orjson#license)##
        Usage### InstallTo install a wheel from PyPI:```shpip install --upgrade \"pip>=20.3\"
        # manylinux_x_y, universal2 wheel supportpip install --upgrade orjson```To
        build a wheel, see [packaging](https://github.com/ijl/orjson#packaging).###
        QuickstartThis is an example of serializing, with options specified, and deserializing:```python>>>
        import orjson, datetime, numpy>>> data = {    \"type\": \"job\",    \"created_at\":
        datetime.datetime(1970, 1, 1),    \"status\": \"\U0001F197\",    \"payload\":
        numpy.array([[1, 2], [3, 4]]),}>>> orjson.dumps(data, option=orjson.OPT_NAIVE_UTC
        | orjson.OPT_SERIALIZE_NUMPY)b'{\"type\":\"job\",\"created_at\":\"1970-01-01T00:00:00+00:00\",\"status\":\"\\xf0\\x9f\\x86\\x97\",\"payload\":[[1,2],[3,4]]}'>>>
        orjson.loads(_){'type': 'job', 'created_at': '1970-01-01T00:00:00+00:00',
        'status': '\U0001F197', 'payload': [[1, 2], [3, 4]]}```### Migratingorjson
        version 3 serializes more types than version 2. Subclasses of `str`,`int`,
        `dict`, and `list` are now serialized. This is faster and more similarto the
        standard library. It can be disabled with`orjson.OPT_PASSTHROUGH_SUBCLASS`.`dataclasses.dataclass`
        instancesare now serialized by default and cannot be customized in a`default`
        function unless `option=orjson.OPT_PASSTHROUGH_DATACLASS` isspecified. `uuid.UUID`
        instances are serialized by default.For any type that is now serialized,implementations
        in a `default` function and options enabling them can beremoved but do not
        need to be. There was no change in deserialization.To migrate from the standard
        library, the largest difference is that`orjson.dumps` returns `bytes` and
        `json.dumps` returns a `str`. Users with`dict` objects using non-`str` keys
        should specify`option=orjson.OPT_NON_STR_KEYS`. `sort_keys` is replaced by`option=orjson.OPT_SORT_KEYS`.
        `indent` is replaced by`option=orjson.OPT_INDENT_2` and other levels of indentation
        are notsupported.### Serialize```pythondef dumps(    __obj: Any,    default:
        Optional[Callable[[Any], Any]] = ...,    option: Optional[int] = ...,) ->
        bytes: ...````dumps()` serializes Python objects to JSON.It natively serializes`str`,
        `dict`, `list`, `tuple`, `int`, `float`, `bool`, `None`,`dataclasses.dataclass`,
        `typing.TypedDict`, `datetime.datetime`,`datetime.date`, `datetime.time`,
        `uuid.UUID`, `numpy.ndarray`, and`orjson.Fragment` instances. It supports
        arbitrary types through `default`. Itserializes subclasses of `str`, `int`,
        `dict`, `list`,`dataclasses.dataclass`, and `enum.Enum`. It does not serialize
        subclassesof `tuple` to avoid serializing `namedtuple` objects as arrays.
        To avoidserializing subclasses, specify the option `orjson.OPT_PASSTHROUGH_SUBCLASS`.The
        output is a `bytes` object containing UTF-8.The global interpreter lock (GIL)
        is held for the duration of the call.It raises `JSONEncodeError` on an unsupported
        type. This exception messagedescribes the invalid object with the error message`Type
        is not JSON serializable: ...`. To fix this, specify[default](https://github.com/ijl/orjson#default).It
        raises `JSONEncodeError` on a `str` that contains invalid UTF-8.It raises
        `JSONEncodeError` on an integer that exceeds 64 bits by default or,with `OPT_STRICT_INTEGER`,
        53 bits.It raises `JSONEncodeError` if a `dict` has a key of a type other
        than `str`,unless `OPT_NON_STR_KEYS` is specified.It raises `JSONEncodeError`
        if the output of `default` recurses to handling by`default` more than 254
        levels deep.It raises `JSONEncodeError` on circular references.It raises `JSONEncodeError`
        \ if a `tzinfo` on a datetime object isunsupported.`JSONEncodeError` is a
        subclass of `TypeError`. This is for compatibilitywith the standard library.If
        the failure was caused by an exception in `default` then`JSONEncodeError`
        chains the original exception as `__cause__`.#### defaultTo serialize a subclass
        or arbitrary types, specify `default` as acallable that returns a supported
        type. `default` may be a function,lambda, or callable class instance. To specify
        that a type was nothandled by `default`, raise an exception such as `TypeError`.```python>>>
        import orjson, decimal>>>def default(obj):    if isinstance(obj, decimal.Decimal):
        \       return str(obj)    raise TypeError>>> orjson.dumps(decimal.Decimal(\"0.0842389659712649442845\"))JSONEncodeError:
        Type is not JSON serializable: decimal.Decimal>>> orjson.dumps(decimal.Decimal(\"0.0842389659712649442845\"),
        default=default)b'\"0.0842389659712649442845\"'>>> orjson.dumps({1, 2}, default=default)orjson.JSONEncodeError:
        Type is not JSON serializable: set```The `default` callable may return an
        object that itselfmust be handled by `default` up to 254 times before an exceptionis
        raised.It is important that `default` raise an exception if a type cannot
        be handled.Python otherwise implicitly returns `None`, which appears to the
        callerlike a legitimate value and is serialized:```python>>> import orjson,
        json, rapidjson>>>def default(obj):    if isinstance(obj, decimal.Decimal):
        \       return str(obj)>>> orjson.dumps({\"set\":{1, 2}}, default=default)b'{\"set\":null}'>>>
        json.dumps({\"set\":{1, 2}}, default=default)'{\"set\":null}'>>> rapidjson.dumps({\"set\":{1,
        2}}, default=default)'{\"set\":null}'```#### optionTo modify how data is serialized,
        specify `option`. Each `option` is an integerconstant in `orjson`. To specify
        multiple options, mask them together, e.g.,`option=orjson.OPT_STRICT_INTEGER
        | orjson.OPT_NAIVE_UTC`.##### OPT_APPEND_NEWLINEAppend `\\n` to the output.
        This is a convenience and optimization for thepattern of `dumps(...) + \"\\n\"`.
        `bytes` objects are immutable and thispattern copies the original contents.```python>>>
        import orjson>>> orjson.dumps([])b\"[]\">>> orjson.dumps([], option=orjson.OPT_APPEND_NEWLINE)b\"[]\\n\"```#####
        OPT_INDENT_2Pretty-print output with an indent of two spaces. This is equivalent
        to`indent=2` in the standard library. Pretty printing is slower and the outputlarger.
        orjson is the fastest compared library at pretty printing and hasmuch less
        of a slowdown to pretty print than the standard library does. Thisoption is
        compatible with all other options.```python>>> import orjson>>> orjson.dumps({\"a\":
        \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]})b'{\"a\":\"b\",\"c\":{\"d\":true},\"e\":[1,2]}'>>>
        orjson.dumps(    {\"a\": \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]},    option=orjson.OPT_INDENT_2)b'{\\n
        \ \"a\": \"b\",\\n  \"c\": {\\n    \"d\": true\\n  },\\n  \"e\": [\\n    1,\\n
        \   2\\n  ]\\n}'```If displayed, the indentation and linebreaks appear like
        this:```json{  \"a\": \"b\",  \"c\": {    \"d\": true  },  \"e\": [    1,
        \   2  ]}```This measures serializing the github.json fixture as compact (52KiB)
        orpretty (64KiB):| Library    |   compact (ms) |   pretty (ms) |   vs. orjson
        ||------------|----------------|---------------|--------------|| orjson     |
        \          0.03 |          0.04 |          1   || ujson      |           0.18
        |          0.19 |          4.6 || rapidjson  |           0.1  |          0.12
        |          2.9 || simplejson |           0.25 |          0.89 |         21.4
        || json       |           0.18 |          0.71 |         17   |This measures
        serializing the citm_catalog.json fixture, more of a worstcase due to the
        amount of nesting and newlines, as compact (489KiB) orpretty (1.1MiB):| Library
        \   |   compact (ms) |   pretty (ms) |   vs. orjson ||------------|----------------|---------------|--------------||
        orjson     |           0.59 |          0.71 |          1   || ujson      |
        \          2.9  |          3.59 |          5   || rapidjson  |           1.81
        |          2.8  |          3.9 || simplejson |          10.43 |         42.13
        |         59.1 || json       |           4.16 |         33.42 |         46.9
        |This can be reproduced using the `pyindent` script.##### OPT_NAIVE_UTCSerialize
        `datetime.datetime` objects without a `tzinfo` as UTC. Thishas no effect on
        `datetime.datetime` objects that have `tzinfo` set.```python>>> import orjson,
        datetime>>> orjson.dumps(        datetime.datetime(1970, 1, 1, 0, 0, 0),    )b'\"1970-01-01T00:00:00\"'>>>
        orjson.dumps(        datetime.datetime(1970, 1, 1, 0, 0, 0),        option=orjson.OPT_NAIVE_UTC,
        \   )b'\"1970-01-01T00:00:00+00:00\"'```##### OPT_NON_STR_KEYSSerialize `dict`
        keys of type other than `str`. This allows `dict` keysto be one of `str`,
        `int`, `float`, `bool`, `None`, `datetime.datetime`,`datetime.date`, `datetime.time`,
        `enum.Enum`, and `uuid.UUID`. For comparison,the standard library serializes
        `str`, `int`, `float`, `bool` or `None` bydefault. orjson benchmarks as being
        faster at serializing non-`str` keysthan other libraries. This option is slower
        for `str` keys than the default.```python>>> import orjson, datetime, uuid>>>
        orjson.dumps(        {uuid.UUID(\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\"):
        [1, 2, 3]},        option=orjson.OPT_NON_STR_KEYS,    )b'{\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\":[1,2,3]}'>>>
        orjson.dumps(        {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},
        \       option=orjson.OPT_NON_STR_KEYS | orjson.OPT_NAIVE_UTC,    )b'{\"1970-01-01T00:00:00+00:00\":[1,2,3]}'```These
        types are generally serialized how they would be asvalues, e.g., `datetime.datetime`
        is still an RFC 3339 string and respectsoptions affecting it. The exception
        is that `int` serialization does notrespect `OPT_STRICT_INTEGER`.This option
        has the risk of creating duplicate keys. This is because non-`str`objects
        may serialize to the same `str` as an existing key, e.g.,`{\"1\": true, 1:
        false}`. The last key to be inserted to the `dict` will beserialized last
        and a JSON deserializer will presumably take the lastoccurrence of a key (in
        the above, `false`). The first value will be lost.This option is compatible
        with `orjson.OPT_SORT_KEYS`. If sorting is used,note the sort is unstable
        and will be unpredictable for duplicate keys.```python>>> import orjson, datetime>>>
        orjson.dumps(    {\"other\": 1, datetime.date(1970, 1, 5): 2, datetime.date(1970,
        1, 3): 3},    option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SORT_KEYS)b'{\"1970-01-03\":3,\"1970-01-05\":2,\"other\":1}'```This
        measures serializing 589KiB of JSON comprising a `list` of 100 `dict`in which
        each `dict` has both 365 randomly-sorted `int` keys representing epochtimestamps
        as well as one `str` key and the value for each key is asingle integer. In
        \"str keys\", the keys were converted to `str` beforeserialization, and orjson
        still specifes `option=orjson.OPT_NON_STR_KEYS`(which is always somewhat slower).|
        Library    |   str keys (ms) | int keys (ms)   | int keys sorted (ms)   ||------------|-----------------|-----------------|------------------------||
        orjson     |            1.53 | 2.16            | 4.29                   ||
        ujson      |            3.07 | 5.65            |                        ||
        rapidjson  |            4.29 |                 |                        ||
        simplejson |           11.24 | 14.50           | 21.86                  ||
        json       |            7.17 | 8.49            |                        |ujson
        is blank for sorting because it segfaults. json is blank because itraises
        `TypeError` on attempting to sort before converting all keys to `str`.rapidjson
        is blank because it does not support non-`str` keys. This canbe reproduced
        using the `pynonstr` script.##### OPT_OMIT_MICROSECONDSDo not serialize the
        `microsecond` field on `datetime.datetime` and`datetime.time` instances.```python>>>
        import orjson, datetime>>> orjson.dumps(        datetime.datetime(1970, 1,
        1, 0, 0, 0, 1),    )b'\"1970-01-01T00:00:00.000001\"'>>> orjson.dumps(        datetime.datetime(1970,
        1, 1, 0, 0, 0, 1),        option=orjson.OPT_OMIT_MICROSECONDS,    )b'\"1970-01-01T00:00:00\"'```#####
        OPT_PASSTHROUGH_DATACLASSPassthrough `dataclasses.dataclass` instances to
        `default`. This allowscustomizing their output but is much slower.```python>>>
        import orjson, dataclasses>>>@dataclasses.dataclassclass User:    id: str
        \   name: str    password: strdef default(obj):    if isinstance(obj, User):
        \       return {\"id\": obj.id, \"name\": obj.name}    raise TypeError>>>
        orjson.dumps(User(\"3b1\", \"asd\", \"zxc\"))b'{\"id\":\"3b1\",\"name\":\"asd\",\"password\":\"zxc\"}'>>>
        orjson.dumps(User(\"3b1\", \"asd\", \"zxc\"), option=orjson.OPT_PASSTHROUGH_DATACLASS)TypeError:
        Type is not JSON serializable: User>>> orjson.dumps(        User(\"3b1\",
        \"asd\", \"zxc\"),        option=orjson.OPT_PASSTHROUGH_DATACLASS,        default=default,
        \   )b'{\"id\":\"3b1\",\"name\":\"asd\"}'```##### OPT_PASSTHROUGH_DATETIMEPassthrough
        `datetime.datetime`, `datetime.date`, and `datetime.time` instancesto `default`.
        This allows serializing datetimes to a custom format, e.g.,HTTP dates:```python>>>
        import orjson, datetime>>>def default(obj):    if isinstance(obj, datetime.datetime):
        \       return obj.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")    raise TypeError>>>
        orjson.dumps({\"created_at\": datetime.datetime(1970, 1, 1)})b'{\"created_at\":\"1970-01-01T00:00:00\"}'>>>
        orjson.dumps({\"created_at\": datetime.datetime(1970, 1, 1)}, option=orjson.OPT_PASSTHROUGH_DATETIME)TypeError:
        Type is not JSON serializable: datetime.datetime>>> orjson.dumps(        {\"created_at\":
        datetime.datetime(1970, 1, 1)},        option=orjson.OPT_PASSTHROUGH_DATETIME,
        \       default=default,    )b'{\"created_at\":\"Thu, 01 Jan 1970 00:00:00
        GMT\"}'```This does not affect datetimes in `dict` keys if using OPT_NON_STR_KEYS.#####
        OPT_PASSTHROUGH_SUBCLASSPassthrough subclasses of builtin types to `default`.```python>>>
        import orjson>>>class Secret(str):    passdef default(obj):    if isinstance(obj,
        Secret):        return \"******\"    raise TypeError>>> orjson.dumps(Secret(\"zxc\"))b'\"zxc\"'>>>
        orjson.dumps(Secret(\"zxc\"), option=orjson.OPT_PASSTHROUGH_SUBCLASS)TypeError:
        Type is not JSON serializable: Secret>>> orjson.dumps(Secret(\"zxc\"), option=orjson.OPT_PASSTHROUGH_SUBCLASS,
        default=default)b'\"******\"'```This does not affect serializing subclasses
        as `dict` keys if usingOPT_NON_STR_KEYS.##### OPT_SERIALIZE_DATACLASSThis
        is deprecated and has no effect in version 3. In version 2 this wasrequired
        to serialize  `dataclasses.dataclass` instances. For more, see[dataclass](https://github.com/ijl/orjson#dataclass).#####
        OPT_SERIALIZE_NUMPYSerialize `numpy.ndarray` instances. For more, see[numpy](https://github.com/ijl/orjson#numpy).#####
        OPT_SERIALIZE_UUIDThis is deprecated and has no effect in version 3. In version
        2 this wasrequired to serialize `uuid.UUID` instances. For more, see[UUID](https://github.com/ijl/orjson#UUID).#####
        OPT_SORT_KEYSSerialize `dict` keys in sorted order. The default is to serialize
        in anunspecified order. This is equivalent to `sort_keys=True` in the standardlibrary.This
        can be used to ensure the order is deterministic for hashing or tests.It has
        a substantial performance penalty and is not recommended in general.```python>>>
        import orjson>>> orjson.dumps({\"b\": 1, \"c\": 2, \"a\": 3})b'{\"b\":1,\"c\":2,\"a\":3}'>>>
        orjson.dumps({\"b\": 1, \"c\": 2, \"a\": 3}, option=orjson.OPT_SORT_KEYS)b'{\"a\":3,\"b\":1,\"c\":2}'```This
        measures serializing the twitter.json fixture unsorted and sorted:| Library
        \   |   unsorted (ms) |   sorted (ms) |   vs. orjson ||------------|-----------------|---------------|--------------||
        orjson     |            0.32 |          0.54 |          1   || ujson      |
        \           1.6  |          2.07 |          3.8 || rapidjson  |            1.12
        |          1.65 |          3.1 || simplejson |            2.25 |          3.13
        |          5.8 || json       |            1.78 |          2.32 |          4.3
        |The benchmark can be reproduced using the `pysort` script.The sorting is
        not collation/locale-aware:```python>>> import orjson>>> orjson.dumps({\"a\":
        1, \"\xE4\": 2, \"A\": 3}, option=orjson.OPT_SORT_KEYS)b'{\"A\":3,\"a\":1,\"\\xc3\\xa4\":2}'```This
        is the same sorting behavior as the standard library, rapidjson,simplejson,
        and ujson.`dataclass` also serialize as maps but this has no effect on them.#####
        OPT_STRICT_INTEGEREnforce 53-bit limit on integers. The limit is otherwise
        64 bits, the same asthe Python standard library. For more, see [int](https://github.com/ijl/orjson#int).#####
        OPT_UTC_ZSerialize a UTC timezone on `datetime.datetime` instances as `Z`
        insteadof `+00:00`.```python>>> import orjson, datetime, zoneinfo>>> orjson.dumps(
        \       datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),
        \   )b'\"1970-01-01T00:00:00+00:00\"'>>> orjson.dumps(        datetime.datetime(1970,
        1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),        option=orjson.OPT_UTC_Z
        \   )b'\"1970-01-01T00:00:00Z\"'```#### Fragment`orjson.Fragment` includes
        already-serialized JSON in a document. This is anefficient way to include
        JSON blobs from a cache, JSONB field, or separatelyserialized object without
        first deserializing to Python objects via `loads()`.```python>>> import orjson>>>
        orjson.dumps({\"key\": \"zxc\", \"data\": orjson.Fragment(b'{\"a\": \"b\",
        \"c\": 1}')})b'{\"key\":\"zxc\",\"data\":{\"a\": \"b\", \"c\": 1}}'```It does
        no reformatting: `orjson.OPT_INDENT_2` will not affect acompact blob nor will
        a pretty-printed JSON blob be rewritten as compact.The input must be `bytes`
        or `str` and given as a positional argument.This raises `orjson.JSONEncodeError`
        if a `str` is given and the input isnot valid UTF-8. It otherwise does no
        validation and it is possible towrite invalid JSON. This does not escape characters.
        The implementation istested to not crash if given invalid strings or invalid
        JSON.This is similar to `RawJSON` in rapidjson.### Deserialize```pythondef
        loads(__obj: Union[bytes, bytearray, memoryview, str]) -> Any: ...````loads()`
        deserializes JSON to Python objects. It deserializes to `dict`,`list`, `int`,
        `float`, `str`, `bool`, and `None` objects.`bytes`, `bytearray`, `memoryview`,
        and `str` input are accepted. If the inputexists as a `memoryview`, `bytearray`,
        or `bytes` object, it is recommended topass these directly rather than creating
        an unnecessary `str` object. That is,`orjson.loads(b\"{}\")` instead of `orjson.loads(b\"{}\".decode(\"utf-8\"))`.
        Thishas lower memory usage and lower latency.The input must be valid UTF-8.orjson
        maintains a cache of map keys for the duration of the process. Thiscauses
        a net reduction in memory usage by avoiding duplicate strings. Thekeys must
        be at most 64 bytes to be cached and 1024 entries are stored.The global interpreter
        lock (GIL) is held for the duration of the call.It raises `JSONDecodeError`
        if given an invalid type or invalidJSON. This includes if the input contains
        `NaN`, `Infinity`, or `-Infinity`,which the standard library allows, but is
        not valid JSON.It raises `JSONDecodeError` if a combination of array or object
        recurses1024 levels deep.`JSONDecodeError` is a subclass of `json.JSONDecodeError`
        and `ValueError`.This is for compatibility with the standard library.## Types###
        dataclassorjson serializes instances of `dataclasses.dataclass` natively.
        It serializesinstances 40-50x as fast as other libraries and avoids a severe
        slowdown seenin other libraries compared to serializing `dict`.It is supported
        to pass all variants of dataclasses, including dataclassesusing `__slots__`,
        frozen dataclasses, those with optional or defaultattributes, and subclasses.
        There is a performance benefit to notusing `__slots__`.| Library    | dict
        (ms)   | dataclass (ms)   | vs. orjson   ||------------|-------------|------------------|--------------||
        orjson     | 1.40        | 1.60             | 1            || ujson      |
        \            |                  |              || rapidjson  | 3.64        |
        68.48            | 42           || simplejson | 14.21       | 92.18            |
        57           || json       | 13.28       | 94.90            | 59           |This
        measures serializing 555KiB of JSON, orjson natively and other librariesusing
        `default` to serialize the output of `dataclasses.asdict()`. This can bereproduced
        using the `pydataclass` script.Dataclasses are serialized as maps, with every
        attribute serialized and inthe order given on class definition:```python>>>
        import dataclasses, orjson, typing@dataclasses.dataclassclass Member:    id:
        int    active: bool = dataclasses.field(default=False)@dataclasses.dataclassclass
        Object:    id: int    name: str    members: typing.List[Member]>>> orjson.dumps(Object(1,
        \"a\", [Member(1, True), Member(2)]))b'{\"id\":1,\"name\":\"a\",\"members\":[{\"id\":1,\"active\":true},{\"id\":2,\"active\":false}]}'```###
        datetimeorjson serializes `datetime.datetime` objects to[RFC 3339](https://tools.ietf.org/html/rfc3339)
        format,e.g., \"1970-01-01T00:00:00+00:00\". This is a subset of ISO 8601 and
        iscompatible with `isoformat()` in the standard library.```python>>> import
        orjson, datetime, zoneinfo>>> orjson.dumps(    datetime.datetime(2018, 12,
        1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo(\"Australia/Adelaide\")))b'\"2018-12-01T02:03:04.000009+10:30\"'>>>
        orjson.dumps(    datetime.datetime(2100, 9, 1, 21, 55, 2).replace(tzinfo=zoneinfo.ZoneInfo(\"UTC\")))b'\"2100-09-01T21:55:02+00:00\"'>>>
        orjson.dumps(    datetime.datetime(2100, 9, 1, 21, 55, 2))b'\"2100-09-01T21:55:02\"'````datetime.datetime`
        supports instances with a `tzinfo` that is `None`,`datetime.timezone.utc`,
        a timezone instance from the python3.9+ `zoneinfo`module, or a timezone instance
        from the third-party `pendulum`, `pytz`, or`dateutil`/`arrow` libraries.It
        is fastest to use the standard library's `zoneinfo.ZoneInfo` for timezones.`datetime.time`
        objects must not have a `tzinfo`.```python>>> import orjson, datetime>>> orjson.dumps(datetime.time(12,
        0, 15, 290))b'\"12:00:15.000290\"'````datetime.date` objects will always serialize.```python>>>
        import orjson, datetime>>> orjson.dumps(datetime.date(1900, 1, 2))b'\"1900-01-02\"'```Errors
        with `tzinfo` result in `JSONEncodeError` being raised.To disable serialization
        of `datetime` objects specify the option`orjson.OPT_PASSTHROUGH_DATETIME`.To
        use \"Z\" suffix instead of \"+00:00\" to indicate UTC (\"Zulu\") time, use
        the option`orjson.OPT_UTC_Z`.To assume datetimes without timezone are UTC,
        use the option `orjson.OPT_NAIVE_UTC`.### enumorjson serializes enums natively.
        Options apply to their values.```python>>> import enum, datetime, orjson>>>class
        DatetimeEnum(enum.Enum):    EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)>>>
        orjson.dumps(DatetimeEnum.EPOCH)b'\"1970-01-01T00:00:00\"'>>> orjson.dumps(DatetimeEnum.EPOCH,
        option=orjson.OPT_NAIVE_UTC)b'\"1970-01-01T00:00:00+00:00\"'```Enums with
        members that are not supported types can be serialized using`default`:```python>>>
        import enum, orjson>>>class Custom:    def __init__(self, val):        self.val
        = valdef default(obj):    if isinstance(obj, Custom):        return obj.val
        \   raise TypeErrorclass CustomEnum(enum.Enum):    ONE = Custom(1)>>> orjson.dumps(CustomEnum.ONE,
        default=default)b'1'```### floatorjson serializes and deserializes double
        precision floats with no loss ofprecision and consistent rounding.`orjson.dumps()`
        serializes Nan, Infinity, and -Infinity, which are notcompliant JSON, as `null`:```python>>>
        import orjson, ujson, rapidjson, json>>> orjson.dumps([float(\"NaN\"), float(\"Infinity\"),
        float(\"-Infinity\")])b'[null,null,null]'>>> ujson.dumps([float(\"NaN\"),
        float(\"Infinity\"), float(\"-Infinity\")])OverflowError: Invalid Inf value
        when encoding double>>> rapidjson.dumps([float(\"NaN\"), float(\"Infinity\"),
        float(\"-Infinity\")])'[NaN,Infinity,-Infinity]'>>> json.dumps([float(\"NaN\"),
        float(\"Infinity\"), float(\"-Infinity\")])'[NaN, Infinity, -Infinity]'```###
        intorjson serializes and deserializes 64-bit integers by default. The rangesupported
        is a signed 64-bit integer's minimum (-9223372036854775807) toan unsigned
        64-bit integer's maximum (18446744073709551615). Thisis widely compatible,
        but there are implementationsthat only support 53-bits for integers, e.g.,web
        browsers. For those implementations, `dumps()` can be configured toraise a
        `JSONEncodeError` on values exceeding the 53-bit range.```python>>> import
        orjson>>> orjson.dumps(9007199254740992)b'9007199254740992'>>> orjson.dumps(9007199254740992,
        option=orjson.OPT_STRICT_INTEGER)JSONEncodeError: Integer exceeds 53-bit range>>>
        orjson.dumps(-9007199254740992, option=orjson.OPT_STRICT_INTEGER)JSONEncodeError:
        Integer exceeds 53-bit range```### numpyorjson natively serializes `numpy.ndarray`
        and individual`numpy.float64`, `numpy.float32`, `numpy.float16` (`numpy.half`),`numpy.int64`,
        `numpy.int32`, `numpy.int16`, `numpy.int8`,`numpy.uint64`, `numpy.uint32`,
        `numpy.uint16`, `numpy.uint8`,`numpy.uintp`, `numpy.intp`, `numpy.datetime64`,
        and `numpy.bool`instances.orjson is faster than all compared libraries at
        serializingnumpy instances. Serializing numpy data requires specifying`option=orjson.OPT_SERIALIZE_NUMPY`.```python>>>
        import orjson, numpy>>> orjson.dumps(        numpy.array([[1, 2, 3], [4, 5,
        6]]),        option=orjson.OPT_SERIALIZE_NUMPY,)b'[[1,2,3],[4,5,6]]'```The
        array must be a contiguous C array (`C_CONTIGUOUS`) and one of thesupported
        datatypes.Note a difference between serializing `numpy.float32` using `ndarray.tolist()`or
        `orjson.dumps(..., option=orjson.OPT_SERIALIZE_NUMPY)`: `tolist()` convertsto
        a `double` before serializing and orjson's native path does not. Thiscan result
        in different rounding.`numpy.datetime64` instances are serialized as RFC 3339
        strings anddatetime options affect them.```python>>> import orjson, numpy>>>
        orjson.dumps(        numpy.datetime64(\"2021-01-01T00:00:00.172\"),        option=orjson.OPT_SERIALIZE_NUMPY,)b'\"2021-01-01T00:00:00.172000\"'>>>
        orjson.dumps(        numpy.datetime64(\"2021-01-01T00:00:00.172\"),        option=(
        \           orjson.OPT_SERIALIZE_NUMPY |            orjson.OPT_NAIVE_UTC |
        \           orjson.OPT_OMIT_MICROSECONDS        ),)b'\"2021-01-01T00:00:00+00:00\"'```If
        an array is not a contiguous C array, contains an unsupported datatype,or
        contains a `numpy.datetime64` using an unsupported representation(e.g., picoseconds),
        orjson falls through to `default`. In `default`,`obj.tolist()` can be specified.If
        an array is not in the native endianness, e.g., an array of big-endian valueson
        a little-endian system, `orjson.JSONEncodeError`  is raised.If an array is
        malformed, `orjson.JSONEncodeError` is raised.This measures serializing 92MiB
        of JSON from an `numpy.ndarray` withdimensions of `(50000, 100)` and `numpy.float64`
        values:| Library    | Latency (ms)   | RSS diff (MiB)   | vs. orjson   ||------------|----------------|------------------|--------------||
        orjson     | 194            | 99               | 1.0          || ujson      |
        \               |                  |              || rapidjson  | 3,048          |
        309              | 15.7         || simplejson | 3,023          | 297              |
        15.6         || json       | 3,133          | 297              | 16.1         |This
        measures serializing 100MiB of JSON from an `numpy.ndarray` withdimensions
        of `(100000, 100)` and `numpy.int32` values:| Library    | Latency (ms)   |
        RSS diff (MiB)   | vs. orjson   ||------------|----------------|------------------|--------------||
        orjson     | 178            | 115              | 1.0          || ujson      |
        \               |                  |              || rapidjson  | 1,512          |
        551              | 8.5          || simplejson | 1,606          | 504              |
        9.0          || json       | 1,506          | 503              | 8.4          |This
        measures serializing 105MiB of JSON from an `numpy.ndarray` withdimensions
        of `(100000, 200)` and `numpy.bool` values:| Library    | Latency (ms)   |
        RSS diff (MiB)   | vs. orjson   ||------------|----------------|------------------|--------------||
        orjson     | 157            | 120              | 1.0          || ujson      |
        \               |                  |              || rapidjson  | 710            |
        327              | 4.5          || simplejson | 931            | 398              |
        5.9          || json       | 996            | 400              | 6.3          |In
        these benchmarks, orjson serializes natively, ujson is blank because itdoes
        not support a `default` parameter, and the other libraries serialize`ndarray.tolist()`
        via `default`. The RSS column measures peak memoryusage during serialization.
        This can be reproduced using the `pynumpy` script.orjson does not have an
        installation or compilation dependency on numpy. Theimplementation is independent,
        reading `numpy.ndarray` using`PyArrayInterface`.### strorjson is strict about
        UTF-8 conformance. This is stricter than the standardlibrary's json module,
        which will serialize and deserialize UTF-16 surrogates,e.g., \"\\ud800\",
        that are invalid UTF-8.If `orjson.dumps()` is given a `str` that does not
        contain valid UTF-8,`orjson.JSONEncodeError` is raised. If `loads()` receives
        invalid UTF-8,`orjson.JSONDecodeError` is raised.orjson and rapidjson are
        the only compared JSON libraries to consistentlyerror on bad input.```python>>>
        import orjson, ujson, rapidjson, json>>> orjson.dumps('\\ud800')JSONEncodeError:
        str is not valid UTF-8: surrogates not allowed>>> ujson.dumps('\\ud800')UnicodeEncodeError:
        'utf-8' codec ...>>> rapidjson.dumps('\\ud800')UnicodeEncodeError: 'utf-8'
        codec ...>>> json.dumps('\\ud800')'\"\\\\ud800\"'>>> orjson.loads('\"\\\\ud800\"')JSONDecodeError:
        unexpected end of hex escape at line 1 column 8: line 1 column 1 (char 0)>>>
        ujson.loads('\"\\\\ud800\"')''>>> rapidjson.loads('\"\\\\ud800\"')ValueError:
        Parse error at offset 1: The surrogate pair in string is invalid.>>> json.loads('\"\\\\ud800\"')'\\ud800'```To
        make a best effort at deserializing bad input, first decode `bytes` usingthe
        `replace` or `lossy` argument for `errors`:```python>>> import orjson>>> orjson.loads(b'\"\\xed\\xa0\\x80\"')JSONDecodeError:
        str is not valid UTF-8: surrogates not allowed>>> orjson.loads(b'\"\\xed\\xa0\\x80\"'.decode(\"utf-8\",
        \"replace\"))'\uFFFD\uFFFD\uFFFD'```### uuidorjson serializes `uuid.UUID`
        instances to[RFC 4122](https://tools.ietf.org/html/rfc4122) format, e.g.,\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\".```
        python>>> import orjson, uuid>>> orjson.dumps(uuid.UUID('f81d4fae-7dec-11d0-a765-00a0c91e6bf6'))b'\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"'>>>
        orjson.dumps(uuid.uuid5(uuid.NAMESPACE_DNS, \"python.org\"))b'\"886313e1-3b8a-5372-9b90-0c9aee199e5d\"'```##
        TestingThe library has comprehensive tests. There are tests against fixtures
        in the[JSONTestSuite](https://github.com/nst/JSONTestSuite) and[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)repositories.
        It is tested to not crash against the[Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings).It
        is tested to not leak memory. It is tested to not crashagainst and not accept
        invalid UTF-8. There are integration testsexercising the library's use in
        web servers (gunicorn using multiprocess/forkedworkers) and whenmultithreaded.
        It also uses some tests from the ultrajson library.orjson is the most correct
        of the compared libraries. This graph shows how eachlibrary handles a combined
        342 JSON fixtures from the[JSONTestSuite](https://github.com/nst/JSONTestSuite)
        and[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)
        tests:| Library    |   Invalid JSON documents not rejected |   Valid JSON
        documents not deserialized ||------------|---------------------------------------|-----------------------------------------||
        orjson     |                                     0 |                                       0
        || ujson      |                                    31 |                                       0
        || rapidjson  |                                     6 |                                       0
        || simplejson |                                    10 |                                       0
        || json       |                                    17 |                                       0
        |This shows that all libraries deserialize valid JSON but only orjsoncorrectly
        rejects the given invalid JSON fixtures. Errors are largely due toaccepting
        invalid strings and numbers.The graph above can be reproduced using the `pycorrectness`
        script.## PerformanceSerialization and deserialization performance of orjson
        is better thanultrajson, rapidjson, simplejson, or json. The benchmarks are
        done onfixtures of real data:* twitter.json, 631.5KiB, results of a search
        on Twitter for \"\u4E00\", containingCJK strings, dictionaries of strings
        and arrays of dictionaries, indented.* github.json, 55.8KiB, a GitHub activity
        feed, containing dictionaries ofstrings and arrays of dictionaries, not indented.*
        citm_catalog.json, 1.7MiB, concert data, containing nested dictionaries ofstrings
        and arrays of integers, indented.* canada.json, 2.2MiB, coordinates of the
        Canadian border in GeoJSONformat, containing floats and arrays, indented.###
        Latency![Serialization](doc/serialization.png)![Deserialization](doc/deserialization.png)####
        twitter.json serialization| Library    |   Median latency (milliseconds) |
        \  Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             0.3 |                    3085 |                  1
        \  || ujson      |                             2.2 |                     454
        |                  6.7 || rapidjson  |                             1.7 |                     605
        |                  5.1 || simplejson |                             2.9 |                     350
        |                  8.8 || json       |                             2.3 |                     439
        |                  7   |#### twitter.json deserialization| Library    |   Median
        latency (milliseconds) |   Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             1.2 |                     839 |                  1
        \  || ujson      |                             2.5 |                     396
        |                  2.1 || rapidjson  |                             4.1 |                     243
        |                  3.5 || simplejson |                             2.7 |                     367
        |                  2.3 || json       |                             3.2 |                     310
        |                  2.7 |#### github.json serialization| Library    |   Median
        latency (milliseconds) |   Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             0   |                   33474 |                  1
        \  || ujson      |                             0.2 |                    5179
        |                  6.5 || rapidjson  |                             0.2 |                    5910
        |                  5.7 || simplejson |                             0.3 |                    3051
        |                 11   || json       |                             0.2 |                    4222
        |                  7.9 |#### github.json deserialization| Library    |   Median
        latency (milliseconds) |   Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             0.1 |                   10211 |                  1
        \  || ujson      |                             0.2 |                    4222
        |                  2.2 || rapidjson  |                             0.3 |                    3947
        |                  2.6 || simplejson |                             0.2 |                    5437
        |                  1.9 || json       |                             0.2 |                    5240
        |                  1.9 |#### citm_catalog.json serialization| Library    |
        \  Median latency (milliseconds) |   Operations per second |   Relative (latency)
        ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             0.6 |                    1549 |                  1
        \  || ujson      |                             2.7 |                     366
        |                  4.2 || rapidjson  |                             2.2 |                     446
        |                  3.5 || simplejson |                            11.3 |                      88
        |                 17.6 || json       |                             5.1 |                     195
        |                  7.9 |#### citm_catalog.json deserialization| Library    |
        \  Median latency (milliseconds) |   Operations per second |   Relative (latency)
        ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             2.7 |                     367 |                  1
        \  || ujson      |                             4.7 |                     213
        |                  1.7 || rapidjson  |                             7.2 |                     139
        |                  2.6 || simplejson |                             6   |                     167
        |                  2.2 || json       |                             6.3 |                     158
        |                  2.3 |#### canada.json serialization| Library    |   Median
        latency (milliseconds) |   Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             4.8 |                     208 |                  1
        \  || ujson      |                            15.6 |                      63
        |                  3.3 || rapidjson  |                            42.4 |                      23
        |                  8.9 || simplejson |                            72   |                      13
        |                 15   || json       |                            46.2 |                      21
        |                  9.6 |#### canada.json deserialization| Library    |   Median
        latency (milliseconds) |   Operations per second |   Relative (latency) ||------------|---------------------------------|-------------------------|----------------------||
        orjson     |                             5.7 |                     176 |                  1
        \  || ujson      |                            14   |                      71
        |                  2.5 || rapidjson  |                            27.5 |                      36
        |                  4.9 || simplejson |                            28.4 |                      35
        |                  5   || json       |                            28.3 |                      35
        |                  5   |### Memoryorjson as of 3.7.0 has higher baseline memory
        usage than other librariesdue to a persistent buffer used for parsing. Incremental
        memory usage whendeserializing is similar to the standard library and other
        third-partylibraries.This measures, in the first column, RSS after importing
        a library and readingthe fixture, and in the second column, increases in RSS
        after repeatedlycalling `loads()` on the fixture.#### twitter.json| Library
        \   |   import, read() RSS (MiB) |   loads() increase in RSS (MiB) ||------------|----------------------------|---------------------------------||
        orjson     |                       15.7 |                             3.4
        || ujson      |                       16.4 |                             3.4
        || rapidjson  |                       16.6 |                             4.4
        || simplejson |                       14.5 |                             1.8
        || json       |                       13.9 |                             1.8
        |#### github.json| Library    |   import, read() RSS (MiB) |   loads() increase
        in RSS (MiB) ||------------|----------------------------|---------------------------------||
        orjson     |                       15.2 |                             0.4
        || ujson      |                       15.4 |                             0.4
        || rapidjson  |                       15.7 |                             0.5
        || simplejson |                       13.7 |                             0.2
        || json       |                       13.3 |                             0.1
        |#### citm_catalog.json| Library    |   import, read() RSS (MiB) |   loads()
        increase in RSS (MiB) ||------------|----------------------------|---------------------------------||
        orjson     |                       16.8 |                            10.1
        || ujson      |                       17.3 |                            10.2
        || rapidjson  |                       17.6 |                            28.7
        || simplejson |                       15.8 |                            30.1
        || json       |                       14.8 |                            20.5
        |#### canada.json| Library    |   import, read() RSS (MiB) |   loads() increase
        in RSS (MiB) ||------------|----------------------------|---------------------------------||
        orjson     |                       17.2 |                            22.1
        || ujson      |                       17.4 |                            18.3
        || rapidjson  |                       18   |                            23.5
        || simplejson |                       15.7 |                            21.4
        || json       |                       15.4 |                            20.4
        |### ReproducingThe above was measured using Python 3.11.8 on Linux (amd64)
        withorjson 3.10.0, ujson 5.9.0, python-rapidson 1.16, and simplejson 3.19.2.The
        latency results can be reproduced using the `pybench` and `graph`scripts.
        The memory results can be reproduced using the `pymem` script.## Questions###
        Why can't I install it from PyPI?Probably `pip` needs to be upgraded to version
        20.3 or later to supportthe latest manylinux_x_y or universal2 wheel formats.###
        \"Cargo, the Rust package manager, is not installed or is not on PATH.\"This
        happens when there are no binary wheels (like manylinux) for yourplatform
        on PyPI. You can install [Rust](https://www.rust-lang.org/) through`rustup`
        or a package manager and then it will compile.### Will it deserialize to dataclasses,
        UUIDs, decimals, etc or support object_hook?No. This requires a schema specifying
        what types are expected and how tohandle errors etc. This is addressed by
        data validation libraries alevel above this.### Will it serialize to `str`?No.
        `bytes` is the correct type for a serialized blob.## PackagingTo package orjson
        requires at least [Rust](https://www.rust-lang.org/) 1.72and the [maturin](https://github.com/PyO3/maturin)
        build tool. The recommendedbuild command is:```shmaturin build --release --strip```It
        benefits from also having a C build environment to compile a fasterdeserialization
        backend. See this project's `manylinux_2_28` builds for anexample using clang
        and LTO.The project's own CI tests against `nightly-2024-04-15` and stable
        1.72. Itis prudent to pin the nightly version because that channel can introducebreaking
        changes.orjson is tested for amd64, aarch64, arm7, ppc64le, and s390x on Linux.
        Itis tested for either aarch64 or amd64 on macOS and cross-compiles for the
        other,depending on version. For Windows it is tested on amd64 and i686.There
        are no runtime dependencies other than libc.The source distribution on PyPI
        contains all dependencies' source and can bebuilt without network access.
        The file can be downloaded from`https://files.pythonhosted.org/packages/source/o/orjson/orjson-${version}.tar.gz`.orjson's
        tests are included in the source distribution on PyPI. Therequirements to
        run the tests are specified in `test/requirements.txt`. Thetests should be
        run as part of the build. It can be run with`pytest -q test`.## Licenseorjson
        was written by ijl <<ijl@mailbox.org>>, copyright 2018 - 2024, availableto
        you under either the Apache 2 license or MIT license at your choice."
      Package: orjson
      Source: pip
      Version: 3.9.15
      Hash: ''
      licenses:
      - Apache-2.0
      - MIT
      Title: orjson
      DownloadURL: https://files.pythonhosted.org/packages/8e/6e/7fa23a55afc901fa3b33210660287dc73b46d6b77d05f53781a98930a7b1/orjson-3.9.15-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl
  bazaar:
    register: 'yes'
    prim: SCAS-642722
    community_link: https://github.com/ijl/orjson
    community_name: https://github.com/ijl/orjson
    community_url: https://github.com/ijl/orjson
    component_comment: ''
    component_highlevel_description: ''
    component_name: orjson
    component_platform: linux
    component_programing_language: ''
    component_version: 3.9.15
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/8e/6e/7fa23a55afc901fa3b33210660287dc73b46d6b77d05f53781a98930a7b1/orjson-3.9.15-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: orjson
    target_sw: linux
    vendor: pip
    version: 3.9.15
    web_url: https://github.com/ijl/orjson
  licenses:
  - Apache-2.0
  - MIT
  name: orjson
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 3.9.15
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 3.9.15
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: packaging+23.2
  additional_info:
    fossa-attribution:
      Description: 'packaging=========.. start-introReusable core utilities for various
        Python Packaging`interoperability specifications <https://packaging.python.org/specifications/>`_.This
        library provides utilities that implement the interoperabilityspecifications
        which have clearly one correct behaviour (eg: :pep:`440`)or benefit greatly
        from having a single shared implementation (eg: :pep:`425`)... end-introThe
        ``packaging`` project includes the following: version handling, specifiers,markers,
        requirements, tags, utilities.Documentation-------------The `documentation`_
        provides information and the API for the following:- Version Handling- Specifiers-
        Markers- Requirements- Tags- UtilitiesInstallation------------Use ``pip``
        to install these utilities::    pip install packagingThe ``packaging`` library
        uses calendar-based versioning (``YY.N``).Discussion----------If you run into
        bugs, you can file them in our `issue tracker`_.You can also join ``#pypa``
        on Freenode to ask questions or get involved... _`documentation`: https://packaging.pypa.io/..
        _`issue tracker`: https://github.com/pypa/packaging/issuesCode of Conduct---------------Everyone
        interacting in the packaging project''s codebases, issue trackers, chatrooms,
        and mailing lists is expected to follow the `PSF Code of Conduct`_... _PSF
        Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.mdContributing------------The
        ``CONTRIBUTING.rst`` file outlines how to contribute to this project aswell
        as how to report a potential security issue. The documentation for thisproject
        also covers information about `project development`_ and `security`_... _`project
        development`: https://packaging.pypa.io/en/latest/development/.. _`security`:
        https://packaging.pypa.io/en/latest/security/Project History---------------Please
        review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ forrecent
        changes and project history... _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/'
      Package: packaging
      Source: pip
      Version: '23.2'
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      Title: packaging
      DownloadURL: https://files.pythonhosted.org/packages/fb/2b/9b9c33ffed44ee921d0967086d653047286054117d584f1b1a7c22ceaf7b/packaging-23.2.tar.gz
  bazaar:
    register: 'no'
    prim: 20/CTX1020778
    community_link: https://github.com/pypa/packaging
    community_name: https://github.com/pypa/packaging
    community_url: https://github.com/pypa/packaging
    component_comment: ''
    component_highlevel_description: Core utilities for Python packages
    component_name: packaging
    component_platform: linux
    component_programing_language: Python
    component_version: '23.2'
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/pypa/packaging/archive/23.2.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1064089&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: packaging
    target_sw: linux
    vendor: pip
    version: '23.2'
    web_url: https://pypi.org/project/packaging/24.0/
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  name: packaging
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '23.2'
  mimer:
    linking: Static
    product_number: CTX1020778
    product_version_label: '23.2'
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pandas+2.2.1
  additional_info:
    fossa-attribution:
      Description: "<div align=\"center\">  <img src=\"https://pandas.pydata.org/static/img/pandas.svg\"><br></div>-----------------#
        pandas: powerful Python data analysis toolkit[![PyPI Latest Release](https://img.shields.io/pypi/v/pandas.svg)](https://pypi.org/project/pandas/)[![Conda
        Latest Release](https://anaconda.org/conda-forge/pandas/badges/version.svg)](https://anaconda.org/anaconda/pandas/)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3509134.svg)](https://doi.org/10.5281/zenodo.3509134)[![Package
        Status](https://img.shields.io/pypi/status/pandas.svg)](https://pypi.org/project/pandas/)[![License](https://img.shields.io/pypi/l/pandas.svg)](https://github.com/pandas-dev/pandas/blob/master/LICENSE)[![Azure
        Build Status](https://dev.azure.com/pandas-dev/pandas/_apis/build/status/pandas-dev.pandas?branch=master)](https://dev.azure.com/pandas-dev/pandas/_build/latest?definitionId=1&branch=master)[![Coverage](https://codecov.io/github/pandas-dev/pandas/coverage.svg?branch=master)](https://codecov.io/gh/pandas-dev/pandas)[![Downloads](https://static.pepy.tech/personalized-badge/pandas?period=month&units=international_system&left_color=black&right_color=orange&left_text=PyPI%20downloads%20per%20month)](https://pepy.tech/project/pandas)[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pydata/pandas)[![Powered
        by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)[![Code
        style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports:
        isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)##
        What is it?**pandas** is a Python package that provides fast, flexible, and
        expressive datastructures designed to make working with \"relational\" or
        \"labeled\" data botheasy and intuitive. It aims to be the fundamental high-level
        building block fordoing practical, **real world** data analysis in Python.
        Additionally, it hasthe broader goal of becoming **the most powerful and flexible
        open source dataanalysis / manipulation tool available in any language**.
        It is already well onits way towards this goal.## Main FeaturesHere are just
        a few of the things that pandas does well:  - Easy handling of [**missing
        data**][missing-data] (represented as    `NaN`, `NA`, or `NaT`) in floating
        point as well as non-floating point data  - Size mutability: columns can be
        [**inserted and    deleted**][insertion-deletion] from DataFrame and higher
        dimensional    objects  - Automatic and explicit [**data alignment**][alignment]:
        objects can    be explicitly aligned to a set of labels, or the user can simply
        \   ignore the labels and let `Series`, `DataFrame`, etc. automatically    align
        the data for you in computations  - Powerful, flexible [**group by**][groupby]
        functionality to perform    split-apply-combine operations on data sets, for
        both aggregating    and transforming data  - Make it [**easy to convert**][conversion]
        ragged,    differently-indexed data in other Python and NumPy data structures
        \   into DataFrame objects  - Intelligent label-based [**slicing**][slicing],
        [**fancy    indexing**][fancy-indexing], and [**subsetting**][subsetting]
        of    large data sets  - Intuitive [**merging**][merging] and [**joining**][joining]
        data    sets  - Flexible [**reshaping**][reshape] and [**pivoting**][pivot-table]
        of    data sets  - [**Hierarchical**][mi] labeling of axes (possible to have
        multiple    labels per tick)  - Robust IO tools for loading data from [**flat
        files**][flat-files]    (CSV and delimited), [**Excel files**][excel], [**databases**][db],
        \   and saving/loading data from the ultrafast [**HDF5 format**][hdfstore]
        \ - [**Time series**][timeseries]-specific functionality: date range    generation
        and frequency conversion, moving window statistics,    date shifting and lagging
        \  [missing-data]: https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html
        \  [insertion-deletion]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion
        \  [alignment]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html?highlight=alignment#intro-to-data-structures
        \  [groupby]: https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#group-by-split-apply-combine
        \  [conversion]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe
        \  [slicing]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#slicing-ranges
        \  [fancy-indexing]: https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced
        \  [subsetting]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#boolean-indexing
        \  [merging]: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#database-style-dataframe-or-named-series-joining-merging
        \  [joining]: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#joining-on-index
        \  [reshape]: https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html
        \  [pivot-table]: https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html
        \  [mi]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#hierarchical-indexing-multiindex
        \  [flat-files]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#csv-text-files
        \  [excel]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#excel-files
        \  [db]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#sql-queries
        \  [hdfstore]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#hdf5-pytables
        \  [timeseries]: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-series-date-functionality##
        Where to get itThe source code is currently hosted on GitHub at:https://github.com/pandas-dev/pandasBinary
        installers for the latest released version are available at the [PythonPackage
        Index (PyPI)](https://pypi.org/project/pandas) and on [Conda](https://docs.conda.io/en/latest/).```sh#
        condaconda install pandas``````sh# or PyPIpip install pandas```## Dependencies-
        [NumPy - Adds support for large, multi-dimensional arrays, matrices and high-level
        mathematical functions to operate on these arrays](https://www.numpy.org)-
        [python-dateutil - Provides powerful extensions to the standard datetime module](https://dateutil.readthedocs.io/en/stable/index.html)-
        [pytz - Brings the Olson tz database into Python which allows accurate and
        cross platform timezone calculations](https://github.com/stub42/pytz)See the
        [full installation instructions](https://pandas.pydata.org/pandas-docs/stable/install.html#dependencies)
        for minimum supported versions of required, recommended and optional dependencies.##
        Installation from sourcesTo install pandas from source you need [Cython](https://cython.org/)
        in addition to the normaldependencies above. Cython can be installed from
        PyPI:```shpip install cython```In the `pandas` directory (same one where you
        found this file aftercloning the git repo), execute:```shpython setup.py install```or
        for installing in [development mode](https://pip.pypa.io/en/latest/cli/pip_install/#install-editable):```shpython
        -m pip install -e . --no-build-isolation --no-use-pep517```If you have `make`,
        you can also use `make develop` to run the same command.or alternatively```shpython
        setup.py develop```See the full instructions for [installing from source](https://pandas.pydata.org/pandas-docs/stable/install.html#installing-from-source).##
        License[BSD 3](LICENSE)## DocumentationThe official documentation is hosted
        on PyData.org: https://pandas.pydata.org/pandas-docs/stable## BackgroundWork
        on ``pandas`` started at [AQR](https://www.aqr.com/) (a quantitative hedge
        fund) in 2008 andhas been under active development since then.## Getting HelpFor
        usage questions, the best place to go to is [StackOverflow](https://stackoverflow.com/questions/tagged/pandas).Further,
        general questions and discussions can also take place on the [pydata mailing
        list](https://groups.google.com/forum/?fromgroups#!forum/pydata).## Discussion
        and DevelopmentMost development discussions take place on GitHub in this repo.
        Further, the [pandas-dev mailing list](https://mail.python.org/mailman/listinfo/pandas-dev)
        can also be used for specialized discussions or design issues, and a [Gitter
        channel](https://gitter.im/pydata/pandas) is available for quick development
        related questions.## Contributing to pandas [![Open Source Helpers](https://www.codetriage.com/pandas-dev/pandas/badges/users.svg)](https://www.codetriage.com/pandas-dev/pandas)All
        contributions, bug reports, bug fixes, documentation improvements, enhancements,
        and ideas are welcome.A detailed overview on how to contribute can be found
        in the **[contributing guide](https://pandas.pydata.org/docs/dev/development/contributing.html)**.If
        you are simply looking to start working with the pandas codebase, navigate
        to the [GitHub \"issues\" tab](https://github.com/pandas-dev/pandas/issues)
        and start looking through interesting issues. There are a number of issues
        listed under [Docs](https://github.com/pandas-dev/pandas/issues?labels=Docs&sort=updated&state=open)
        and [good first issue](https://github.com/pandas-dev/pandas/issues?labels=good+first+issue&sort=updated&state=open)
        where you could start out.You can also triage issues which may include reproducing
        bug reports, or asking for vital information such as version numbers or reproduction
        instructions. If you would like to start triaging issues, one easy way to
        get started is to [subscribe to pandas on CodeTriage](https://www.codetriage.com/pandas-dev/pandas).Or
        maybe through using pandas you have an idea of your own or are looking for
        something in the documentation and thinking \u2018this can be improved\u2019...you
        can do something about it!Feel free to ask questions on the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/pydata)
        or on [Gitter](https://gitter.im/pydata/pandas).As contributors and maintainers
        to this project, you are expected to abide by pandas' code of conduct. More
        information can be found at: [Contributor Code of Conduct](https://github.com/pandas-dev/pandas/blob/master/.github/CODE_OF_CONDUCT.md)"
      Package: pandas
      Source: pip
      Version: 2.2.1
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: pandas
      DownloadURL: https://files.pythonhosted.org/packages/3d/59/2afa81b9fb300c90531803c0fd43ff4548074fa3e8d0f747ef63b3b5e77a/pandas-2.2.1.tar.gz
  bazaar:
    register: 'no'
    prim: 53/CAX1057900
    community_link: https://github.com/pandas-dev/pandas
    community_name: https://github.com/pandas-dev/pandas
    community_url: https://github.com/pandas-dev/pandas
    component_comment: ''
    component_highlevel_description: Flexible and powerful data analysis / manipulation
      library for Python, providing labeled data structures similar to R data.frame
      objects, statistical functions, and much more.
    component_name: pandas
    component_platform: linux
    component_programing_language: Python
    component_version: V2.2.1
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/pandas-dev/pandas/archive/v2.2.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080444&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pandas
    target_sw: linux
    vendor: pip
    version: 2.2.1
    web_url: https://pandas.pydata.org
  licenses:
  - BSD-3-Clause
  name: pandas
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.1
  mimer:
    linking: Static
    product_number: CAX1057900
    product_version_label: V2.2.1
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: protobuf+3.20.3
  additional_info:
    fossa-attribution:
      Description: Protocol Buffers are Google's data interchange format
      Package: protobuf
      Source: pip
      Version: 3.20.3
      Hash: ''
      licenses:
      - BSD-2-Clause
      - BSD-3-Clause
      - Protobuf
      Title: protobuf
      DownloadURL: https://files.pythonhosted.org/packages/55/5b/e3d951e34f8356e5feecacd12a8e3b258a1da6d9a03ad1770f28925f29bc/protobuf-3.20.3.tar.gz
  bazaar:
    register: 'no'
    prim: 74/CAX1054389
    community_link: https://github.com/protocolbuffers/protobuf
    community_name: https://github.com/protocolbuffers/protobuf
    community_url: https://github.com/protocolbuffers/protobuf
    component_comment: ''
    component_highlevel_description: Protocol buffers are Google's language-neutral,
      platform-neutral, extensible mechanism for serializing structured data - think
      XML, but smaller, faster, and simpler. Google uses Protocol Buffers for almost
      all of its internal RPC protocols and file formats.
    component_name: protobuf
    component_platform: linux
    component_programing_language: C++
    component_version: 3.20.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/protocolbuffers/protobuf/archive/v3.20.3.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1025766&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: United States
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: protobuf
    target_sw: linux
    vendor: pip
    version: 3.20.3
    web_url: https://developers.google.com/protocol-buffers/
  licenses:
  - BSD-2-Clause
  - BSD-3-Clause
  - Protobuf
  name: protobuf
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 3.20.3
  mimer:
    linking: Static
    product_number: CAX1054389
    product_version_label: v3.20.3
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: py-grpc-prometheus+0.8.0
  additional_info:
    fossa-attribution:
      Description: '# py-grpc-prometheusInstrument library to provide prometheus metrics
        similar to:- https://github.com/grpc-ecosystem/java-grpc-prometheus- https://github.com/grpc-ecosystem/go-grpc-prometheus##
        StatusCurrently, the library has the parity metrics with the Java and Go library.###
        Server side:- grpc_server_started_total- grpc_server_handled_total- grpc_server_msg_received_total-
        grpc_server_msg_sent_total- grpc_server_handling_seconds### Client side:-
        grpc_client_started_total- grpc_client_handled_total- grpc_client_msg_received_total-
        grpc_client_msg_sent_total- grpc_client_handling_seconds- grpc_client_msg_recv_handling_seconds-
        grpc_client_msg_send_handling_seconds## How to use```pip install py-grpc-prometheus```##
        Client side:Client metrics monitoring is done by intercepting the gPRC channel.```pythonimport
        grpcfrom py_grpc_prometheus.prometheus_client_interceptor import PromClientInterceptorchannel
        = grpc.intercept_channel(grpc.insecure_channel(''server:6565''),                                         PromClientInterceptor())#
        Start an end point to expose metrics.start_http_server(metrics_port)```##
        Server side:Server metrics are exposed by adding the interceptor when the
        gRPC server is started. Take a look at`tests/integration/hello_world/hello_world_client.py`
        for the complete example.```pythonimport grpcfrom concurrent import futuresfrom
        py_grpc_prometheus.prometheus_server_interceptor import PromServerInterceptorfrom
        prometheus_client import start_http_server```Start the gRPC server with the
        interceptor, take a look at`tests/integration/hello_world/hello_world_server.py`
        for the complete example.```pythonserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10),                         interceptors=(PromServerInterceptor(),))#
        Start an end point to expose metrics.start_http_server(metrics_port)```##
        Histograms[Prometheus histograms](https://prometheus.io/docs/concepts/metric_types/#histogram)
        are a great wayto measure latency distributions of your RPCs. However, since
        it is bad practice to have metricsof [high cardinality](https://prometheus.io/docs/practices/instrumentation/#do-not-overuse-labels)the
        latency monitoring metrics are disabled by default. To enable them please
        call the followingin your interceptor initialization code:```jsoniqserver
        = grpc.server(futures.ThreadPoolExecutor(max_workers=10),                     interceptors=(PromServerInterceptor(enable_handling_time_histogram=True),))```After
        the call completes, its handling time will be recorded in a [Prometheus histogram](https://prometheus.io/docs/concepts/metric_types/#histogram)variable
        `grpc_server_handling_seconds`. The histogram variable contains three sub-metrics:
        * `grpc_server_handling_seconds_count` - the count of all completed RPCs by
        status and method * `grpc_server_handling_seconds_sum` - cumulative time of
        RPCs by status and method, useful for   calculating average handling times
        * `grpc_server_handling_seconds_bucket` - contains the counts of RPCs by status
        and method in respective   handling-time buckets. These buckets can be used
        by Prometheus to estimate SLAs (see [here](https://prometheus.io/docs/practices/histograms/))##
        Server Side:- enable_handling_time_histogram: Enables ''grpc_server_handling_seconds''##
        Client Side:- enable_client_handling_time_histogram: Enables ''grpc_client_handling_seconds''-
        enable_client_stream_receive_time_histogram: Enables ''grpc_client_msg_recv_handling_seconds''-
        enable_client_stream_send_time_histogram: Enables ''grpc_client_msg_send_handling_seconds''##
        Legacy metrics:Metric names have been updated to be in line with those from
        https://github.com/grpc-ecosystem/go-grpc-prometheus.The legacy metrics are:###
        server side:- grpc_server_started_total- grpc_server_handled_total- grpc_server_handled_latency_seconds-
        grpc_server_msg_received_total- grpc_server_msg_sent_total### client side:-
        grpc_client_started_total- grpc_client_completed- grpc_client_completed_latency_seconds-
        grpc_client_msg_sent_total- grpc_client_msg_received_totalIn order to be able
        to use these legacy metrics for backwards compatibility, the `legacy` flag
        can be set to `True` when initialising the server/client interceptorsFor example,
        to enable the server side legacy metrics:```jsoniqserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10),                     interceptors=(PromServerInterceptor(legacy=True),))```##
        How to run and test```shmake initialize-developmentmake test```## TODO:- Unit
        test with https://github.com/census-instrumentation/opencensus-python/blob/master/tests/unit/trace/ext/grpc/test_server_interceptor.py##
        Reference- https://grpc.io/grpc/python/grpc.html- https://github.com/census-instrumentation/opencensus-python/blob/master/opencensus/trace/ext/grpc/utils.py-
        https://github.com/opentracing-contrib/python-grpc/blob/b4bdc7ce81fa75ede00f7c6bcf5dab8fae47332a/grpc_opentracing/grpcext/grpc_interceptor/server_interceptor.py'
      Package: py-grpc-prometheus
      Source: pip
      Version: 0.8.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: py-grpc-prometheus
      DownloadURL: https://files.pythonhosted.org/packages/33/d8/038f4774d761380663c6755dcd01ae983d93944bd4916af27bd009a2aadc/py_grpc_prometheus-0.8.0.tar.gz
  bazaar:
    register: 'yes'
    prim: SCAS-642715
    community_link: https://github.com/lchenn/py-grpc-prometheus
    community_name: https://github.com/lchenn/py-grpc-prometheus
    community_url: https://github.com/lchenn/py-grpc-prometheus
    component_comment: ''
    component_highlevel_description: ''
    component_name: py-grpc-prometheus
    component_platform: linux
    component_programing_language: ''
    component_version: 0.8.0
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/33/d8/038f4774d761380663c6755dcd01ae983d93944bd4916af27bd009a2aadc/py_grpc_prometheus-0.8.0.tar.gz
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: py-grpc-prometheus
    target_sw: linux
    vendor: pip
    version: 0.8.0
    web_url: https://github.com/lchenn/py-grpc-prometheus
  licenses:
  - Apache-2.0
  name: py-grpc-prometheus
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.8.0
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 0.8.0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pydantic+1.10.14
  additional_info:
    fossa-attribution:
      Description: "# Pydantic[![CI](https://img.shields.io/github/actions/workflow/status/pydantic/pydantic/ci.yml?branch=main&logo=github&label=CI)](https://github.com/pydantic/pydantic/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[![Coverage](https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic.svg)](https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic)[![pypi](https://img.shields.io/pypi/v/pydantic.svg)](https://pypi.python.org/pypi/pydantic)[![CondaForge](https://img.shields.io/conda/v/conda-forge/pydantic.svg)](https://anaconda.org/conda-forge/pydantic)[![downloads](https://static.pepy.tech/badge/pydantic/month)](https://pepy.tech/project/pydantic)[![versions](https://img.shields.io/pypi/pyversions/pydantic.svg)](https://github.com/pydantic/pydantic)[![license](https://img.shields.io/github/license/pydantic/pydantic.svg)](https://github.com/pydantic/pydantic/blob/main/LICENSE)[![Pydantic
        v2](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json)](https://docs.pydantic.dev/latest/contributing/#badges)Data
        validation using Python type hints.Fast and extensible, Pydantic plays nicely
        with your linters/IDE/brain.Define how data should be in pure, canonical Python
        3.8+; validate it with Pydantic.## Pydantic Company :rocket:We've started
        a company based on the principles that I believe have led to Pydantic's success.Learn
        more from the [Company Announcement](https://blog.pydantic.dev/blog/2023/02/16/company-announcement--pydantic/).##
        Pydantic V1.10 vs. V2Pydantic V2 is a ground-up rewrite that offers many new
        features, performance improvements, and some breaking changes compared to
        Pydantic V1.If you're using Pydantic V1 you may want to look at the[pydantic
        V1.10 Documentation](https://docs.pydantic.dev/) or,[`1.10.X-fixes` git branch](https://github.com/pydantic/pydantic/tree/1.10.X-fixes).
        Pydantic V2 also ships with the latest version of Pydantic V1 built in so
        that you can incrementally upgrade your code base and projects: `from pydantic
        import v1 as pydantic_v1`.## HelpSee [documentation](https://docs.pydantic.dev/)
        for more details.## InstallationInstall using `pip install -U pydantic` or
        `conda install pydantic -c conda-forge`.For more installation options to make
        Pydantic even faster,see the [Install](https://docs.pydantic.dev/install/)
        section in the documentation.## A Simple Example```pyfrom datetime import
        datetimefrom typing import List, Optionalfrom pydantic import BaseModelclass
        User(BaseModel):    id: int    name: str = 'John Doe'    signup_ts: Optional[datetime]
        = None    friends: List[int] = []external_data = {'id': '123', 'signup_ts':
        '2017-06-01 12:22', 'friends': [1, '2', b'3']}user = User(**external_data)print(user)#>
        User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22)
        friends=[1, 2, 3]print(user.id)#> 123```## ContributingFor guidance on setting
        up a development environment and how to make acontribution to Pydantic, see[Contributing
        to Pydantic](https://docs.pydantic.dev/contributing/).## Reporting a Security
        VulnerabilitySee our [security policy](https://github.com/pydantic/pydantic/security/policy).##
        Changelog## v2.7.1 (2024-04-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.1)###
        What's Changed#### Packaging* Bump `pydantic-core` to `v2.18.2` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9307](https://github.com/pydantic/pydantic/pull/9307)#### New Features*
        Ftp and Websocket connection strings support by [@CherrySuryp](https://github.com/CherrySuryp)
        in [#9205](https://github.com/pydantic/pydantic/pull/9205)#### Changes* Use
        field description for RootModel schema description when there is `\u2026`
        by [@LouisGobert](https://github.com/LouisGobert) in [#9214](https://github.com/pydantic/pydantic/pull/9214)####
        Fixes* Fix `validation_alias` behavior with `model_construct` for `AliasChoices`
        and `AliasPath` by [@sydney-runkle](https://github.com/sydney-runkle) in [#9223](https://github.com/pydantic/pydantic/pull/9223)*
        Revert `typing.Literal` and import it outside the TYPE_CHECKING block by [@frost-nzcr4](https://github.com/frost-nzcr4)
        in [#9232](https://github.com/pydantic/pydantic/pull/9232)* Fix `Secret` serialization
        schema, applicable for unions by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9240](https://github.com/pydantic/pydantic/pull/9240)* Fix `strict` application
        to `function-after` with `use_enum_values` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9279](https://github.com/pydantic/pydantic/pull/9279)* Address case where
        `model_construct` on a class which defines `model_post_init` fails with `AttributeError`
        by [@babygrimes](https://github.com/babygrimes) in [#9168](https://github.com/pydantic/pydantic/pull/9168)*
        Fix `model_json_schema` with config types by [@NeevCohen](https://github.com/NeevCohen)
        in [#9287](https://github.com/pydantic/pydantic/pull/9287)* Support multiple
        zeros as an `int` by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/pydantic-core#1269](https://github.com/pydantic/pydantic-core/pull/1269)*
        Fix validation of `int`s with leading unary plus by [@cknv](https://github.com/cknv)
        in [pydantic/pydantic-core#1272](https://github.com/pydantic/pydantic-core/pull/1272)*
        Fix interaction between `extra != 'ignore'` and `from_attributes=True` by
        [@davidhewitt](https://github.com/davidhewitt) in [pydantic/pydantic-core#1276](https://github.com/pydantic/pydantic-core/pull/1276)*
        Handle error from `Enum`'s `missing` function as `ValidationError` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1274](https://github.com/pydantic/pydantic-core/pull/1754)*
        Fix memory leak with `Iterable` validation by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1271](https://github.com/pydantic/pydantic-core/pull/1751)###
        New Contributors* [@zzstoatzz](https://github.com/zzstoatzz) made their first
        contribution in [#9219](https://github.com/pydantic/pydantic/pull/9219)* [@frost-nzcr4](https://github.com/frost-nzcr4)
        made their first contribution in [#9232](https://github.com/pydantic/pydantic/pull/9232)*
        [@CherrySuryp](https://github.com/CherrySuryp) made their first contribution
        in [#9205](https://github.com/pydantic/pydantic/pull/9205)* [@vagenas](https://github.com/vagenas)
        made their first contribution in [#9268](https://github.com/pydantic/pydantic/pull/9268)*
        [@ollz272](https://github.com/ollz272) made their first contribution in [#9262](https://github.com/pydantic/pydantic/pull/9262)*
        [@babygrimes](https://github.com/babygrimes) made their first contribution
        in [#9168](https://github.com/pydantic/pydantic/pull/9168)* [@swelborn](https://github.com/swelborn)
        made their first contribution in [#9296](https://github.com/pydantic/pydantic/pull/9296)*
        [@kf-novi](https://github.com/kf-novi) made their first contribution in [#9236](https://github.com/pydantic/pydantic/pull/9236)*
        [@lgeiger](https://github.com/lgeiger) made their first contribution in [#9288](https://github.com/pydantic/pydantic/pull/9288)##
        v2.7.0 (2024-04-11)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0)The
        code released in v2.7.0 is practically identical to that of v2.7.0b1.### What's
        Changed#### Packaging* Reorganize `pyproject.toml` sections by [@Viicos](https://github.com/Viicos)
        in [#8899](https://github.com/pydantic/pydantic/pull/8899)* Bump `pydantic-core`
        to `v2.18.1` by [@sydney-runkle](https://github.com/sydney-runkle) in [#9211](https://github.com/pydantic/pydantic/pull/9211)*
        Adopt `jiter` `v0.2.0` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1250](https://github.com/pydantic/pydantic-core/pull/1250)####
        New Features* Extract attribute docstrings from `FieldInfo.description` by
        [@Viicos](https://github.com/Viicos) in [#6563](https://github.com/pydantic/pydantic/pull/6563)*
        Add a `with_config` decorator to comply with typing spec by [@Viicos](https://github.com/Viicos)
        in [#8611](https://github.com/pydantic/pydantic/pull/8611)* Allow an optional
        separator splitting the value and unit of the result of `ByteSize.human_readable`
        by [@jks15satoshi](https://github.com/jks15satoshi) in [#8706](https://github.com/pydantic/pydantic/pull/8706)*
        Add generic `Secret` base type by [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        in [#8519](https://github.com/pydantic/pydantic/pull/8519)* Make use of `Sphinx`
        inventories for cross references in docs by [@Viicos](https://github.com/Viicos)
        in [#8682](https://github.com/pydantic/pydantic/pull/8682)* Add environment
        variable to disable plugins by [@geospackle](https://github.com/geospackle)
        in [#8767](https://github.com/pydantic/pydantic/pull/8767)* Add support for
        `deprecated` fields by [@Viicos](https://github.com/Viicos) in [#8237](https://github.com/pydantic/pydantic/pull/8237)*
        Allow `field_serializer('*')` by [@ornariece](https://github.com/ornariece)
        in [#9001](https://github.com/pydantic/pydantic/pull/9001)* Handle a case
        when `model_config` is defined as a model property by [@alexeyt101](https://github.com/alexeyt101)
        in [#9004](https://github.com/pydantic/pydantic/pull/9004)* Update `create_model()`
        to support `typing.Annotated` as input by [@wannieman98](https://github.com/wannieman98)
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* Add `ClickhouseDsn`
        support by [@solidguy7](https://github.com/solidguy7) in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        Add support for `re.Pattern[str]` to `pattern` field by [@jag-k](https://github.com/jag-k)
        in [#9053](https://github.com/pydantic/pydantic/pull/9053)* Support for `serialize_as_any`
        runtime setting by [@sydney-runkle](https://github.com/sydney-runkle) in [#8830](https://github.com/pydantic/pydantic/pull/8830)*
        Add support for `typing.Self` by [@Youssefares](https://github.com/Youssefares)
        in [#9023](https://github.com/pydantic/pydantic/pull/9023)* Ability to pass
        `context` to serialization by [@ornariece](https://github.com/ornariece) in
        [#8965](https://github.com/pydantic/pydantic/pull/8965)* Add feedback widget
        to docs with flarelytics integration by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9129](https://github.com/pydantic/pydantic/pull/9129)* Support for parsing
        partial JSON strings in Python by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/jiter#66](https://github.com/pydantic/jiter/pull/66)**Finalized
        in v2.7.0, rather than v2.7.0b1:*** Add support for field level number to
        str coercion option by [@NeevCohen](https://github.com/NeevCohen) in [#9137](https://github.com/pydantic/pydantic/pull/9137)*
        Update `warnings` parameter for serialization utilities to allow raising a
        warning by [@Lance-Drane](https://github.com/Lance-Drane) in [#9166](https://github.com/pydantic/pydantic/pull/9166)####
        Changes* Correct docs, logic for `model_construct` behavior with `extra` by
        [@sydney-runkle](https://github.com/sydney-runkle) in [#8807](https://github.com/pydantic/pydantic/pull/8807)*
        Improve error message for improper `RootModel` subclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8857](https://github.com/pydantic/pydantic/pull/8857)* Use `PEP570` syntax
        by [@Viicos](https://github.com/Viicos) in [#8940](https://github.com/pydantic/pydantic/pull/8940)*
        Add `enum` and `type` to the JSON schema for single item literals by [@dmontagu](https://github.com/dmontagu)
        in [#8944](https://github.com/pydantic/pydantic/pull/8944)* Deprecate `update_json_schema`
        internal function by [@sydney-runkle](https://github.com/sydney-runkle) in
        [#9125](https://github.com/pydantic/pydantic/pull/9125)* Serialize duration
        to hour minute second, instead of just seconds by [@kakilangit](https://github.com/kakilangit)
        in [pydantic/speedate#50](https://github.com/pydantic/speedate/pull/50)* Trimming
        str before parsing to int and float by [@hungtsetse](https://github.com/hungtsetse)
        in [pydantic/pydantic-core#1203](https://github.com/pydantic/pydantic-core/pull/1203)####
        Performance* `enum` validator improvements by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9045](https://github.com/pydantic/pydantic/pull/9045)* Move `enum` validation
        and serialization to Rust by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9064](https://github.com/pydantic/pydantic/pull/9064)* Improve schema
        generation for nested dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9114](https://github.com/pydantic/pydantic/pull/9114)* Fast path for
        ASCII python string creation in JSON by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#72](https://github.com/pydantic/jiter/pull/72)* SIMD
        integer and string JSON parsing on `aarch64`(**Note:** SIMD on x86 will be
        implemented in a future release) by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#65](https://github.com/pydantic/jiter/pull/65)* Support
        JSON `Cow<str>` from `jiter` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1231](https://github.com/pydantic/pydantic-core/pull/1231)*
        MAJOR performance improvement: update to PyO3 0.21 final by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1248](https://github.com/pydantic/pydantic-core/pull/1248)*
        cache Python strings by [@samuelcolvin](https://github.com/samuelcolvin) in
        [pydantic/pydantic-core#1240](https://github.com/pydantic/pydantic-core/pull/1240)####
        Fixes* Fix strict parsing for some `Sequence`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8614](https://github.com/pydantic/pydantic/pull/8614)* Add a check on
        the existence of `__qualname__` by [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        in [#8642](https://github.com/pydantic/pydantic/pull/8642)* Handle `__pydantic_extra__`
        annotation being a string or inherited by [@alexmojaki](https://github.com/alexmojaki)
        in [#8659](https://github.com/pydantic/pydantic/pull/8659)* Fix json validation
        for `NameEmail` by [@Holi0317](https://github.com/Holi0317) in [#8650](https://github.com/pydantic/pydantic/pull/8650)*
        Fix type-safety of attribute access in `BaseModel` by [@bluenote10](https://github.com/bluenote10)
        in [#8651](https://github.com/pydantic/pydantic/pull/8651)* Fix bug with `mypy`
        plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with plain validator by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* fixes `__pydantic_config__`
        ignored for TypeDict by [@13sin](https://github.com/13sin) in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        Fix test failures with `pytest v8.0.0` due to `pytest.warns()` starting to
        work inside `pytest.raises()` by [@mgorny](https://github.com/mgorny) in [#8678](https://github.com/pydantic/pydantic/pull/8678)*
        Use `is_valid_field` from 1.x for `mypy` plugin by [@DanielNoord](https://github.com/DanielNoord)
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* Better-support
        `mypy` strict equality flag by [@dmontagu](https://github.com/dmontagu) in
        [#8799](https://github.com/pydantic/pydantic/pull/8799)* model_json_schema
        export with Annotated types misses 'required' parameters by [@LouisGobert](https://github.com/LouisGobert)
        in [#8793](https://github.com/pydantic/pydantic/pull/8793)* Fix default inclusion
        in `FieldInfo.__repr_args__` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8801](https://github.com/pydantic/pydantic/pull/8801)* Fix resolution
        of forward refs in dataclass base classes that are not present in the subclass
        module namespace by [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn)
        in [#8751](https://github.com/pydantic/pydantic/pull/8751)* Fix `BaseModel`
        type annotations to be resolvable by `typing.get_type_hints` by [@devmonkey22](https://github.com/devmonkey22)
        in [#7680](https://github.com/pydantic/pydantic/pull/7680)* Fix: allow empty
        string aliases with `AliasGenerator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8810](https://github.com/pydantic/pydantic/pull/8810)* Fix test along
        with `date` -> `datetime` timezone assumption fix by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8823](https://github.com/pydantic/pydantic/pull/8823)* Fix deprecation
        warning with usage of `ast.Str` by [@Viicos](https://github.com/Viicos) in
        [#8837](https://github.com/pydantic/pydantic/pull/8837)* Add missing `deprecated`
        decorators by [@Viicos](https://github.com/Viicos) in [#8877](https://github.com/pydantic/pydantic/pull/8877)*
        Fix serialization of `NameEmail` if name includes an email address by [@NeevCohen](https://github.com/NeevCohen)
        in [#8860](https://github.com/pydantic/pydantic/pull/8860)* Add information
        about class in error message of schema generation by [@Czaki](https://github.com/Czaki)
        in [#8917](https://github.com/pydantic/pydantic/pull/8917)* Make `TypeAdapter`'s
        typing compatible with special forms by [@adriangb](https://github.com/adriangb)
        in [#8923](https://github.com/pydantic/pydantic/pull/8923)* Fix issue with
        config behavior being baked into the ref schema for `enum`s by [@dmontagu](https://github.com/dmontagu)
        in [#8920](https://github.com/pydantic/pydantic/pull/8920)* More helpful error
        re wrong `model_json_schema` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8928](https://github.com/pydantic/pydantic/pull/8928)* Fix nested discriminated
        union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix schema build
        for nested dataclasses / TypedDicts with discriminators by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8950](https://github.com/pydantic/pydantic/pull/8950)* Remove unnecessary
        logic for definitions schema gen with discriminated unions by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8951](https://github.com/pydantic/pydantic/pull/8951)* Fix handling of
        optionals in `mypy` plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9008](https://github.com/pydantic/pydantic/pull/9008)* Fix `PlainSerializer`
        usage with std type constructor by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9031](https://github.com/pydantic/pydantic/pull/9031)* Remove unnecessary
        warning for config in plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9039](https://github.com/pydantic/pydantic/pull/9039)* Fix default value
        serializing by [@NeevCohen](https://github.com/NeevCohen) in [#9066](https://github.com/pydantic/pydantic/pull/9066)*
        Fix extra fields check in `Model.__getattr__()` by [@NeevCohen](https://github.com/NeevCohen)
        in [#9082](https://github.com/pydantic/pydantic/pull/9082)* Fix `ClassVar`
        forward ref inherited from parent class by [@alexmojaki](https://github.com/alexmojaki)
        in [#9097](https://github.com/pydantic/pydantic/pull/9097)* fix sequence like
        validator with strict `True` by [@andresliszt](https://github.com/andresliszt)
        in [#8977](https://github.com/pydantic/pydantic/pull/8977)* Improve warning
        message when a field name shadows a field in a parent model by [@chan-vince](https://github.com/chan-vince)
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* Do not warn about
        shadowed fields if they are not redefined in a child class by [@chan-vince](https://github.com/chan-vince)
        in [#9111](https://github.com/pydantic/pydantic/pull/9111)* Fix discriminated
        union bug with unsubstituted type var by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9124](https://github.com/pydantic/pydantic/pull/9124)* Support serialization
        of `deque` when passed to `Sequence[blah blah blah]` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9128](https://github.com/pydantic/pydantic/pull/9128)* Init private attributes
        from super-types in `model_post_init` by [@Viicos](https://github.com/Viicos)
        in [#9134](https://github.com/pydantic/pydantic/pull/9134)* fix `model_construct`
        with `validation_alias` by [@ornariece](https://github.com/ornariece) in [#9144](https://github.com/pydantic/pydantic/pull/9144)*
        Ensure json-schema generator handles `Literal` `null` types by [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        in [#9135](https://github.com/pydantic/pydantic/pull/9135)* **Fixed in v2.7.0**:
        Fix allow extra generic by [@dmontagu](https://github.com/dmontagu) in [#9193](https://github.com/pydantic/pydantic/pull/9193)###
        New Contributors* [@hungtsetse](https://github.com/hungtsetse) made their
        first contribution in [#8546](https://github.com/pydantic/pydantic/pull/8546)*
        [@StrawHatDrag0n](https://github.com/StrawHatDrag0n) made their first contribution
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)* [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        made their first contribution in [#8642](https://github.com/pydantic/pydantic/pull/8642)*
        [@Holi0317](https://github.com/Holi0317) made their first contribution in
        [#8650](https://github.com/pydantic/pydantic/pull/8650)* [@bluenote10](https://github.com/bluenote10)
        made their first contribution in [#8651](https://github.com/pydantic/pydantic/pull/8651)*
        [@ADSteele916](https://github.com/ADSteele916) made their first contribution
        in [#8703](https://github.com/pydantic/pydantic/pull/8703)* [@musicinmybrain](https://github.com/musicinmybrain)
        made their first contribution in [#8731](https://github.com/pydantic/pydantic/pull/8731)*
        [@jks15satoshi](https://github.com/jks15satoshi) made their first contribution
        in [#8706](https://github.com/pydantic/pydantic/pull/8706)* [@13sin](https://github.com/13sin)
        made their first contribution in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        [@DanielNoord](https://github.com/DanielNoord) made their first contribution
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        made their first contribution in [#8519](https://github.com/pydantic/pydantic/pull/8519)*
        [@chris-griffin](https://github.com/chris-griffin) made their first contribution
        in [#8775](https://github.com/pydantic/pydantic/pull/8775)* [@LouisGobert](https://github.com/LouisGobert)
        made their first contribution in [#8793](https://github.com/pydantic/pydantic/pull/8793)*
        [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn) made their first
        contribution in [#8751](https://github.com/pydantic/pydantic/pull/8751)* [@devmonkey22](https://github.com/devmonkey22)
        made their first contribution in [#7680](https://github.com/pydantic/pydantic/pull/7680)*
        [@adamency](https://github.com/adamency) made their first contribution in
        [#8847](https://github.com/pydantic/pydantic/pull/8847)* [@MamfTheKramf](https://github.com/MamfTheKramf)
        made their first contribution in [#8851](https://github.com/pydantic/pydantic/pull/8851)*
        [@ornariece](https://github.com/ornariece) made their first contribution in
        [#9001](https://github.com/pydantic/pydantic/pull/9001)* [@alexeyt101](https://github.com/alexeyt101)
        made their first contribution in [#9004](https://github.com/pydantic/pydantic/pull/9004)*
        [@wannieman98](https://github.com/wannieman98) made their first contribution
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* [@solidguy7](https://github.com/solidguy7)
        made their first contribution in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        [@kloczek](https://github.com/kloczek) made their first contribution in [#9047](https://github.com/pydantic/pydantic/pull/9047)*
        [@jag-k](https://github.com/jag-k) made their first contribution in [#9053](https://github.com/pydantic/pydantic/pull/9053)*
        [@priya-gitTest](https://github.com/priya-gitTest) made their first contribution
        in [#9088](https://github.com/pydantic/pydantic/pull/9088)* [@Youssefares](https://github.com/Youssefares)
        made their first contribution in [#9023](https://github.com/pydantic/pydantic/pull/9023)*
        [@chan-vince](https://github.com/chan-vince) made their first contribution
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        made their first contribution in [#9135](https://github.com/pydantic/pydantic/pull/9135)*
        [@Lance-Drane](https://github.com/Lance-Drane) made their first contribution
        in [#9166](https://github.com/pydantic/pydantic/pull/9166)## v2.7.0b1 (2024-04-03)Pre-release,
        see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0b1)
        for details.## v2.6.4 (2024-03-12)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.4)###
        What's Changed#### Fixes* Fix usage of `AliasGenerator` with `computed_field`
        decorator by [@sydney-runkle](https://github.com/sydney-runkle) in [#8806](https://github.com/pydantic/pydantic/pull/8806)*
        Fix nested discriminated union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix bug with no_strict_optional=True
        caused by API deferral by [@dmontagu](https://github.com/dmontagu) in [#8826](https://github.com/pydantic/pydantic/pull/8826)##
        v2.6.3 (2024-02-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.3)###
        What's Changed#### Packaging* Update `pydantic-settings` version in the docs
        by [@hramezani](https://github.com/hramezani) in [#8906](https://github.com/pydantic/pydantic/pull/8906)####
        Fixes* Fix discriminated union schema gen bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8904](https://github.com/pydantic/pydantic/pull/8904)## v2.6.2 (2024-02-23)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.6.2)### What's
        Changed#### Packaging* Upgrade to `pydantic-core` 2.16.3 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8879](https://github.com/pydantic/pydantic/pull/8879)#### Fixes* 'YYYY-MM-DD'
        date string coerced to datetime shouldn't infer timezone by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1193](https://github.com/pydantic/pydantic-core/pull/1193)##
        v2.6.1 (2024-02-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.1)###
        What's Changed#### Packaging* Upgrade to `pydantic-core` 2.16.2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8717](https://github.com/pydantic/pydantic/pull/8717)#### Fixes* Fix
        bug with `mypy` plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        `Field` annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with `PlainValidator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* Fix warning for
        tuple of wrong size in `Union` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1174](https://github.com/pydantic/pydantic-core/pull/1174)*
        Fix `computed_field` JSON serializer `exclude_none` behavior by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1187](https://github.com/pydantic/pydantic-core/pull/1187)##
        v2.6.0 (2024-01-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0)The
        code released in v2.6.0 is practically identical to that of v2.6.0b1.### What's
        Changed#### Packaging* Check for `email-validator` version >= 2.0 by [@commonism](https://github.com/commonism)
        in [#6033](https://github.com/pydantic/pydantic/pull/6033)* Upgrade `ruff``
        target version to Python 3.8 by [@Elkiwa](https://github.com/Elkiwa) in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        Update to `pydantic-extra-types==2.4.1` by [@yezz123](https://github.com/yezz123)
        in [#8478](https://github.com/pydantic/pydantic/pull/8478)* Update to `pyright==1.1.345`
        by [@Viicos](https://github.com/Viicos) in [#8453](https://github.com/pydantic/pydantic/pull/8453)*
        Update pydantic-core from 2.14.6 to 2.16.1, significant changes from these
        updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.14.6...v2.16.1)####
        New Features* Add `NatsDsn` by [@ekeew](https://github.com/ekeew) in [#6874](https://github.com/pydantic/pydantic/pull/6874)*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)* Add `types.OnErrorOmit`
        by [@adriangb](https://github.com/adriangb) in [#8222](https://github.com/pydantic/pydantic/pull/8222)*
        Support `AliasGenerator` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8282](https://github.com/pydantic/pydantic/pull/8282)* Add Pydantic People
        Page to docs by [@sydney-runkle](https://github.com/sydney-runkle) in [#8345](https://github.com/pydantic/pydantic/pull/8345)*
        Support `yyyy-MM-DD` datetime parsing by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8404](https://github.com/pydantic/pydantic/pull/8404)* Added bits conversions
        to the `ByteSize` class [#8415](https://github.com/pydantic/pydantic/issues/8415)
        by [@luca-matei](https://github.com/luca-matei) in [#8507](https://github.com/pydantic/pydantic/pull/8507)*
        Enable json schema creation with type `ByteSize` by [@geospackle](https://github.com/geospackle)
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* Add `eval_type_backport`
        to handle union operator and builtin generic subscripting in older Pythons
        by [@alexmojaki](https://github.com/alexmojaki) in [#8209](https://github.com/pydantic/pydantic/pull/8209)*
        Add support for `dataclass` fields `init` by [@dmontagu](https://github.com/dmontagu)
        in [#8552](https://github.com/pydantic/pydantic/pull/8552)* Implement pickling
        for `ValidationError` by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1119](https://github.com/pydantic/pydantic-core/pull/1119)*
        Add unified tuple validator that can handle \"variadic\" tuples via PEP-646
        by [@dmontagu](https://github.com/dmontagu) in [pydantic/pydantic-core#865](https://github.com/pydantic/pydantic-core/pull/865)####
        Changes* Drop Python3.7 support by [@hramezani](https://github.com/hramezani)
        in [#7188](https://github.com/pydantic/pydantic/pull/7188)* Drop Python 3.7,
        and PyPy 3.7 and 3.8 by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1129](https://github.com/pydantic/pydantic-core/pull/1129)*
        Use positional-only `self` in `BaseModel` constructor, so no field name can
        ever conflict with it by [@ariebovenberg](https://github.com/ariebovenberg)
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* Make `@validate_call`
        return a function instead of a custom descriptor - fixes binding issue with
        inheritance and adds `self/cls` argument to validation errors by [@alexmojaki](https://github.com/alexmojaki)
        in [#8268](https://github.com/pydantic/pydantic/pull/8268)* Exclude `BaseModel`
        docstring from JSON schema description by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8352](https://github.com/pydantic/pydantic/pull/8352)* Introducing `classproperty`
        decorator for `model_computed_fields` by [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        in [#8437](https://github.com/pydantic/pydantic/pull/8437)* Explicitly raise
        an error if field names clashes with types by [@Viicos](https://github.com/Viicos)
        in [#8243](https://github.com/pydantic/pydantic/pull/8243)* Use stricter serializer
        for unions of simple types by [@alexdrydew](https://github.com/alexdrydew)
        [pydantic/pydantic-core#1132](https://github.com/pydantic/pydantic-core/pull/1132)####
        Performance* Add Codspeed profiling Actions workflow  by [@lambertsbennett](https://github.com/lambertsbennett)
        in [#8054](https://github.com/pydantic/pydantic/pull/8054)* Improve `int`
        extraction by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/pydantic-core#1155](https://github.com/pydantic/pydantic-core/pull/1155)*
        Improve performance of recursion guard by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1156](https://github.com/pydantic/pydantic-core/pull/1156)*
        `dataclass` serialization speedups by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1162](https://github.com/pydantic/pydantic-core/pull/1162)*
        Avoid `HashMap` creation when looking up small JSON objects in `LazyIndexMaps`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/jiter#55](https://github.com/pydantic/jiter/pull/55)*
        use hashbrown to speedup python string caching by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#51](https://github.com/pydantic/jiter/pull/51)* Replace
        `Peak` with more efficient `Peek` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#48](https://github.com/pydantic/jiter/pull/48)#### Fixes*
        Move `getattr` warning in deprecated `BaseConfig` by [@tlambert03](https://github.com/tlambert03)
        in [#7183](https://github.com/pydantic/pydantic/pull/7183)* Only hash `model_fields`,
        not whole `__dict__` by [@alexmojaki](https://github.com/alexmojaki) in [#7786](https://github.com/pydantic/pydantic/pull/7786)*
        Fix mishandling of unions while freezing types in the `mypy` plugin by [@dmontagu](https://github.com/dmontagu)
        in [#7411](https://github.com/pydantic/pydantic/pull/7411)* Fix `mypy` error
        on untyped `ClassVar` by [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx)
        in [#8138](https://github.com/pydantic/pydantic/pull/8138)* Only compare pydantic
        fields in `BaseModel.__eq__` instead of whole `__dict__` by [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        in [#7825](https://github.com/pydantic/pydantic/pull/7825)* Update `strict`
        docstring in `model_validate` method. by [@LukeTonin](https://github.com/LukeTonin)
        in [#8223](https://github.com/pydantic/pydantic/pull/8223)* Fix overload position
        of `computed_field` by [@Viicos](https://github.com/Viicos) in [#8227](https://github.com/pydantic/pydantic/pull/8227)*
        Fix custom type type casting used in multiple attributes by [@ianhfc](https://github.com/ianhfc)
        in [#8066](https://github.com/pydantic/pydantic/pull/8066)* Fix issue not
        allowing `validate_call` decorator to be dynamically assigned to a class method
        by [@jusexton](https://github.com/jusexton) in [#8249](https://github.com/pydantic/pydantic/pull/8249)*
        Fix issue `unittest.mock` deprecation warnings  by [@ibleedicare](https://github.com/ibleedicare)
        in [#8262](https://github.com/pydantic/pydantic/pull/8262)* Added tests for
        the case `JsonValue` contains subclassed primitive values by [@jusexton](https://github.com/jusexton)
        in [#8286](https://github.com/pydantic/pydantic/pull/8286)* Fix `mypy` error
        on free before validator (classmethod) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8285](https://github.com/pydantic/pydantic/pull/8285)* Fix `to_snake`
        conversion by [@jevins09](https://github.com/jevins09) in [#8316](https://github.com/pydantic/pydantic/pull/8316)*
        Fix type annotation of `ModelMetaclass.__prepare__` by [@slanzmich](https://github.com/slanzmich)
        in [#8305](https://github.com/pydantic/pydantic/pull/8305)* Disallow `config`
        specification when initializing a `TypeAdapter` when the annotated type has
        config already by [@sydney-runkle](https://github.com/sydney-runkle) in [#8365](https://github.com/pydantic/pydantic/pull/8365)*
        Fix a naming issue with JSON schema for generics parametrized by recursive
        type aliases by [@dmontagu](https://github.com/dmontagu) in [#8389](https://github.com/pydantic/pydantic/pull/8389)*
        Fix type annotation in pydantic people script by [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        in [#8402](https://github.com/pydantic/pydantic/pull/8402)* Add support for
        field `alias` in `dataclass` signature by [@NeevCohen](https://github.com/NeevCohen)
        in [#8387](https://github.com/pydantic/pydantic/pull/8387)* Fix bug with schema
        generation with `Field(...)` in a forward ref by [@dmontagu](https://github.com/dmontagu)
        in [#8494](https://github.com/pydantic/pydantic/pull/8494)* Fix ordering of
        keys in `__dict__` with `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8500](https://github.com/pydantic/pydantic/pull/8500)* Fix module `path_type`
        creation when globals does not contain `__name__` by [@hramezani](https://github.com/hramezani)
        in [#8470](https://github.com/pydantic/pydantic/pull/8470)* Fix for namespace
        issue with dataclasses with `from __future__ import annotations` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8513](https://github.com/pydantic/pydantic/pull/8513)* Fix: make function
        validator types positional-only by [@pmmmwh](https://github.com/pmmmwh) in
        [#8479](https://github.com/pydantic/pydantic/pull/8479)* Fix usage of `@deprecated`
        by [@Viicos](https://github.com/Viicos) in [#8294](https://github.com/pydantic/pydantic/pull/8294)*
        Add more support for private attributes in `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8525](https://github.com/pydantic/pydantic/pull/8525)* Use a stack for
        the types namespace by [@dmontagu](https://github.com/dmontagu) in [#8378](https://github.com/pydantic/pydantic/pull/8378)*
        Fix schema-building bug with `TypeAliasType` for types with refs by [@dmontagu](https://github.com/dmontagu)
        in [#8526](https://github.com/pydantic/pydantic/pull/8526)* Support `pydantic.Field(repr=False)`
        in dataclasses by [@tigeryy2](https://github.com/tigeryy2) in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        Override `dataclass_transform` behavior for `RootModel` by [@Viicos](https://github.com/Viicos)
        in [#8163](https://github.com/pydantic/pydantic/pull/8163)* Refactor signature
        generation for simplicity by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8572](https://github.com/pydantic/pydantic/pull/8572)* Fix ordering bug
        of PlainValidator annotation by [@Anvil](https://github.com/Anvil) in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        Fix `exclude_none` for json serialization of `computed_field`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1098](https://github.com/pydantic/pydantic-core/pull/1098)*
        Support yyyy-MM-DD string for datetimes by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1124](https://github.com/pydantic/pydantic-core/pull/1124)*
        Tweak ordering of definitions in generated schemas by [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)### New Contributors####
        `pydantic`* [@ekeew](https://github.com/ekeew) made their first contribution
        in [#6874](https://github.com/pydantic/pydantic/pull/6874)* [@lambertsbennett](https://github.com/lambertsbennett)
        made their first contribution in [#8054](https://github.com/pydantic/pydantic/pull/8054)*
        [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx) made their first
        contribution in [#8138](https://github.com/pydantic/pydantic/pull/8138)* [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        made their first contribution in [#7825](https://github.com/pydantic/pydantic/pull/7825)*
        [@ariebovenberg](https://github.com/ariebovenberg) made their first contribution
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* [@LukeTonin](https://github.com/LukeTonin)
        made their first contribution in [#8223](https://github.com/pydantic/pydantic/pull/8223)*
        [@denisart](https://github.com/denisart) made their first contribution in
        [#8231](https://github.com/pydantic/pydantic/pull/8231)* [@ianhfc](https://github.com/ianhfc)
        made their first contribution in [#8066](https://github.com/pydantic/pydantic/pull/8066)*
        [@eonu](https://github.com/eonu) made their first contribution in [#8255](https://github.com/pydantic/pydantic/pull/8255)*
        [@amandahla](https://github.com/amandahla) made their first contribution in
        [#8263](https://github.com/pydantic/pydantic/pull/8263)* [@ibleedicare](https://github.com/ibleedicare)
        made their first contribution in [#8262](https://github.com/pydantic/pydantic/pull/8262)*
        [@jevins09](https://github.com/jevins09) made their first contribution in
        [#8316](https://github.com/pydantic/pydantic/pull/8316)* [@cuu508](https://github.com/cuu508)
        made their first contribution in [#8322](https://github.com/pydantic/pydantic/pull/8322)*
        [@slanzmich](https://github.com/slanzmich) made their first contribution in
        [#8305](https://github.com/pydantic/pydantic/pull/8305)* [@jensenbox](https://github.com/jensenbox)
        made their first contribution in [#8331](https://github.com/pydantic/pydantic/pull/8331)*
        [@szepeviktor](https://github.com/szepeviktor) made their first contribution
        in [#8356](https://github.com/pydantic/pydantic/pull/8356)* [@Elkiwa](https://github.com/Elkiwa)
        made their first contribution in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        [@parhamfh](https://github.com/parhamfh) made their first contribution in
        [#8395](https://github.com/pydantic/pydantic/pull/8395)* [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        made their first contribution in [#8402](https://github.com/pydantic/pydantic/pull/8402)*
        [@NeevCohen](https://github.com/NeevCohen) made their first contribution in
        [#8387](https://github.com/pydantic/pydantic/pull/8387)* [@zby](https://github.com/zby)
        made their first contribution in [#8497](https://github.com/pydantic/pydantic/pull/8497)*
        [@patelnets](https://github.com/patelnets) made their first contribution in
        [#8491](https://github.com/pydantic/pydantic/pull/8491)* [@edwardwli](https://github.com/edwardwli)
        made their first contribution in [#8503](https://github.com/pydantic/pydantic/pull/8503)*
        [@luca-matei](https://github.com/luca-matei) made their first contribution
        in [#8507](https://github.com/pydantic/pydantic/pull/8507)* [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        made their first contribution in [#8437](https://github.com/pydantic/pydantic/pull/8437)*
        [@bL34cHig0](https://github.com/bL34cHig0) made their first contribution in
        [#8501](https://github.com/pydantic/pydantic/pull/8501)* [@tigeryy2](https://github.com/tigeryy2)
        made their first contribution in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        [@geospackle](https://github.com/geospackle) made their first contribution
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* [@Anvil](https://github.com/Anvil)
        made their first contribution in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        [@hungtsetse](https://github.com/hungtsetse) made their first contribution
        in [#8546](https://github.com/pydantic/pydantic/pull/8546)* [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        made their first contribution in [#8583](https://github.com/pydantic/pydantic/pull/8583)####
        `pydantic-core`* [@mariuswinger](https://github.com/mariuswinger) made their
        first contribution in [pydantic/pydantic-core#1087](https://github.com/pydantic/pydantic-core/pull/1087)*
        [@adamchainz](https://github.com/adamchainz) made their first contribution
        in [pydantic/pydantic-core#1090](https://github.com/pydantic/pydantic-core/pull/1090)*
        [@akx](https://github.com/akx) made their first contribution in [pydantic/pydantic-core#1123](https://github.com/pydantic/pydantic-core/pull/1123)##
        v2.6.0b1 (2024-01-19)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0b1)
        for details.## v2.5.3 (2023-12-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.3)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.6#### Fixes* Fix
        memory leak with recursive definitions creating reference cycles by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1125](https://github.com/pydantic/pydantic-core/pull/1125)##
        v2.5.2 (2023-11-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.2)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.5#### New Features*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)#### Fixes* Fix
        validation of `Literal` from JSON keys when used as `dict` key by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1075](https://github.com/pydantic/pydantic-core/pull/1075)*
        Fix bug re `custom_init` on members of `Union` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1076](https://github.com/pydantic/pydantic-core/pull/1076)*
        Fix `JsonValue` `bool` serialization by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8190](https://github.com/pydantic/pydantic/pull/8159)* Fix handling of
        unhashable inputs with `Literal` in `Union`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1089](https://github.com/pydantic/pydantic-core/pull/1089)##
        v2.5.1 (2023-11-15)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.1)###
        What's Changed#### Packaging* uprev pydantic-core to 2.14.3 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8120](https://github.com/pydantic/pydantic/pull/8120)#### Fixes* Fix
        package description limit by [@dmontagu](https://github.com/dmontagu) in [#8097](https://github.com/pydantic/pydantic/pull/8097)*
        Fix `ValidateCallWrapper` error when creating a model which has a [@validate_call](https://github.com/validate_call)
        wrapped field annotation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8110](https://github.com/pydantic/pydantic/pull/8110)## v2.5.0 (2023-11-13)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0)The code
        released in v2.5.0 is functionally identical to that of v2.5.0b1.### What's
        Changed#### Packaging* Update pydantic-core from 2.10.1 to 2.14.1, significant
        changes from these updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.10.1...v2.14.1)*
        Update to `pyright==1.1.335` by [@Viicos](https://github.com/Viicos) in [#8075](https://github.com/pydantic/pydantic/pull/8075)####
        New Features* Allow plugins to catch non `ValidationError` errors by [@adriangb](https://github.com/adriangb)
        in [#7806](https://github.com/pydantic/pydantic/pull/7806)* Support `__doc__`
        argument in `create_model()` by [@chris-spann](https://github.com/chris-spann)
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* Expose `regex_engine`
        flag - meaning you can use with the Rust or Python regex libraries in constraints
        by [@utkini](https://github.com/utkini) in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        Save return type generated from type annotation in `ComputedFieldInfo` by
        [@alexmojaki](https://github.com/alexmojaki) in [#7889](https://github.com/pydantic/pydantic/pull/7889)*
        Adopting `ruff` formatter by [@Luca-Blight](https://github.com/Luca-Blight)
        in [#7930](https://github.com/pydantic/pydantic/pull/7930)* Added `validation_error_cause`
        to config by [@zakstucke](https://github.com/zakstucke) in [#7626](https://github.com/pydantic/pydantic/pull/7626)*
        Make path of the item to validate available in plugin by [@hramezani](https://github.com/hramezani)
        in [#7861](https://github.com/pydantic/pydantic/pull/7861)* Add `CallableDiscriminator`
        and `Tag` by [@dmontagu](https://github.com/dmontagu) in [#7983](https://github.com/pydantic/pydantic/pull/7983)
        \ * `CallableDiscriminator` renamed to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Make union case
        tags affect union error messages by [@dmontagu](https://github.com/dmontagu)
        in [#8001](https://github.com/pydantic/pydantic/pull/8001)* Add `examples`
        and `json_schema_extra` to `@computed_field` by [@alexmojaki](https://github.com/alexmojaki)
        in [#8013](https://github.com/pydantic/pydantic/pull/8013)* Add `JsonValue`
        type by [@dmontagu](https://github.com/dmontagu) in [#7998](https://github.com/pydantic/pydantic/pull/7998)*
        Allow `str` as argument to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Add `SchemaSerializer.__reduce__`
        method to enable pickle serialization by [@edoakes](https://github.com/edoakes)
        in [pydantic/pydantic-core#1006](https://github.com/pydantic/pydantic-core/pull/1006)####
        Changes* **Significant Change:** replace `ultra_strict` with new smart union
        implementation, the way unions are validated has changed significantly to
        improve performance and correctness, we have worked hard to absolutely minimise
        the number of cases where behaviour has changed, see the PR for details -
        by [@davidhewitt](https://github.com/davidhewitt) in [pydantic/pydantic-core#867](https://github.com/pydantic/pydantic-core/pull/867)*
        Add support for instance method reassignment when `extra='allow'` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7683](https://github.com/pydantic/pydantic/pull/7683)* Support JSON schema
        generation for `Enum` types with no cases by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7927](https://github.com/pydantic/pydantic/pull/7927)* Warn if a class
        inherits from `Generic` before `BaseModel` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7891](https://github.com/pydantic/pydantic/pull/7891)#### Performance*
        New custom JSON parser, `jiter` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#974](https://github.com/pydantic/pydantic-core/pull/974)*
        PGO build for MacOS M1 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1063](https://github.com/pydantic/pydantic-core/pull/1063)*
        Use `__getattr__` for all package imports, improve import time by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7947](https://github.com/pydantic/pydantic/pull/7947)#### Fixes* Fix
        `mypy` issue with subclasses of `RootModel` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7677](https://github.com/pydantic/pydantic/pull/7677)* Properly rebuild
        the `FieldInfo` when a forward ref gets evaluated by [@dmontagu](https://github.com/dmontagu)
        in [#7698](https://github.com/pydantic/pydantic/pull/7698)* Fix failure to
        load `SecretStr` from JSON (regression in v2.4) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7729](https://github.com/pydantic/pydantic/pull/7729)* Fix `defer_build`
        behavior with `TypeAdapter` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7736](https://github.com/pydantic/pydantic/pull/7736)* Improve compatibility
        with legacy `mypy` versions by [@dmontagu](https://github.com/dmontagu) in
        [#7742](https://github.com/pydantic/pydantic/pull/7742)* Fix: update `TypeVar`
        handling when default is not set by [@pmmmwh](https://github.com/pmmmwh) in
        [#7719](https://github.com/pydantic/pydantic/pull/7719)* Support specification
        of `strict` on `Enum` type fields by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7761](https://github.com/pydantic/pydantic/pull/7761)* Wrap `weakref.ref`
        instead of subclassing to fix `cloudpickle` serialization by [@edoakes](https://github.com/edoakes)
        in [#7780](https://github.com/pydantic/pydantic/pull/7780)* Keep values of
        private attributes set within `model_post_init` in subclasses by [@alexmojaki](https://github.com/alexmojaki)
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* Add more specific
        type for non-callable `json_schema_extra` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7803](https://github.com/pydantic/pydantic/pull/7803)* Raise an error
        when deleting frozen (model) fields by [@alexmojaki](https://github.com/alexmojaki)
        in [#7800](https://github.com/pydantic/pydantic/pull/7800)* Fix schema sorting
        bug with default values by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7817](https://github.com/pydantic/pydantic/pull/7817)* Use generated
        alias for aliases that are not specified otherwise by [@alexmojaki](https://github.com/alexmojaki)
        in [#7802](https://github.com/pydantic/pydantic/pull/7802)* Support `strict`
        specification for `UUID` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7865](https://github.com/pydantic/pydantic/pull/7865)* JSON schema: fix
        extra parameter handling by [@me-and](https://github.com/me-and) in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        Fix: support `pydantic.Field(kw_only=True)` with inherited dataclasses by
        [@PrettyWood](https://github.com/PrettyWood) in [#7827](https://github.com/pydantic/pydantic/pull/7827)*
        Support `validate_call` decorator for methods in classes with `__slots__`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [#7883](https://github.com/pydantic/pydantic/pull/7883)*
        Fix pydantic dataclass problem with `dataclasses.field` default by [@hramezani](https://github.com/hramezani)
        in [#7898](https://github.com/pydantic/pydantic/pull/7898)* Fix schema generation
        for generics with union type bounds by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7899](https://github.com/pydantic/pydantic/pull/7899)* Fix version for
        `importlib_metadata` on python 3.7 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7904](https://github.com/pydantic/pydantic/pull/7904)* Support `|` operator
        (Union) in PydanticRecursiveRef by [@alexmojaki](https://github.com/alexmojaki)
        in [#7892](https://github.com/pydantic/pydantic/pull/7892)* Fix `display_as_type`
        for `TypeAliasType` in python 3.12 by [@dmontagu](https://github.com/dmontagu)
        in [#7929](https://github.com/pydantic/pydantic/pull/7929)* Add support for
        `NotRequired` generics in `TypedDict` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7932](https://github.com/pydantic/pydantic/pull/7932)* Make generic `TypeAliasType`
        specifications produce different schema definitions by [@alexdrydew](https://github.com/alexdrydew)
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* Added fix for
        signature of inherited dataclass by [@howsunjow](https://github.com/howsunjow)
        in [#7925](https://github.com/pydantic/pydantic/pull/7925)* Make the model
        name generation more robust in JSON schema by [@joakimnordling](https://github.com/joakimnordling)
        in [#7881](https://github.com/pydantic/pydantic/pull/7881)* Fix plurals in
        validation error messages (in tests) by [@Iipin](https://github.com/Iipin)
        in [#7972](https://github.com/pydantic/pydantic/pull/7972)* `PrivateAttr`
        is passed from `Annotated` default position by [@tabassco](https://github.com/tabassco)
        in [#8004](https://github.com/pydantic/pydantic/pull/8004)* Don't decode bytes
        (which may not be UTF8) when displaying SecretBytes by [@alexmojaki](https://github.com/alexmojaki)
        in [#8012](https://github.com/pydantic/pydantic/pull/8012)* Use `classmethod`
        instead of `classmethod[Any, Any, Any]` by [@Mr-Pepe](https://github.com/Mr-Pepe)
        in [#7979](https://github.com/pydantic/pydantic/pull/7979)* Clearer error
        on invalid Plugin by [@samuelcolvin](https://github.com/samuelcolvin) in [#8023](https://github.com/pydantic/pydantic/pull/8023)*
        Correct pydantic dataclasses import by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8027](https://github.com/pydantic/pydantic/pull/8027)* Fix misbehavior
        for models referencing redefined type aliases by [@dmontagu](https://github.com/dmontagu)
        in [#8050](https://github.com/pydantic/pydantic/pull/8050)* Fix `Optional`
        field with `validate_default` only performing one field validation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1002](https://github.com/pydantic/pydantic-core/pull/1002)*
        Fix `definition-ref` bug with `Dict` keys by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1014](https://github.com/pydantic/pydantic-core/pull/1014)*
        Fix bug allowing validation of `bool` types with `coerce_numbers_to_str=True`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [pydantic/pydantic-core#1017](https://github.com/pydantic/pydantic-core/pull/1017)*
        Don't accept `NaN` in float and decimal constraints by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1037](https://github.com/pydantic/pydantic-core/pull/1037)*
        Add `lax_str` and `lax_int` support for enum values not inherited from str/int
        by [@michaelhly](https://github.com/michaelhly) in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)*
        Support subclasses in lists in `Union` of `List` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1039](https://github.com/pydantic/pydantic-core/pull/1039)*
        Allow validation against `max_digits` and `decimals` to pass if normalized
        or non-normalized input is valid by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1049](https://github.com/pydantic/pydantic-core/pull/1049)*
        Fix: proper pluralization in `ValidationError` messages by [@Iipin](https://github.com/Iipin)
        in [pydantic/pydantic-core#1050](https://github.com/pydantic/pydantic-core/pull/1050)*
        Disallow the string `'-'` as `datetime` input by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/speedate#52](https://github.com/pydantic/speedate/pull/52) &
        [pydantic/pydantic-core#1060](https://github.com/pydantic/pydantic-core/pull/1060)*
        Fix: NaN and Inf float serialization by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1062](https://github.com/pydantic/pydantic-core/pull/1062)*
        Restore manylinux-compatible PGO builds by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1068](https://github.com/pydantic/pydantic-core/pull/1068)###
        New Contributors#### `pydantic`* [@schneebuzz](https://github.com/schneebuzz)
        made their first contribution in [#7699](https://github.com/pydantic/pydantic/pull/7699)*
        [@edoakes](https://github.com/edoakes) made their first contribution in [#7780](https://github.com/pydantic/pydantic/pull/7780)*
        [@alexmojaki](https://github.com/alexmojaki) made their first contribution
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* [@NickG123](https://github.com/NickG123)
        made their first contribution in [#7751](https://github.com/pydantic/pydantic/pull/7751)*
        [@gowthamgts](https://github.com/gowthamgts) made their first contribution
        in [#7830](https://github.com/pydantic/pydantic/pull/7830)* [@jamesbraza](https://github.com/jamesbraza)
        made their first contribution in [#7848](https://github.com/pydantic/pydantic/pull/7848)*
        [@laundmo](https://github.com/laundmo) made their first contribution in [#7850](https://github.com/pydantic/pydantic/pull/7850)*
        [@rahmatnazali](https://github.com/rahmatnazali) made their first contribution
        in [#7870](https://github.com/pydantic/pydantic/pull/7870)* [@waterfountain1996](https://github.com/waterfountain1996)
        made their first contribution in [#7878](https://github.com/pydantic/pydantic/pull/7878)*
        [@chris-spann](https://github.com/chris-spann) made their first contribution
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* [@me-and](https://github.com/me-and)
        made their first contribution in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        [@utkini](https://github.com/utkini) made their first contribution in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        [@bn-l](https://github.com/bn-l) made their first contribution in [#7744](https://github.com/pydantic/pydantic/pull/7744)*
        [@alexdrydew](https://github.com/alexdrydew) made their first contribution
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* [@Luca-Blight](https://github.com/Luca-Blight)
        made their first contribution in [#7930](https://github.com/pydantic/pydantic/pull/7930)*
        [@howsunjow](https://github.com/howsunjow) made their first contribution in
        [#7925](https://github.com/pydantic/pydantic/pull/7925)* [@joakimnordling](https://github.com/joakimnordling)
        made their first contribution in [#7881](https://github.com/pydantic/pydantic/pull/7881)*
        [@icfly2](https://github.com/icfly2) made their first contribution in [#7976](https://github.com/pydantic/pydantic/pull/7976)*
        [@Yummy-Yums](https://github.com/Yummy-Yums) made their first contribution
        in [#8003](https://github.com/pydantic/pydantic/pull/8003)* [@Iipin](https://github.com/Iipin)
        made their first contribution in [#7972](https://github.com/pydantic/pydantic/pull/7972)*
        [@tabassco](https://github.com/tabassco) made their first contribution in
        [#8004](https://github.com/pydantic/pydantic/pull/8004)* [@Mr-Pepe](https://github.com/Mr-Pepe)
        made their first contribution in [#7979](https://github.com/pydantic/pydantic/pull/7979)*
        [@0x00cl](https://github.com/0x00cl) made their first contribution in [#8010](https://github.com/pydantic/pydantic/pull/8010)*
        [@barraponto](https://github.com/barraponto) made their first contribution
        in [#8032](https://github.com/pydantic/pydantic/pull/8032)#### `pydantic-core`*
        [@sisp](https://github.com/sisp) made their first contribution in [pydantic/pydantic-core#995](https://github.com/pydantic/pydantic-core/pull/995)*
        [@michaelhly](https://github.com/michaelhly) made their first contribution
        in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)##
        v2.5.0b1 (2023-11-09)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0b1)
        for details.## v2.4.2 (2023-09-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.2)###
        What's Changed#### Fixes* Fix bug with JSON schema for sequence of discriminated
        union by [@dmontagu](https://github.com/dmontagu) in [#7647](https://github.com/pydantic/pydantic/pull/7647)*
        Fix schema references in discriminated unions by [@adriangb](https://github.com/adriangb)
        in [#7646](https://github.com/pydantic/pydantic/pull/7646)* Fix json schema
        generation for recursive models by [@adriangb](https://github.com/adriangb)
        in [#7653](https://github.com/pydantic/pydantic/pull/7653)* Fix `models_json_schema`
        for generic models by [@adriangb](https://github.com/adriangb) in [#7654](https://github.com/pydantic/pydantic/pull/7654)*
        Fix xfailed test for generic model signatures by [@adriangb](https://github.com/adriangb)
        in [#7658](https://github.com/pydantic/pydantic/pull/7658)### New Contributors*
        [@austinorr](https://github.com/austinorr) made their first contribution in
        [#7657](https://github.com/pydantic/pydantic/pull/7657)* [@peterHoburg](https://github.com/peterHoburg)
        made their first contribution in [#7670](https://github.com/pydantic/pydantic/pull/7670)##
        v2.4.1 (2023-09-26)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.1)###
        What's Changed#### Packaging* Update pydantic-core to 2.10.1 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7633](https://github.com/pydantic/pydantic/pull/7633)#### Fixes* Serialize
        unsubstituted type vars as `Any` by [@adriangb](https://github.com/adriangb)
        in [#7606](https://github.com/pydantic/pydantic/pull/7606)* Remove schema
        building caches by [@adriangb](https://github.com/adriangb) in [#7624](https://github.com/pydantic/pydantic/pull/7624)*
        Fix an issue where JSON schema extras weren't JSON encoded by [@dmontagu](https://github.com/dmontagu)
        in [#7625](https://github.com/pydantic/pydantic/pull/7625)## v2.4.0 (2023-09-22)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.4.0)### What's
        Changed#### Packaging* Update pydantic-core to 2.10.0 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7542](https://github.com/pydantic/pydantic/pull/7542)#### New Features*
        Add `Base64Url` types by [@dmontagu](https://github.com/dmontagu) in [#7286](https://github.com/pydantic/pydantic/pull/7286)*
        Implement optional `number` to `str` coercion by [@lig](https://github.com/lig)
        in [#7508](https://github.com/pydantic/pydantic/pull/7508)* Allow access to
        `field_name` and `data` in all validators if there is data and a field name
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7542](https://github.com/pydantic/pydantic/pull/7542)*
        Add `BaseModel.model_validate_strings` and `TypeAdapter.validate_strings`
        by [@hramezani](https://github.com/hramezani) in [#7552](https://github.com/pydantic/pydantic/pull/7552)*
        Add Pydantic `plugins` experimental implementation by [@lig](https://github.com/lig)
        [@samuelcolvin](https://github.com/samuelcolvin) and [@Kludex](https://github.com/Kludex)
        in [#6820](https://github.com/pydantic/pydantic/pull/6820)#### Changes* Do
        not override `model_post_init` in subclass with private attrs by [@Viicos](https://github.com/Viicos)
        in [#7302](https://github.com/pydantic/pydantic/pull/7302)* Make fields with
        defaults not required in the serialization schema by default by [@dmontagu](https://github.com/dmontagu)
        in [#7275](https://github.com/pydantic/pydantic/pull/7275)* Mark `Extra` as
        deprecated by [@disrupted](https://github.com/disrupted) in [#7299](https://github.com/pydantic/pydantic/pull/7299)*
        Make `EncodedStr` a dataclass by [@Kludex](https://github.com/Kludex) in [#7396](https://github.com/pydantic/pydantic/pull/7396)*
        Move `annotated_handlers` to be public by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7569](https://github.com/pydantic/pydantic/pull/7569)#### Performance*
        Simplify flattening and inlining of `CoreSchema` by [@adriangb](https://github.com/adriangb)
        in [#7523](https://github.com/pydantic/pydantic/pull/7523)* Remove unused
        copies in `CoreSchema` walking by [@adriangb](https://github.com/adriangb)
        in [#7528](https://github.com/pydantic/pydantic/pull/7528)* Add caches for
        collecting definitions and invalid schemas from a CoreSchema by [@adriangb](https://github.com/adriangb)
        in [#7527](https://github.com/pydantic/pydantic/pull/7527)* Eagerly resolve
        discriminated unions and cache cases where we can't by [@adriangb](https://github.com/adriangb)
        in [#7529](https://github.com/pydantic/pydantic/pull/7529)* Replace `dict.get`
        and `dict.setdefault` with more verbose versions in `CoreSchema` building
        hot paths by [@adriangb](https://github.com/adriangb) in [#7536](https://github.com/pydantic/pydantic/pull/7536)*
        Cache invalid `CoreSchema` discovery by [@adriangb](https://github.com/adriangb)
        in [#7535](https://github.com/pydantic/pydantic/pull/7535)* Allow disabling
        `CoreSchema` validation for faster startup times by [@adriangb](https://github.com/adriangb)
        in [#7565](https://github.com/pydantic/pydantic/pull/7565)#### Fixes* Fix
        config detection for `TypedDict` from grandparent classes by [@dmontagu](https://github.com/dmontagu)
        in [#7272](https://github.com/pydantic/pydantic/pull/7272)* Fix hash function
        generation for frozen models with unusual MRO by [@dmontagu](https://github.com/dmontagu)
        in [#7274](https://github.com/pydantic/pydantic/pull/7274)* Make `strict`
        config overridable in field for Path by [@hramezani](https://github.com/hramezani)
        in [#7281](https://github.com/pydantic/pydantic/pull/7281)* Use `ser_json_<timedelta|bytes>`
        on default in `GenerateJsonSchema` by [@Kludex](https://github.com/Kludex)
        in [#7269](https://github.com/pydantic/pydantic/pull/7269)* Adding a check
        that alias is validated as an identifier for Python by [@andree0](https://github.com/andree0)
        in [#7319](https://github.com/pydantic/pydantic/pull/7319)* Raise an error
        when computed field overrides field by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7346](https://github.com/pydantic/pydantic/pull/7346)* Fix applying `SkipValidation`
        to referenced schemas by [@adriangb](https://github.com/adriangb) in [#7381](https://github.com/pydantic/pydantic/pull/7381)*
        Enforce behavior of private attributes having double leading underscore by
        [@lig](https://github.com/lig) in [#7265](https://github.com/pydantic/pydantic/pull/7265)*
        Standardize `__get_pydantic_core_schema__` signature by [@hramezani](https://github.com/hramezani)
        in [#7415](https://github.com/pydantic/pydantic/pull/7415)* Fix generic dataclass
        fields mutation bug (when using `TypeAdapter`) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7435](https://github.com/pydantic/pydantic/pull/7435)* Fix `TypeError`
        on `model_validator` in `wrap` mode by [@pmmmwh](https://github.com/pmmmwh)
        in [#7496](https://github.com/pydantic/pydantic/pull/7496)* Improve enum error
        message by [@hramezani](https://github.com/hramezani) in [#7506](https://github.com/pydantic/pydantic/pull/7506)*
        Make `repr` work for instances that failed initialization when handling `ValidationError`s
        by [@dmontagu](https://github.com/dmontagu) in [#7439](https://github.com/pydantic/pydantic/pull/7439)*
        Fixed a regular expression denial of service issue by limiting whitespaces
        by [@prodigysml](https://github.com/prodigysml) in [#7360](https://github.com/pydantic/pydantic/pull/7360)*
        Fix handling of `UUID` values having `UUID.version=None` by [@lig](https://github.com/lig)
        in [#7566](https://github.com/pydantic/pydantic/pull/7566)* Fix `__iter__`
        returning private `cached_property` info by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7570](https://github.com/pydantic/pydantic/pull/7570)* Improvements to
        version info message by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#7594](https://github.com/pydantic/pydantic/pull/7594)### New Contributors*
        [@15498th](https://github.com/15498th) made their first contribution in [#7238](https://github.com/pydantic/pydantic/pull/7238)*
        [@GabrielCappelli](https://github.com/GabrielCappelli) made their first contribution
        in [#7213](https://github.com/pydantic/pydantic/pull/7213)* [@tobni](https://github.com/tobni)
        made their first contribution in [#7184](https://github.com/pydantic/pydantic/pull/7184)*
        [@redruin1](https://github.com/redruin1) made their first contribution in
        [#7282](https://github.com/pydantic/pydantic/pull/7282)* [@FacerAin](https://github.com/FacerAin)
        made their first contribution in [#7288](https://github.com/pydantic/pydantic/pull/7288)*
        [@acdha](https://github.com/acdha) made their first contribution in [#7297](https://github.com/pydantic/pydantic/pull/7297)*
        [@andree0](https://github.com/andree0) made their first contribution in [#7319](https://github.com/pydantic/pydantic/pull/7319)*
        [@gordonhart](https://github.com/gordonhart) made their first contribution
        in [#7375](https://github.com/pydantic/pydantic/pull/7375)* [@pmmmwh](https://github.com/pmmmwh)
        made their first contribution in [#7496](https://github.com/pydantic/pydantic/pull/7496)*
        [@disrupted](https://github.com/disrupted) made their first contribution in
        [#7299](https://github.com/pydantic/pydantic/pull/7299)* [@prodigysml](https://github.com/prodigysml)
        made their first contribution in [#7360](https://github.com/pydantic/pydantic/pull/7360)##
        v2.3.0 (2023-08-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.3.0)*
        \U0001F525 Remove orphaned changes file from repo by [@lig](https://github.com/lig)
        in [#7168](https://github.com/pydantic/pydantic/pull/7168)* Add copy button
        on documentation by [@Kludex](https://github.com/Kludex) in [#7190](https://github.com/pydantic/pydantic/pull/7190)*
        Fix docs on JSON type by [@Kludex](https://github.com/Kludex) in [#7189](https://github.com/pydantic/pydantic/pull/7189)*
        Update mypy 1.5.0 to 1.5.1 in CI by [@hramezani](https://github.com/hramezani)
        in [#7191](https://github.com/pydantic/pydantic/pull/7191)* fix download links
        badge by [@samuelcolvin](https://github.com/samuelcolvin) in [#7200](https://github.com/pydantic/pydantic/pull/7200)*
        add 2.2.1 to changelog by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7212](https://github.com/pydantic/pydantic/pull/7212)* Make ModelWrapValidator
        protocols generic by [@dmontagu](https://github.com/dmontagu) in [#7154](https://github.com/pydantic/pydantic/pull/7154)*
        Correct `Field(..., exclude: bool)` docs by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7214](https://github.com/pydantic/pydantic/pull/7214)* Make shadowing
        attributes a warning instead of an error by [@adriangb](https://github.com/adriangb)
        in [#7193](https://github.com/pydantic/pydantic/pull/7193)* Document `Base64Str`
        and `Base64Bytes` by [@Kludex](https://github.com/Kludex) in [#7192](https://github.com/pydantic/pydantic/pull/7192)*
        Fix `config.defer_build` for serialization first cases by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7024](https://github.com/pydantic/pydantic/pull/7024)* clean Model docstrings
        in JSON Schema by [@samuelcolvin](https://github.com/samuelcolvin) in [#7210](https://github.com/pydantic/pydantic/pull/7210)*
        fix [#7228](https://github.com/pydantic/pydantic/pull/7228) (typo): docs in
        `validators.md` to correct `validate_default` kwarg by [@lmmx](https://github.com/lmmx)
        in [#7229](https://github.com/pydantic/pydantic/pull/7229)* \u2705 Implement
        `tzinfo.fromutc` method for `TzInfo` in `pydantic-core` by [@lig](https://github.com/lig)
        in [#7019](https://github.com/pydantic/pydantic/pull/7019)* Support `__get_validators__`
        by [@hramezani](https://github.com/hramezani) in [#7197](https://github.com/pydantic/pydantic/pull/7197)##
        v2.2.1 (2023-08-18)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.2.1)*
        Make `xfail`ing test for root model extra stop `xfail`ing by [@dmontagu](https://github.com/dmontagu)
        in [#6937](https://github.com/pydantic/pydantic/pull/6937)* Optimize recursion
        detection by stopping on the second visit for the same object by [@mciucu](https://github.com/mciucu)
        in [#7160](https://github.com/pydantic/pydantic/pull/7160)* fix link in docs
        by [@tlambert03](https://github.com/tlambert03) in [#7166](https://github.com/pydantic/pydantic/pull/7166)*
        Replace MiMalloc w/ default allocator by [@adriangb](https://github.com/adriangb)
        in [pydantic/pydantic-core#900](https://github.com/pydantic/pydantic-core/pull/900)*
        Bump pydantic-core to 2.6.1 and prepare 2.2.1 release by [@adriangb](https://github.com/adriangb)
        in [#7176](https://github.com/pydantic/pydantic/pull/7176)## v2.2.0 (2023-08-17)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.2.0)* Split
        \"pipx install\" setup command into two commands on the documentation site
        by [@nomadmtb](https://github.com/nomadmtb) in [#6869](https://github.com/pydantic/pydantic/pull/6869)*
        Deprecate `Field.include` by [@hramezani](https://github.com/hramezani) in
        [#6852](https://github.com/pydantic/pydantic/pull/6852)* Fix typo in default
        factory error msg by [@hramezani](https://github.com/hramezani) in [#6880](https://github.com/pydantic/pydantic/pull/6880)*
        Simplify handling of typing.Annotated in GenerateSchema by [@dmontagu](https://github.com/dmontagu)
        in [#6887](https://github.com/pydantic/pydantic/pull/6887)* Re-enable fastapi
        tests in CI by [@dmontagu](https://github.com/dmontagu) in [#6883](https://github.com/pydantic/pydantic/pull/6883)*
        Make it harder to hit collisions with json schema defrefs by [@dmontagu](https://github.com/dmontagu)
        in [#6566](https://github.com/pydantic/pydantic/pull/6566)* Cleaner error
        for invalid input to `Path` fields by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6903](https://github.com/pydantic/pydantic/pull/6903)* :memo: support
        Coordinate Type by [@yezz123](https://github.com/yezz123) in [#6906](https://github.com/pydantic/pydantic/pull/6906)*
        Fix `ForwardRef` wrapper for py 3.10.0 (shim until bpo-45166) by [@randomir](https://github.com/randomir)
        in [#6919](https://github.com/pydantic/pydantic/pull/6919)* Fix misbehavior
        related to copying of RootModel by [@dmontagu](https://github.com/dmontagu)
        in [#6918](https://github.com/pydantic/pydantic/pull/6918)* Fix issue with
        recursion error caused by ParamSpec by [@dmontagu](https://github.com/dmontagu)
        in [#6923](https://github.com/pydantic/pydantic/pull/6923)* Add section about
        Constrained classes to the Migration Guide by [@Kludex](https://github.com/Kludex)
        in [#6924](https://github.com/pydantic/pydantic/pull/6924)* Use `main` branch
        for badge links by [@Viicos](https://github.com/Viicos) in [#6925](https://github.com/pydantic/pydantic/pull/6925)*
        Add test for v1/v2 Annotated discrepancy by [@carlbordum](https://github.com/carlbordum)
        in [#6926](https://github.com/pydantic/pydantic/pull/6926)* Make the v1 mypy
        plugin work with both v1 and v2 by [@dmontagu](https://github.com/dmontagu)
        in [#6921](https://github.com/pydantic/pydantic/pull/6921)* Fix issue where
        generic models couldn't be parametrized with BaseModel by [@dmontagu](https://github.com/dmontagu)
        in [#6933](https://github.com/pydantic/pydantic/pull/6933)* Remove xfail for
        discriminated union with alias by [@dmontagu](https://github.com/dmontagu)
        in [#6938](https://github.com/pydantic/pydantic/pull/6938)* add field_serializer
        to computed_field by [@andresliszt](https://github.com/andresliszt) in [#6965](https://github.com/pydantic/pydantic/pull/6965)*
        Use union_schema with Type[Union[...]] by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#6952](https://github.com/pydantic/pydantic/pull/6952)* Fix inherited
        typeddict attributes / config by [@adriangb](https://github.com/adriangb)
        in [#6981](https://github.com/pydantic/pydantic/pull/6981)* fix dataclass
        annotated before validator called twice by [@davidhewitt](https://github.com/davidhewitt)
        in [#6998](https://github.com/pydantic/pydantic/pull/6998)* Update test-fastapi
        deselected tests by [@hramezani](https://github.com/hramezani) in [#7014](https://github.com/pydantic/pydantic/pull/7014)*
        Fix validator doc format by [@hramezani](https://github.com/hramezani) in
        [#7015](https://github.com/pydantic/pydantic/pull/7015)* Fix typo in docstring
        of model_json_schema by [@AdamVinch-Federated](https://github.com/AdamVinch-Federated)
        in [#7032](https://github.com/pydantic/pydantic/pull/7032)* remove unused
        \"type ignores\" with pyright by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7026](https://github.com/pydantic/pydantic/pull/7026)* Add benchmark
        representing FastAPI startup time by [@adriangb](https://github.com/adriangb)
        in [#7030](https://github.com/pydantic/pydantic/pull/7030)* Fix json_encoders
        for Enum subclasses by [@adriangb](https://github.com/adriangb) in [#7029](https://github.com/pydantic/pydantic/pull/7029)*
        Update docstring of `ser_json_bytes` regarding base64 encoding by [@Viicos](https://github.com/Viicos)
        in [#7052](https://github.com/pydantic/pydantic/pull/7052)* Allow `@validate_call`
        to work on async methods by [@adriangb](https://github.com/adriangb) in [#7046](https://github.com/pydantic/pydantic/pull/7046)*
        Fix: mypy error with `Settings` and `SettingsConfigDict` by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#7002](https://github.com/pydantic/pydantic/pull/7002)* Fix some typos
        (repeated words and it's/its) by [@eumiro](https://github.com/eumiro) in [#7063](https://github.com/pydantic/pydantic/pull/7063)*
        Fix the typo in docstring by [@harunyasar](https://github.com/harunyasar)
        in [#7062](https://github.com/pydantic/pydantic/pull/7062)* Docs: Fix broken
        URL in the pydantic-settings package recommendation by [@swetjen](https://github.com/swetjen)
        in [#6995](https://github.com/pydantic/pydantic/pull/6995)* Handle constraints
        being applied to schemas that don't accept it by [@adriangb](https://github.com/adriangb)
        in [#6951](https://github.com/pydantic/pydantic/pull/6951)* Replace almost_equal_floats
        with math.isclose by [@eumiro](https://github.com/eumiro) in [#7082](https://github.com/pydantic/pydantic/pull/7082)*
        bump pydantic-core to 2.5.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7077](https://github.com/pydantic/pydantic/pull/7077)* Add `short_version`
        and use it in links by [@hramezani](https://github.com/hramezani) in [#7115](https://github.com/pydantic/pydantic/pull/7115)*
        \U0001F4DD Add usage link to `RootModel` by [@Kludex](https://github.com/Kludex)
        in [#7113](https://github.com/pydantic/pydantic/pull/7113)* Revert \"Fix default
        port for mongosrv DSNs (#6827)\" by [@Kludex](https://github.com/Kludex) in
        [#7116](https://github.com/pydantic/pydantic/pull/7116)* Clarify validate_default
        and _Unset handling in usage docs and migration guide by [@benbenbang](https://github.com/benbenbang)
        in [#6950](https://github.com/pydantic/pydantic/pull/6950)* Tweak documentation
        of `Field.exclude` by [@Viicos](https://github.com/Viicos) in [#7086](https://github.com/pydantic/pydantic/pull/7086)*
        Do not require `validate_assignment` to use `Field.frozen` by [@Viicos](https://github.com/Viicos)
        in [#7103](https://github.com/pydantic/pydantic/pull/7103)* tweaks to `_core_utils`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7040](https://github.com/pydantic/pydantic/pull/7040)*
        Make DefaultDict working with set by [@hramezani](https://github.com/hramezani)
        in [#7126](https://github.com/pydantic/pydantic/pull/7126)* Don't always require
        typing.Generic as a base for partially parametrized models by [@dmontagu](https://github.com/dmontagu)
        in [#7119](https://github.com/pydantic/pydantic/pull/7119)* Fix issue with
        JSON schema incorrectly using parent class core schema by [@dmontagu](https://github.com/dmontagu)
        in [#7020](https://github.com/pydantic/pydantic/pull/7020)* Fix xfailed test
        related to TypedDict and alias_generator by [@dmontagu](https://github.com/dmontagu)
        in [#6940](https://github.com/pydantic/pydantic/pull/6940)* Improve error
        message for NameEmail by [@dmontagu](https://github.com/dmontagu) in [#6939](https://github.com/pydantic/pydantic/pull/6939)*
        Fix generic computed fields by [@dmontagu](https://github.com/dmontagu) in
        [#6988](https://github.com/pydantic/pydantic/pull/6988)* Reflect namedtuple
        default values during validation by [@dmontagu](https://github.com/dmontagu)
        in [#7144](https://github.com/pydantic/pydantic/pull/7144)* Update dependencies,
        fix pydantic-core usage, fix CI issues by [@dmontagu](https://github.com/dmontagu)
        in [#7150](https://github.com/pydantic/pydantic/pull/7150)* Add mypy 1.5.0
        by [@hramezani](https://github.com/hramezani) in [#7118](https://github.com/pydantic/pydantic/pull/7118)*
        Handle non-json native enum values by [@adriangb](https://github.com/adriangb)
        in [#7056](https://github.com/pydantic/pydantic/pull/7056)* document `round_trip`
        in Json type documentation  by [@jc-louis](https://github.com/jc-louis) in
        [#7137](https://github.com/pydantic/pydantic/pull/7137)* Relax signature checks
        to better support builtins and C extension functions as validators by [@adriangb](https://github.com/adriangb)
        in [#7101](https://github.com/pydantic/pydantic/pull/7101)* add union_mode='left_to_right'
        by [@davidhewitt](https://github.com/davidhewitt) in [#7151](https://github.com/pydantic/pydantic/pull/7151)*
        Include an error message hint for inherited ordering by [@yvalencia91](https://github.com/yvalencia91)
        in [#7124](https://github.com/pydantic/pydantic/pull/7124)* Fix one docs link
        and resolve some warnings for two others by [@dmontagu](https://github.com/dmontagu)
        in [#7153](https://github.com/pydantic/pydantic/pull/7153)* Include Field
        extra keys name in warning by [@hramezani](https://github.com/hramezani) in
        [#7136](https://github.com/pydantic/pydantic/pull/7136)## v2.1.1 (2023-07-25)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.1.1)* Skip FieldInfo
        merging when unnecessary by [@dmontagu](https://github.com/dmontagu) in [#6862](https://github.com/pydantic/pydantic/pull/6862)##
        v2.1.0 (2023-07-25)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.1.0)*
        Add `StringConstraints` for use as Annotated metadata by [@adriangb](https://github.com/adriangb)
        in [#6605](https://github.com/pydantic/pydantic/pull/6605)* Try to fix intermittently
        failing CI by [@adriangb](https://github.com/adriangb) in [#6683](https://github.com/pydantic/pydantic/pull/6683)*
        Remove redundant example of optional vs default. by [@ehiggs-deliverect](https://github.com/ehiggs-deliverect)
        in [#6676](https://github.com/pydantic/pydantic/pull/6676)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6692](https://github.com/pydantic/pydantic/pull/6692)*
        Remove the Validate always section in validator docs by [@adriangb](https://github.com/adriangb)
        in [#6679](https://github.com/pydantic/pydantic/pull/6679)* Fix recursion
        error in json schema generation by [@adriangb](https://github.com/adriangb)
        in [#6720](https://github.com/pydantic/pydantic/pull/6720)* Fix incorrect
        subclass check for secretstr by [@AlexVndnblcke](https://github.com/AlexVndnblcke)
        in [#6730](https://github.com/pydantic/pydantic/pull/6730)* update pdm / pdm
        lockfile to 2.8.0 by [@davidhewitt](https://github.com/davidhewitt) in [#6714](https://github.com/pydantic/pydantic/pull/6714)*
        unpin pdm on more CI jobs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6755](https://github.com/pydantic/pydantic/pull/6755)* improve source
        locations for auxiliary packages in docs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6749](https://github.com/pydantic/pydantic/pull/6749)* Assume builtins
        don't accept an info argument by [@adriangb](https://github.com/adriangb)
        in [#6754](https://github.com/pydantic/pydantic/pull/6754)* Fix bug where
        calling `help(BaseModelSubclass)` raises errors by [@hramezani](https://github.com/hramezani)
        in [#6758](https://github.com/pydantic/pydantic/pull/6758)* Fix mypy plugin
        handling of `@model_validator(mode=\"after\")` by [@ljodal](https://github.com/ljodal)
        in [#6753](https://github.com/pydantic/pydantic/pull/6753)* update pydantic-core
        to 2.3.1 by [@davidhewitt](https://github.com/davidhewitt) in [#6756](https://github.com/pydantic/pydantic/pull/6756)*
        Mypy plugin for settings by [@hramezani](https://github.com/hramezani) in
        [#6760](https://github.com/pydantic/pydantic/pull/6760)* Use `contentSchema`
        keyword for JSON schema by [@dmontagu](https://github.com/dmontagu) in [#6715](https://github.com/pydantic/pydantic/pull/6715)*
        fast-path checking finite decimals by [@davidhewitt](https://github.com/davidhewitt)
        in [#6769](https://github.com/pydantic/pydantic/pull/6769)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6771](https://github.com/pydantic/pydantic/pull/6771)*
        Improve json schema doc by [@hramezani](https://github.com/hramezani) in [#6772](https://github.com/pydantic/pydantic/pull/6772)*
        Update validator docs by [@adriangb](https://github.com/adriangb) in [#6695](https://github.com/pydantic/pydantic/pull/6695)*
        Fix typehint for wrap validator by [@dmontagu](https://github.com/dmontagu)
        in [#6788](https://github.com/pydantic/pydantic/pull/6788)* \U0001F41B Fix
        validation warning for unions of Literal and other type by [@lig](https://github.com/lig)
        in [#6628](https://github.com/pydantic/pydantic/pull/6628)* Update documentation
        for generics support in V2 by [@tpdorsey](https://github.com/tpdorsey) in
        [#6685](https://github.com/pydantic/pydantic/pull/6685)* add pydantic-core
        build info to `version_info()` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6785](https://github.com/pydantic/pydantic/pull/6785)* Fix pydantic dataclasses
        that use slots with default values by [@dmontagu](https://github.com/dmontagu)
        in [#6796](https://github.com/pydantic/pydantic/pull/6796)* Fix inheritance
        of hash function for frozen models by [@dmontagu](https://github.com/dmontagu)
        in [#6789](https://github.com/pydantic/pydantic/pull/6789)* \u2728 Add `SkipJsonSchema`
        annotation by [@Kludex](https://github.com/Kludex) in [#6653](https://github.com/pydantic/pydantic/pull/6653)*
        Error if an invalid field name is used with Field by [@dmontagu](https://github.com/dmontagu)
        in [#6797](https://github.com/pydantic/pydantic/pull/6797)* Add `GenericModel`
        to `MOVED_IN_V2` by [@adriangb](https://github.com/adriangb) in [#6776](https://github.com/pydantic/pydantic/pull/6776)*
        Remove unused code from `docs/usage/types/custom.md` by [@hramezani](https://github.com/hramezani)
        in [#6803](https://github.com/pydantic/pydantic/pull/6803)* Fix `float` ->
        `Decimal` coercion precision loss by [@adriangb](https://github.com/adriangb)
        in [#6810](https://github.com/pydantic/pydantic/pull/6810)* remove email validation
        from the north star benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6816](https://github.com/pydantic/pydantic/pull/6816)* Fix link to mypy
        by [@progsmile](https://github.com/progsmile) in [#6824](https://github.com/pydantic/pydantic/pull/6824)*
        Improve initialization hooks example by [@hramezani](https://github.com/hramezani)
        in [#6822](https://github.com/pydantic/pydantic/pull/6822)* Fix default port
        for mongosrv DSNs by [@dmontagu](https://github.com/dmontagu) in [#6827](https://github.com/pydantic/pydantic/pull/6827)*
        Improve API documentation, in particular more links between usage and API
        docs by [@samuelcolvin](https://github.com/samuelcolvin) in [#6780](https://github.com/pydantic/pydantic/pull/6780)*
        update pydantic-core to 2.4.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#6831](https://github.com/pydantic/pydantic/pull/6831)* Fix `annotated_types.MaxLen`
        validator for custom sequence types by [@ImogenBits](https://github.com/ImogenBits)
        in [#6809](https://github.com/pydantic/pydantic/pull/6809)* Update V1 by [@hramezani](https://github.com/hramezani)
        in [#6833](https://github.com/pydantic/pydantic/pull/6833)* Make it so callable
        JSON schema extra works by [@dmontagu](https://github.com/dmontagu) in [#6798](https://github.com/pydantic/pydantic/pull/6798)*
        Fix serialization issue with `InstanceOf` by [@dmontagu](https://github.com/dmontagu)
        in [#6829](https://github.com/pydantic/pydantic/pull/6829)* Add back support
        for `json_encoders` by [@adriangb](https://github.com/adriangb) in [#6811](https://github.com/pydantic/pydantic/pull/6811)*
        Update field annotations when building the schema by [@dmontagu](https://github.com/dmontagu)
        in [#6838](https://github.com/pydantic/pydantic/pull/6838)* Use `WeakValueDictionary`
        to fix generic memory leak by [@dmontagu](https://github.com/dmontagu) in
        [#6681](https://github.com/pydantic/pydantic/pull/6681)* Add `config.defer_build`
        to optionally make model building lazy by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6823](https://github.com/pydantic/pydantic/pull/6823)* delegate `UUID`
        serialization to pydantic-core by [@davidhewitt](https://github.com/davidhewitt)
        in [#6850](https://github.com/pydantic/pydantic/pull/6850)* Update `json_encoders`
        docs by [@adriangb](https://github.com/adriangb) in [#6848](https://github.com/pydantic/pydantic/pull/6848)*
        Fix error message for `staticmethod`/`classmethod` order with validate_call
        by [@dmontagu](https://github.com/dmontagu) in [#6686](https://github.com/pydantic/pydantic/pull/6686)*
        Improve documentation for `Config` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6847](https://github.com/pydantic/pydantic/pull/6847)* Update serialization
        doc to mention `Field.exclude` takes priority over call-time `include/exclude`
        by [@hramezani](https://github.com/hramezani) in [#6851](https://github.com/pydantic/pydantic/pull/6851)*
        Allow customizing core schema generation by making `GenerateSchema` public
        by [@adriangb](https://github.com/adriangb) in [#6737](https://github.com/pydantic/pydantic/pull/6737)##
        v2.0.3 (2023-07-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.3)*
        Mention PyObject (v1) moving to ImportString (v2) in migration doc by [@slafs](https://github.com/slafs)
        in [#6456](https://github.com/pydantic/pydantic/pull/6456)* Fix release-tweet
        CI by [@Kludex](https://github.com/Kludex) in [#6461](https://github.com/pydantic/pydantic/pull/6461)*
        Revise the section on required / optional / nullable fields. by [@ybressler](https://github.com/ybressler)
        in [#6468](https://github.com/pydantic/pydantic/pull/6468)* Warn if a type
        hint is not in fact a type by [@adriangb](https://github.com/adriangb) in
        [#6479](https://github.com/pydantic/pydantic/pull/6479)* Replace TransformSchema
        with GetPydanticSchema by [@dmontagu](https://github.com/dmontagu) in [#6484](https://github.com/pydantic/pydantic/pull/6484)*
        Fix the un-hashability of various annotation types, for use in caching generic
        containers by [@dmontagu](https://github.com/dmontagu) in [#6480](https://github.com/pydantic/pydantic/pull/6480)*
        PYD-164: Rework custom types docs by [@adriangb](https://github.com/adriangb)
        in [#6490](https://github.com/pydantic/pydantic/pull/6490)* Fix ci by [@adriangb](https://github.com/adriangb)
        in [#6507](https://github.com/pydantic/pydantic/pull/6507)* Fix forward ref
        in generic by [@adriangb](https://github.com/adriangb) in [#6511](https://github.com/pydantic/pydantic/pull/6511)*
        Fix generation of serialization JSON schemas for core_schema.ChainSchema by
        [@dmontagu](https://github.com/dmontagu) in [#6515](https://github.com/pydantic/pydantic/pull/6515)*
        Document the change in `Field.alias` behavior in Pydantic V2 by [@hramezani](https://github.com/hramezani)
        in [#6508](https://github.com/pydantic/pydantic/pull/6508)* Give better error
        message attempting to compute the json schema of a model with undefined fields
        by [@dmontagu](https://github.com/dmontagu) in [#6519](https://github.com/pydantic/pydantic/pull/6519)*
        Document `alias_priority` by [@tpdorsey](https://github.com/tpdorsey) in [#6520](https://github.com/pydantic/pydantic/pull/6520)*
        Add redirect for types documentation by [@tpdorsey](https://github.com/tpdorsey)
        in [#6513](https://github.com/pydantic/pydantic/pull/6513)* Allow updating
        docs without release by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#6551](https://github.com/pydantic/pydantic/pull/6551)* Ensure docs tests
        always run in the right folder by [@dmontagu](https://github.com/dmontagu)
        in [#6487](https://github.com/pydantic/pydantic/pull/6487)* Defer evaluation
        of return type hints for serializer functions by [@dmontagu](https://github.com/dmontagu)
        in [#6516](https://github.com/pydantic/pydantic/pull/6516)* Disable E501 from
        Ruff and rely on just Black by [@adriangb](https://github.com/adriangb) in
        [#6552](https://github.com/pydantic/pydantic/pull/6552)* Update JSON Schema
        documentation for V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6492](https://github.com/pydantic/pydantic/pull/6492)*
        Add documentation of cyclic reference handling by [@dmontagu](https://github.com/dmontagu)
        in [#6493](https://github.com/pydantic/pydantic/pull/6493)* Remove the need
        for change files by [@samuelcolvin](https://github.com/samuelcolvin) in [#6556](https://github.com/pydantic/pydantic/pull/6556)*
        add \"north star\" benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6547](https://github.com/pydantic/pydantic/pull/6547)* Update Dataclasses
        docs by [@tpdorsey](https://github.com/tpdorsey) in [#6470](https://github.com/pydantic/pydantic/pull/6470)*
        \u267B\uFE0F Use different error message on v1 redirects by [@Kludex](https://github.com/Kludex)
        in [#6595](https://github.com/pydantic/pydantic/pull/6595)* \u2B06 Upgrade
        `pydantic-core` to v2.2.0 by [@lig](https://github.com/lig) in [#6589](https://github.com/pydantic/pydantic/pull/6589)*
        Fix serialization for IPvAny by [@dmontagu](https://github.com/dmontagu) in
        [#6572](https://github.com/pydantic/pydantic/pull/6572)* Improve CI by using
        PDM instead of pip to install typing-extensions by [@adriangb](https://github.com/adriangb)
        in [#6602](https://github.com/pydantic/pydantic/pull/6602)* Add `enum` error
        type docs  by [@lig](https://github.com/lig) in [#6603](https://github.com/pydantic/pydantic/pull/6603)*
        \U0001F41B Fix `max_length` for unicode strings by [@lig](https://github.com/lig)
        in [#6559](https://github.com/pydantic/pydantic/pull/6559)* Add documentation
        for accessing features via `pydantic.v1` by [@tpdorsey](https://github.com/tpdorsey)
        in [#6604](https://github.com/pydantic/pydantic/pull/6604)* Include extra
        when iterating over a model by [@adriangb](https://github.com/adriangb) in
        [#6562](https://github.com/pydantic/pydantic/pull/6562)* Fix typing of model_validator
        by [@adriangb](https://github.com/adriangb) in [#6514](https://github.com/pydantic/pydantic/pull/6514)*
        Touch up Decimal validator by [@adriangb](https://github.com/adriangb) in
        [#6327](https://github.com/pydantic/pydantic/pull/6327)* Fix various docstrings
        using fixed pytest-examples by [@dmontagu](https://github.com/dmontagu) in
        [#6607](https://github.com/pydantic/pydantic/pull/6607)* Handle function validators
        in a discriminated union by [@dmontagu](https://github.com/dmontagu) in [#6570](https://github.com/pydantic/pydantic/pull/6570)*
        Review json_schema.md by [@tpdorsey](https://github.com/tpdorsey) in [#6608](https://github.com/pydantic/pydantic/pull/6608)*
        Make validate_call work on basemodel methods by [@dmontagu](https://github.com/dmontagu)
        in [#6569](https://github.com/pydantic/pydantic/pull/6569)* add test for big
        int json serde by [@davidhewitt](https://github.com/davidhewitt) in [#6614](https://github.com/pydantic/pydantic/pull/6614)*
        Fix pydantic dataclass problem with dataclasses.field default_factory by [@hramezani](https://github.com/hramezani)
        in [#6616](https://github.com/pydantic/pydantic/pull/6616)* Fixed mypy type
        inference for TypeAdapter by [@zakstucke](https://github.com/zakstucke) in
        [#6617](https://github.com/pydantic/pydantic/pull/6617)* Make it work to use
        None as a generic parameter by [@dmontagu](https://github.com/dmontagu) in
        [#6609](https://github.com/pydantic/pydantic/pull/6609)* Make it work to use
        `$ref` as an alias by [@dmontagu](https://github.com/dmontagu) in [#6568](https://github.com/pydantic/pydantic/pull/6568)*
        add note to migration guide about changes to `AnyUrl` etc by [@davidhewitt](https://github.com/davidhewitt)
        in [#6618](https://github.com/pydantic/pydantic/pull/6618)* \U0001F41B Support
        defining `json_schema_extra` on `RootModel` using `Field` by [@lig](https://github.com/lig)
        in [#6622](https://github.com/pydantic/pydantic/pull/6622)* Update pre-commit
        to prevent commits to main branch on accident by [@dmontagu](https://github.com/dmontagu)
        in [#6636](https://github.com/pydantic/pydantic/pull/6636)* Fix PDM CI for
        python 3.7 on MacOS/windows by [@dmontagu](https://github.com/dmontagu) in
        [#6627](https://github.com/pydantic/pydantic/pull/6627)* Produce more accurate
        signatures for pydantic dataclasses by [@dmontagu](https://github.com/dmontagu)
        in [#6633](https://github.com/pydantic/pydantic/pull/6633)* Updates to Url
        types for Pydantic V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6638](https://github.com/pydantic/pydantic/pull/6638)*
        Fix list markdown in `transform` docstring by [@StefanBRas](https://github.com/StefanBRas)
        in [#6649](https://github.com/pydantic/pydantic/pull/6649)* simplify slots_dataclass
        construction to appease mypy by [@davidhewitt](https://github.com/davidhewitt)
        in [#6639](https://github.com/pydantic/pydantic/pull/6639)* Update TypedDict
        schema generation docstring by [@adriangb](https://github.com/adriangb) in
        [#6651](https://github.com/pydantic/pydantic/pull/6651)* Detect and lint-error
        for prints by [@dmontagu](https://github.com/dmontagu) in [#6655](https://github.com/pydantic/pydantic/pull/6655)*
        Add xfailing test for pydantic-core PR 766 by [@dmontagu](https://github.com/dmontagu)
        in [#6641](https://github.com/pydantic/pydantic/pull/6641)* Ignore unrecognized
        fields from dataclasses metadata by [@dmontagu](https://github.com/dmontagu)
        in [#6634](https://github.com/pydantic/pydantic/pull/6634)* Make non-existent
        class getattr a mypy error by [@dmontagu](https://github.com/dmontagu) in
        [#6658](https://github.com/pydantic/pydantic/pull/6658)* Update pydantic-core
        to 2.3.0 by [@hramezani](https://github.com/hramezani) in [#6648](https://github.com/pydantic/pydantic/pull/6648)*
        Use OrderedDict from typing_extensions by [@dmontagu](https://github.com/dmontagu)
        in [#6664](https://github.com/pydantic/pydantic/pull/6664)* Fix typehint for
        JSON schema extra callable by [@dmontagu](https://github.com/dmontagu) in
        [#6659](https://github.com/pydantic/pydantic/pull/6659)## v2.0.2 (2023-07-05)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)* Fix bug
        where round-trip pickling/unpickling a `RootModel` would change the value
        of `__dict__`, [#6457](https://github.com/pydantic/pydantic/pull/6457) by
        [@dmontagu](https://github.com/dmontagu)* Allow single-item discriminated
        unions, [#6405](https://github.com/pydantic/pydantic/pull/6405) by [@dmontagu](https://github.com/dmontagu)*
        Fix issue with union parsing of enums, [#6440](https://github.com/pydantic/pydantic/pull/6440)
        by [@dmontagu](https://github.com/dmontagu)* Docs: Fixed `constr` documentation,
        renamed old `regex` to new `pattern`, [#6452](https://github.com/pydantic/pydantic/pull/6452)
        by [@miili](https://github.com/miili)* Change `GenerateJsonSchema.generate_definitions`
        signature, [#6436](https://github.com/pydantic/pydantic/pull/6436) by [@dmontagu](https://github.com/dmontagu)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)##
        v2.0.1 (2023-07-04)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)First
        patch release of Pydantic V2* Extra fields added via `setattr` (i.e. `m.some_extra_field
        = 'extra_value'`)  are added to `.model_extra` if `model_config` `extra='allowed'`.
        Fixed [#6333](https://github.com/pydantic/pydantic/pull/6333), [#6365](https://github.com/pydantic/pydantic/pull/6365)
        by [@aaraney](https://github.com/aaraney)* Automatically unpack JSON schema
        '$ref' for custom types, [#6343](https://github.com/pydantic/pydantic/pull/6343)
        by [@adriangb](https://github.com/adriangb)* Fix tagged unions multiple processing
        in submodels, [#6340](https://github.com/pydantic/pydantic/pull/6340) by [@suharnikov](https://github.com/suharnikov)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)##
        v2.0 (2023-06-30)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0)Pydantic
        V2 is here! :tada:See [this post](https://docs.pydantic.dev/2.0/blog/pydantic-v2-final/)
        for more details.## v2.0b3 (2023-06-16)Third beta pre-release of Pydantic
        V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b3)##
        v2.0b2 (2023-06-03)Add `from_attributes` runtime flag to `TypeAdapter.validate_python`
        and `BaseModel.model_validate`.See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b2)##
        v2.0b1 (2023-06-01)First beta pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b1)## v2.0a4
        (2023-05-05)Fourth pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a4)##
        v2.0a3 (2023-04-20)Third pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a3)## v2.0a2
        (2023-04-12)Second pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a2)##
        v2.0a1 (2023-04-03)First pre-release of Pydantic V2!See [this post](https://docs.pydantic.dev/blog/pydantic-v2-alpha/)
        for more details.... see [here](https://docs.pydantic.dev/changelog/#v0322-2019-08-17)
        for earlier changes."
      Package: pydantic
      Source: pip
      Version: 1.10.14
      Hash: ''
      licenses:
      - MIT
      Title: pydantic
      DownloadURL: https://files.pythonhosted.org/packages/df/ab/67eda485b025e9253cce0eaede9b6158a08f62af7013a883b2c8775917b2/pydantic-1.10.14.tar.gz
  bazaar:
    register: 'no'
    prim: 24/CTX1030577
    community_link: https://pypi.org/project/pydantic
    community_name: https://pypi.org/project/pydantic
    community_url: https://pypi.org/project/pydantic
    component_comment: ''
    component_highlevel_description: Data validation using Python type hints
    component_name: pydantic
    component_platform: linux
    component_programing_language: Python
    component_version: 1.10.14
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/df/ab/67eda485b025e9253cce0eaede9b6158a08f62af7013a883b2c8775917b2/pydantic-1.10.14.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1076622&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United Kingdom
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pydantic
    target_sw: linux
    vendor: pip
    version: 1.10.14
    web_url: https://pypi.org/project/pydantic/2.7.1/
  licenses:
  - MIT
  name: pydantic
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.10.14
  mimer:
    linking: Static
    product_number: CTX1030577
    product_version_label: 1.10.14
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pydantic+2.0
  additional_info:
    fossa-attribution:
      Description: "# Pydantic[![CI](https://img.shields.io/github/actions/workflow/status/pydantic/pydantic/ci.yml?branch=main&logo=github&label=CI)](https://github.com/pydantic/pydantic/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[![Coverage](https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic.svg)](https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic)[![pypi](https://img.shields.io/pypi/v/pydantic.svg)](https://pypi.python.org/pypi/pydantic)[![CondaForge](https://img.shields.io/conda/v/conda-forge/pydantic.svg)](https://anaconda.org/conda-forge/pydantic)[![downloads](https://static.pepy.tech/badge/pydantic/month)](https://pepy.tech/project/pydantic)[![versions](https://img.shields.io/pypi/pyversions/pydantic.svg)](https://github.com/pydantic/pydantic)[![license](https://img.shields.io/github/license/pydantic/pydantic.svg)](https://github.com/pydantic/pydantic/blob/main/LICENSE)[![Pydantic
        v2](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json)](https://docs.pydantic.dev/latest/contributing/#badges)Data
        validation using Python type hints.Fast and extensible, Pydantic plays nicely
        with your linters/IDE/brain.Define how data should be in pure, canonical Python
        3.8+; validate it with Pydantic.## Pydantic Company :rocket:We've started
        a company based on the principles that I believe have led to Pydantic's success.Learn
        more from the [Company Announcement](https://blog.pydantic.dev/blog/2023/02/16/company-announcement--pydantic/).##
        Pydantic V1.10 vs. V2Pydantic V2 is a ground-up rewrite that offers many new
        features, performance improvements, and some breaking changes compared to
        Pydantic V1.If you're using Pydantic V1 you may want to look at the[pydantic
        V1.10 Documentation](https://docs.pydantic.dev/) or,[`1.10.X-fixes` git branch](https://github.com/pydantic/pydantic/tree/1.10.X-fixes).
        Pydantic V2 also ships with the latest version of Pydantic V1 built in so
        that you can incrementally upgrade your code base and projects: `from pydantic
        import v1 as pydantic_v1`.## HelpSee [documentation](https://docs.pydantic.dev/)
        for more details.## InstallationInstall using `pip install -U pydantic` or
        `conda install pydantic -c conda-forge`.For more installation options to make
        Pydantic even faster,see the [Install](https://docs.pydantic.dev/install/)
        section in the documentation.## A Simple Example```pyfrom datetime import
        datetimefrom typing import List, Optionalfrom pydantic import BaseModelclass
        User(BaseModel):    id: int    name: str = 'John Doe'    signup_ts: Optional[datetime]
        = None    friends: List[int] = []external_data = {'id': '123', 'signup_ts':
        '2017-06-01 12:22', 'friends': [1, '2', b'3']}user = User(**external_data)print(user)#>
        User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22)
        friends=[1, 2, 3]print(user.id)#> 123```## ContributingFor guidance on setting
        up a development environment and how to make acontribution to Pydantic, see[Contributing
        to Pydantic](https://docs.pydantic.dev/contributing/).## Reporting a Security
        VulnerabilitySee our [security policy](https://github.com/pydantic/pydantic/security/policy).##
        Changelog## v2.7.1 (2024-04-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.1)###
        What's Changed#### Packaging* Bump `pydantic-core` to `v2.18.2` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9307](https://github.com/pydantic/pydantic/pull/9307)#### New Features*
        Ftp and Websocket connection strings support by [@CherrySuryp](https://github.com/CherrySuryp)
        in [#9205](https://github.com/pydantic/pydantic/pull/9205)#### Changes* Use
        field description for RootModel schema description when there is `\u2026`
        by [@LouisGobert](https://github.com/LouisGobert) in [#9214](https://github.com/pydantic/pydantic/pull/9214)####
        Fixes* Fix `validation_alias` behavior with `model_construct` for `AliasChoices`
        and `AliasPath` by [@sydney-runkle](https://github.com/sydney-runkle) in [#9223](https://github.com/pydantic/pydantic/pull/9223)*
        Revert `typing.Literal` and import it outside the TYPE_CHECKING block by [@frost-nzcr4](https://github.com/frost-nzcr4)
        in [#9232](https://github.com/pydantic/pydantic/pull/9232)* Fix `Secret` serialization
        schema, applicable for unions by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9240](https://github.com/pydantic/pydantic/pull/9240)* Fix `strict` application
        to `function-after` with `use_enum_values` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9279](https://github.com/pydantic/pydantic/pull/9279)* Address case where
        `model_construct` on a class which defines `model_post_init` fails with `AttributeError`
        by [@babygrimes](https://github.com/babygrimes) in [#9168](https://github.com/pydantic/pydantic/pull/9168)*
        Fix `model_json_schema` with config types by [@NeevCohen](https://github.com/NeevCohen)
        in [#9287](https://github.com/pydantic/pydantic/pull/9287)* Support multiple
        zeros as an `int` by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/pydantic-core#1269](https://github.com/pydantic/pydantic-core/pull/1269)*
        Fix validation of `int`s with leading unary plus by [@cknv](https://github.com/cknv)
        in [pydantic/pydantic-core#1272](https://github.com/pydantic/pydantic-core/pull/1272)*
        Fix interaction between `extra != 'ignore'` and `from_attributes=True` by
        [@davidhewitt](https://github.com/davidhewitt) in [pydantic/pydantic-core#1276](https://github.com/pydantic/pydantic-core/pull/1276)*
        Handle error from `Enum`'s `missing` function as `ValidationError` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1274](https://github.com/pydantic/pydantic-core/pull/1754)*
        Fix memory leak with `Iterable` validation by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1271](https://github.com/pydantic/pydantic-core/pull/1751)###
        New Contributors* [@zzstoatzz](https://github.com/zzstoatzz) made their first
        contribution in [#9219](https://github.com/pydantic/pydantic/pull/9219)* [@frost-nzcr4](https://github.com/frost-nzcr4)
        made their first contribution in [#9232](https://github.com/pydantic/pydantic/pull/9232)*
        [@CherrySuryp](https://github.com/CherrySuryp) made their first contribution
        in [#9205](https://github.com/pydantic/pydantic/pull/9205)* [@vagenas](https://github.com/vagenas)
        made their first contribution in [#9268](https://github.com/pydantic/pydantic/pull/9268)*
        [@ollz272](https://github.com/ollz272) made their first contribution in [#9262](https://github.com/pydantic/pydantic/pull/9262)*
        [@babygrimes](https://github.com/babygrimes) made their first contribution
        in [#9168](https://github.com/pydantic/pydantic/pull/9168)* [@swelborn](https://github.com/swelborn)
        made their first contribution in [#9296](https://github.com/pydantic/pydantic/pull/9296)*
        [@kf-novi](https://github.com/kf-novi) made their first contribution in [#9236](https://github.com/pydantic/pydantic/pull/9236)*
        [@lgeiger](https://github.com/lgeiger) made their first contribution in [#9288](https://github.com/pydantic/pydantic/pull/9288)##
        v2.7.0 (2024-04-11)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0)The
        code released in v2.7.0 is practically identical to that of v2.7.0b1.### What's
        Changed#### Packaging* Reorganize `pyproject.toml` sections by [@Viicos](https://github.com/Viicos)
        in [#8899](https://github.com/pydantic/pydantic/pull/8899)* Bump `pydantic-core`
        to `v2.18.1` by [@sydney-runkle](https://github.com/sydney-runkle) in [#9211](https://github.com/pydantic/pydantic/pull/9211)*
        Adopt `jiter` `v0.2.0` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1250](https://github.com/pydantic/pydantic-core/pull/1250)####
        New Features* Extract attribute docstrings from `FieldInfo.description` by
        [@Viicos](https://github.com/Viicos) in [#6563](https://github.com/pydantic/pydantic/pull/6563)*
        Add a `with_config` decorator to comply with typing spec by [@Viicos](https://github.com/Viicos)
        in [#8611](https://github.com/pydantic/pydantic/pull/8611)* Allow an optional
        separator splitting the value and unit of the result of `ByteSize.human_readable`
        by [@jks15satoshi](https://github.com/jks15satoshi) in [#8706](https://github.com/pydantic/pydantic/pull/8706)*
        Add generic `Secret` base type by [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        in [#8519](https://github.com/pydantic/pydantic/pull/8519)* Make use of `Sphinx`
        inventories for cross references in docs by [@Viicos](https://github.com/Viicos)
        in [#8682](https://github.com/pydantic/pydantic/pull/8682)* Add environment
        variable to disable plugins by [@geospackle](https://github.com/geospackle)
        in [#8767](https://github.com/pydantic/pydantic/pull/8767)* Add support for
        `deprecated` fields by [@Viicos](https://github.com/Viicos) in [#8237](https://github.com/pydantic/pydantic/pull/8237)*
        Allow `field_serializer('*')` by [@ornariece](https://github.com/ornariece)
        in [#9001](https://github.com/pydantic/pydantic/pull/9001)* Handle a case
        when `model_config` is defined as a model property by [@alexeyt101](https://github.com/alexeyt101)
        in [#9004](https://github.com/pydantic/pydantic/pull/9004)* Update `create_model()`
        to support `typing.Annotated` as input by [@wannieman98](https://github.com/wannieman98)
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* Add `ClickhouseDsn`
        support by [@solidguy7](https://github.com/solidguy7) in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        Add support for `re.Pattern[str]` to `pattern` field by [@jag-k](https://github.com/jag-k)
        in [#9053](https://github.com/pydantic/pydantic/pull/9053)* Support for `serialize_as_any`
        runtime setting by [@sydney-runkle](https://github.com/sydney-runkle) in [#8830](https://github.com/pydantic/pydantic/pull/8830)*
        Add support for `typing.Self` by [@Youssefares](https://github.com/Youssefares)
        in [#9023](https://github.com/pydantic/pydantic/pull/9023)* Ability to pass
        `context` to serialization by [@ornariece](https://github.com/ornariece) in
        [#8965](https://github.com/pydantic/pydantic/pull/8965)* Add feedback widget
        to docs with flarelytics integration by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9129](https://github.com/pydantic/pydantic/pull/9129)* Support for parsing
        partial JSON strings in Python by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/jiter#66](https://github.com/pydantic/jiter/pull/66)**Finalized
        in v2.7.0, rather than v2.7.0b1:*** Add support for field level number to
        str coercion option by [@NeevCohen](https://github.com/NeevCohen) in [#9137](https://github.com/pydantic/pydantic/pull/9137)*
        Update `warnings` parameter for serialization utilities to allow raising a
        warning by [@Lance-Drane](https://github.com/Lance-Drane) in [#9166](https://github.com/pydantic/pydantic/pull/9166)####
        Changes* Correct docs, logic for `model_construct` behavior with `extra` by
        [@sydney-runkle](https://github.com/sydney-runkle) in [#8807](https://github.com/pydantic/pydantic/pull/8807)*
        Improve error message for improper `RootModel` subclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8857](https://github.com/pydantic/pydantic/pull/8857)* Use `PEP570` syntax
        by [@Viicos](https://github.com/Viicos) in [#8940](https://github.com/pydantic/pydantic/pull/8940)*
        Add `enum` and `type` to the JSON schema for single item literals by [@dmontagu](https://github.com/dmontagu)
        in [#8944](https://github.com/pydantic/pydantic/pull/8944)* Deprecate `update_json_schema`
        internal function by [@sydney-runkle](https://github.com/sydney-runkle) in
        [#9125](https://github.com/pydantic/pydantic/pull/9125)* Serialize duration
        to hour minute second, instead of just seconds by [@kakilangit](https://github.com/kakilangit)
        in [pydantic/speedate#50](https://github.com/pydantic/speedate/pull/50)* Trimming
        str before parsing to int and float by [@hungtsetse](https://github.com/hungtsetse)
        in [pydantic/pydantic-core#1203](https://github.com/pydantic/pydantic-core/pull/1203)####
        Performance* `enum` validator improvements by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9045](https://github.com/pydantic/pydantic/pull/9045)* Move `enum` validation
        and serialization to Rust by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9064](https://github.com/pydantic/pydantic/pull/9064)* Improve schema
        generation for nested dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9114](https://github.com/pydantic/pydantic/pull/9114)* Fast path for
        ASCII python string creation in JSON by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#72](https://github.com/pydantic/jiter/pull/72)* SIMD
        integer and string JSON parsing on `aarch64`(**Note:** SIMD on x86 will be
        implemented in a future release) by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#65](https://github.com/pydantic/jiter/pull/65)* Support
        JSON `Cow<str>` from `jiter` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1231](https://github.com/pydantic/pydantic-core/pull/1231)*
        MAJOR performance improvement: update to PyO3 0.21 final by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1248](https://github.com/pydantic/pydantic-core/pull/1248)*
        cache Python strings by [@samuelcolvin](https://github.com/samuelcolvin) in
        [pydantic/pydantic-core#1240](https://github.com/pydantic/pydantic-core/pull/1240)####
        Fixes* Fix strict parsing for some `Sequence`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8614](https://github.com/pydantic/pydantic/pull/8614)* Add a check on
        the existence of `__qualname__` by [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        in [#8642](https://github.com/pydantic/pydantic/pull/8642)* Handle `__pydantic_extra__`
        annotation being a string or inherited by [@alexmojaki](https://github.com/alexmojaki)
        in [#8659](https://github.com/pydantic/pydantic/pull/8659)* Fix json validation
        for `NameEmail` by [@Holi0317](https://github.com/Holi0317) in [#8650](https://github.com/pydantic/pydantic/pull/8650)*
        Fix type-safety of attribute access in `BaseModel` by [@bluenote10](https://github.com/bluenote10)
        in [#8651](https://github.com/pydantic/pydantic/pull/8651)* Fix bug with `mypy`
        plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with plain validator by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* fixes `__pydantic_config__`
        ignored for TypeDict by [@13sin](https://github.com/13sin) in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        Fix test failures with `pytest v8.0.0` due to `pytest.warns()` starting to
        work inside `pytest.raises()` by [@mgorny](https://github.com/mgorny) in [#8678](https://github.com/pydantic/pydantic/pull/8678)*
        Use `is_valid_field` from 1.x for `mypy` plugin by [@DanielNoord](https://github.com/DanielNoord)
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* Better-support
        `mypy` strict equality flag by [@dmontagu](https://github.com/dmontagu) in
        [#8799](https://github.com/pydantic/pydantic/pull/8799)* model_json_schema
        export with Annotated types misses 'required' parameters by [@LouisGobert](https://github.com/LouisGobert)
        in [#8793](https://github.com/pydantic/pydantic/pull/8793)* Fix default inclusion
        in `FieldInfo.__repr_args__` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8801](https://github.com/pydantic/pydantic/pull/8801)* Fix resolution
        of forward refs in dataclass base classes that are not present in the subclass
        module namespace by [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn)
        in [#8751](https://github.com/pydantic/pydantic/pull/8751)* Fix `BaseModel`
        type annotations to be resolvable by `typing.get_type_hints` by [@devmonkey22](https://github.com/devmonkey22)
        in [#7680](https://github.com/pydantic/pydantic/pull/7680)* Fix: allow empty
        string aliases with `AliasGenerator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8810](https://github.com/pydantic/pydantic/pull/8810)* Fix test along
        with `date` -> `datetime` timezone assumption fix by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8823](https://github.com/pydantic/pydantic/pull/8823)* Fix deprecation
        warning with usage of `ast.Str` by [@Viicos](https://github.com/Viicos) in
        [#8837](https://github.com/pydantic/pydantic/pull/8837)* Add missing `deprecated`
        decorators by [@Viicos](https://github.com/Viicos) in [#8877](https://github.com/pydantic/pydantic/pull/8877)*
        Fix serialization of `NameEmail` if name includes an email address by [@NeevCohen](https://github.com/NeevCohen)
        in [#8860](https://github.com/pydantic/pydantic/pull/8860)* Add information
        about class in error message of schema generation by [@Czaki](https://github.com/Czaki)
        in [#8917](https://github.com/pydantic/pydantic/pull/8917)* Make `TypeAdapter`'s
        typing compatible with special forms by [@adriangb](https://github.com/adriangb)
        in [#8923](https://github.com/pydantic/pydantic/pull/8923)* Fix issue with
        config behavior being baked into the ref schema for `enum`s by [@dmontagu](https://github.com/dmontagu)
        in [#8920](https://github.com/pydantic/pydantic/pull/8920)* More helpful error
        re wrong `model_json_schema` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8928](https://github.com/pydantic/pydantic/pull/8928)* Fix nested discriminated
        union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix schema build
        for nested dataclasses / TypedDicts with discriminators by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8950](https://github.com/pydantic/pydantic/pull/8950)* Remove unnecessary
        logic for definitions schema gen with discriminated unions by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8951](https://github.com/pydantic/pydantic/pull/8951)* Fix handling of
        optionals in `mypy` plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9008](https://github.com/pydantic/pydantic/pull/9008)* Fix `PlainSerializer`
        usage with std type constructor by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9031](https://github.com/pydantic/pydantic/pull/9031)* Remove unnecessary
        warning for config in plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9039](https://github.com/pydantic/pydantic/pull/9039)* Fix default value
        serializing by [@NeevCohen](https://github.com/NeevCohen) in [#9066](https://github.com/pydantic/pydantic/pull/9066)*
        Fix extra fields check in `Model.__getattr__()` by [@NeevCohen](https://github.com/NeevCohen)
        in [#9082](https://github.com/pydantic/pydantic/pull/9082)* Fix `ClassVar`
        forward ref inherited from parent class by [@alexmojaki](https://github.com/alexmojaki)
        in [#9097](https://github.com/pydantic/pydantic/pull/9097)* fix sequence like
        validator with strict `True` by [@andresliszt](https://github.com/andresliszt)
        in [#8977](https://github.com/pydantic/pydantic/pull/8977)* Improve warning
        message when a field name shadows a field in a parent model by [@chan-vince](https://github.com/chan-vince)
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* Do not warn about
        shadowed fields if they are not redefined in a child class by [@chan-vince](https://github.com/chan-vince)
        in [#9111](https://github.com/pydantic/pydantic/pull/9111)* Fix discriminated
        union bug with unsubstituted type var by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9124](https://github.com/pydantic/pydantic/pull/9124)* Support serialization
        of `deque` when passed to `Sequence[blah blah blah]` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9128](https://github.com/pydantic/pydantic/pull/9128)* Init private attributes
        from super-types in `model_post_init` by [@Viicos](https://github.com/Viicos)
        in [#9134](https://github.com/pydantic/pydantic/pull/9134)* fix `model_construct`
        with `validation_alias` by [@ornariece](https://github.com/ornariece) in [#9144](https://github.com/pydantic/pydantic/pull/9144)*
        Ensure json-schema generator handles `Literal` `null` types by [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        in [#9135](https://github.com/pydantic/pydantic/pull/9135)* **Fixed in v2.7.0**:
        Fix allow extra generic by [@dmontagu](https://github.com/dmontagu) in [#9193](https://github.com/pydantic/pydantic/pull/9193)###
        New Contributors* [@hungtsetse](https://github.com/hungtsetse) made their
        first contribution in [#8546](https://github.com/pydantic/pydantic/pull/8546)*
        [@StrawHatDrag0n](https://github.com/StrawHatDrag0n) made their first contribution
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)* [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        made their first contribution in [#8642](https://github.com/pydantic/pydantic/pull/8642)*
        [@Holi0317](https://github.com/Holi0317) made their first contribution in
        [#8650](https://github.com/pydantic/pydantic/pull/8650)* [@bluenote10](https://github.com/bluenote10)
        made their first contribution in [#8651](https://github.com/pydantic/pydantic/pull/8651)*
        [@ADSteele916](https://github.com/ADSteele916) made their first contribution
        in [#8703](https://github.com/pydantic/pydantic/pull/8703)* [@musicinmybrain](https://github.com/musicinmybrain)
        made their first contribution in [#8731](https://github.com/pydantic/pydantic/pull/8731)*
        [@jks15satoshi](https://github.com/jks15satoshi) made their first contribution
        in [#8706](https://github.com/pydantic/pydantic/pull/8706)* [@13sin](https://github.com/13sin)
        made their first contribution in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        [@DanielNoord](https://github.com/DanielNoord) made their first contribution
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        made their first contribution in [#8519](https://github.com/pydantic/pydantic/pull/8519)*
        [@chris-griffin](https://github.com/chris-griffin) made their first contribution
        in [#8775](https://github.com/pydantic/pydantic/pull/8775)* [@LouisGobert](https://github.com/LouisGobert)
        made their first contribution in [#8793](https://github.com/pydantic/pydantic/pull/8793)*
        [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn) made their first
        contribution in [#8751](https://github.com/pydantic/pydantic/pull/8751)* [@devmonkey22](https://github.com/devmonkey22)
        made their first contribution in [#7680](https://github.com/pydantic/pydantic/pull/7680)*
        [@adamency](https://github.com/adamency) made their first contribution in
        [#8847](https://github.com/pydantic/pydantic/pull/8847)* [@MamfTheKramf](https://github.com/MamfTheKramf)
        made their first contribution in [#8851](https://github.com/pydantic/pydantic/pull/8851)*
        [@ornariece](https://github.com/ornariece) made their first contribution in
        [#9001](https://github.com/pydantic/pydantic/pull/9001)* [@alexeyt101](https://github.com/alexeyt101)
        made their first contribution in [#9004](https://github.com/pydantic/pydantic/pull/9004)*
        [@wannieman98](https://github.com/wannieman98) made their first contribution
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* [@solidguy7](https://github.com/solidguy7)
        made their first contribution in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        [@kloczek](https://github.com/kloczek) made their first contribution in [#9047](https://github.com/pydantic/pydantic/pull/9047)*
        [@jag-k](https://github.com/jag-k) made their first contribution in [#9053](https://github.com/pydantic/pydantic/pull/9053)*
        [@priya-gitTest](https://github.com/priya-gitTest) made their first contribution
        in [#9088](https://github.com/pydantic/pydantic/pull/9088)* [@Youssefares](https://github.com/Youssefares)
        made their first contribution in [#9023](https://github.com/pydantic/pydantic/pull/9023)*
        [@chan-vince](https://github.com/chan-vince) made their first contribution
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        made their first contribution in [#9135](https://github.com/pydantic/pydantic/pull/9135)*
        [@Lance-Drane](https://github.com/Lance-Drane) made their first contribution
        in [#9166](https://github.com/pydantic/pydantic/pull/9166)## v2.7.0b1 (2024-04-03)Pre-release,
        see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0b1)
        for details.## v2.6.4 (2024-03-12)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.4)###
        What's Changed#### Fixes* Fix usage of `AliasGenerator` with `computed_field`
        decorator by [@sydney-runkle](https://github.com/sydney-runkle) in [#8806](https://github.com/pydantic/pydantic/pull/8806)*
        Fix nested discriminated union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix bug with no_strict_optional=True
        caused by API deferral by [@dmontagu](https://github.com/dmontagu) in [#8826](https://github.com/pydantic/pydantic/pull/8826)##
        v2.6.3 (2024-02-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.3)###
        What's Changed#### Packaging* Update `pydantic-settings` version in the docs
        by [@hramezani](https://github.com/hramezani) in [#8906](https://github.com/pydantic/pydantic/pull/8906)####
        Fixes* Fix discriminated union schema gen bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8904](https://github.com/pydantic/pydantic/pull/8904)## v2.6.2 (2024-02-23)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.6.2)### What's
        Changed#### Packaging* Upgrade to `pydantic-core` 2.16.3 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8879](https://github.com/pydantic/pydantic/pull/8879)#### Fixes* 'YYYY-MM-DD'
        date string coerced to datetime shouldn't infer timezone by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1193](https://github.com/pydantic/pydantic-core/pull/1193)##
        v2.6.1 (2024-02-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.1)###
        What's Changed#### Packaging* Upgrade to `pydantic-core` 2.16.2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8717](https://github.com/pydantic/pydantic/pull/8717)#### Fixes* Fix
        bug with `mypy` plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        `Field` annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with `PlainValidator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* Fix warning for
        tuple of wrong size in `Union` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1174](https://github.com/pydantic/pydantic-core/pull/1174)*
        Fix `computed_field` JSON serializer `exclude_none` behavior by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1187](https://github.com/pydantic/pydantic-core/pull/1187)##
        v2.6.0 (2024-01-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0)The
        code released in v2.6.0 is practically identical to that of v2.6.0b1.### What's
        Changed#### Packaging* Check for `email-validator` version >= 2.0 by [@commonism](https://github.com/commonism)
        in [#6033](https://github.com/pydantic/pydantic/pull/6033)* Upgrade `ruff``
        target version to Python 3.8 by [@Elkiwa](https://github.com/Elkiwa) in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        Update to `pydantic-extra-types==2.4.1` by [@yezz123](https://github.com/yezz123)
        in [#8478](https://github.com/pydantic/pydantic/pull/8478)* Update to `pyright==1.1.345`
        by [@Viicos](https://github.com/Viicos) in [#8453](https://github.com/pydantic/pydantic/pull/8453)*
        Update pydantic-core from 2.14.6 to 2.16.1, significant changes from these
        updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.14.6...v2.16.1)####
        New Features* Add `NatsDsn` by [@ekeew](https://github.com/ekeew) in [#6874](https://github.com/pydantic/pydantic/pull/6874)*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)* Add `types.OnErrorOmit`
        by [@adriangb](https://github.com/adriangb) in [#8222](https://github.com/pydantic/pydantic/pull/8222)*
        Support `AliasGenerator` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8282](https://github.com/pydantic/pydantic/pull/8282)* Add Pydantic People
        Page to docs by [@sydney-runkle](https://github.com/sydney-runkle) in [#8345](https://github.com/pydantic/pydantic/pull/8345)*
        Support `yyyy-MM-DD` datetime parsing by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8404](https://github.com/pydantic/pydantic/pull/8404)* Added bits conversions
        to the `ByteSize` class [#8415](https://github.com/pydantic/pydantic/issues/8415)
        by [@luca-matei](https://github.com/luca-matei) in [#8507](https://github.com/pydantic/pydantic/pull/8507)*
        Enable json schema creation with type `ByteSize` by [@geospackle](https://github.com/geospackle)
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* Add `eval_type_backport`
        to handle union operator and builtin generic subscripting in older Pythons
        by [@alexmojaki](https://github.com/alexmojaki) in [#8209](https://github.com/pydantic/pydantic/pull/8209)*
        Add support for `dataclass` fields `init` by [@dmontagu](https://github.com/dmontagu)
        in [#8552](https://github.com/pydantic/pydantic/pull/8552)* Implement pickling
        for `ValidationError` by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1119](https://github.com/pydantic/pydantic-core/pull/1119)*
        Add unified tuple validator that can handle \"variadic\" tuples via PEP-646
        by [@dmontagu](https://github.com/dmontagu) in [pydantic/pydantic-core#865](https://github.com/pydantic/pydantic-core/pull/865)####
        Changes* Drop Python3.7 support by [@hramezani](https://github.com/hramezani)
        in [#7188](https://github.com/pydantic/pydantic/pull/7188)* Drop Python 3.7,
        and PyPy 3.7 and 3.8 by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1129](https://github.com/pydantic/pydantic-core/pull/1129)*
        Use positional-only `self` in `BaseModel` constructor, so no field name can
        ever conflict with it by [@ariebovenberg](https://github.com/ariebovenberg)
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* Make `@validate_call`
        return a function instead of a custom descriptor - fixes binding issue with
        inheritance and adds `self/cls` argument to validation errors by [@alexmojaki](https://github.com/alexmojaki)
        in [#8268](https://github.com/pydantic/pydantic/pull/8268)* Exclude `BaseModel`
        docstring from JSON schema description by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8352](https://github.com/pydantic/pydantic/pull/8352)* Introducing `classproperty`
        decorator for `model_computed_fields` by [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        in [#8437](https://github.com/pydantic/pydantic/pull/8437)* Explicitly raise
        an error if field names clashes with types by [@Viicos](https://github.com/Viicos)
        in [#8243](https://github.com/pydantic/pydantic/pull/8243)* Use stricter serializer
        for unions of simple types by [@alexdrydew](https://github.com/alexdrydew)
        [pydantic/pydantic-core#1132](https://github.com/pydantic/pydantic-core/pull/1132)####
        Performance* Add Codspeed profiling Actions workflow  by [@lambertsbennett](https://github.com/lambertsbennett)
        in [#8054](https://github.com/pydantic/pydantic/pull/8054)* Improve `int`
        extraction by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/pydantic-core#1155](https://github.com/pydantic/pydantic-core/pull/1155)*
        Improve performance of recursion guard by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1156](https://github.com/pydantic/pydantic-core/pull/1156)*
        `dataclass` serialization speedups by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1162](https://github.com/pydantic/pydantic-core/pull/1162)*
        Avoid `HashMap` creation when looking up small JSON objects in `LazyIndexMaps`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/jiter#55](https://github.com/pydantic/jiter/pull/55)*
        use hashbrown to speedup python string caching by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#51](https://github.com/pydantic/jiter/pull/51)* Replace
        `Peak` with more efficient `Peek` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#48](https://github.com/pydantic/jiter/pull/48)#### Fixes*
        Move `getattr` warning in deprecated `BaseConfig` by [@tlambert03](https://github.com/tlambert03)
        in [#7183](https://github.com/pydantic/pydantic/pull/7183)* Only hash `model_fields`,
        not whole `__dict__` by [@alexmojaki](https://github.com/alexmojaki) in [#7786](https://github.com/pydantic/pydantic/pull/7786)*
        Fix mishandling of unions while freezing types in the `mypy` plugin by [@dmontagu](https://github.com/dmontagu)
        in [#7411](https://github.com/pydantic/pydantic/pull/7411)* Fix `mypy` error
        on untyped `ClassVar` by [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx)
        in [#8138](https://github.com/pydantic/pydantic/pull/8138)* Only compare pydantic
        fields in `BaseModel.__eq__` instead of whole `__dict__` by [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        in [#7825](https://github.com/pydantic/pydantic/pull/7825)* Update `strict`
        docstring in `model_validate` method. by [@LukeTonin](https://github.com/LukeTonin)
        in [#8223](https://github.com/pydantic/pydantic/pull/8223)* Fix overload position
        of `computed_field` by [@Viicos](https://github.com/Viicos) in [#8227](https://github.com/pydantic/pydantic/pull/8227)*
        Fix custom type type casting used in multiple attributes by [@ianhfc](https://github.com/ianhfc)
        in [#8066](https://github.com/pydantic/pydantic/pull/8066)* Fix issue not
        allowing `validate_call` decorator to be dynamically assigned to a class method
        by [@jusexton](https://github.com/jusexton) in [#8249](https://github.com/pydantic/pydantic/pull/8249)*
        Fix issue `unittest.mock` deprecation warnings  by [@ibleedicare](https://github.com/ibleedicare)
        in [#8262](https://github.com/pydantic/pydantic/pull/8262)* Added tests for
        the case `JsonValue` contains subclassed primitive values by [@jusexton](https://github.com/jusexton)
        in [#8286](https://github.com/pydantic/pydantic/pull/8286)* Fix `mypy` error
        on free before validator (classmethod) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8285](https://github.com/pydantic/pydantic/pull/8285)* Fix `to_snake`
        conversion by [@jevins09](https://github.com/jevins09) in [#8316](https://github.com/pydantic/pydantic/pull/8316)*
        Fix type annotation of `ModelMetaclass.__prepare__` by [@slanzmich](https://github.com/slanzmich)
        in [#8305](https://github.com/pydantic/pydantic/pull/8305)* Disallow `config`
        specification when initializing a `TypeAdapter` when the annotated type has
        config already by [@sydney-runkle](https://github.com/sydney-runkle) in [#8365](https://github.com/pydantic/pydantic/pull/8365)*
        Fix a naming issue with JSON schema for generics parametrized by recursive
        type aliases by [@dmontagu](https://github.com/dmontagu) in [#8389](https://github.com/pydantic/pydantic/pull/8389)*
        Fix type annotation in pydantic people script by [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        in [#8402](https://github.com/pydantic/pydantic/pull/8402)* Add support for
        field `alias` in `dataclass` signature by [@NeevCohen](https://github.com/NeevCohen)
        in [#8387](https://github.com/pydantic/pydantic/pull/8387)* Fix bug with schema
        generation with `Field(...)` in a forward ref by [@dmontagu](https://github.com/dmontagu)
        in [#8494](https://github.com/pydantic/pydantic/pull/8494)* Fix ordering of
        keys in `__dict__` with `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8500](https://github.com/pydantic/pydantic/pull/8500)* Fix module `path_type`
        creation when globals does not contain `__name__` by [@hramezani](https://github.com/hramezani)
        in [#8470](https://github.com/pydantic/pydantic/pull/8470)* Fix for namespace
        issue with dataclasses with `from __future__ import annotations` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8513](https://github.com/pydantic/pydantic/pull/8513)* Fix: make function
        validator types positional-only by [@pmmmwh](https://github.com/pmmmwh) in
        [#8479](https://github.com/pydantic/pydantic/pull/8479)* Fix usage of `@deprecated`
        by [@Viicos](https://github.com/Viicos) in [#8294](https://github.com/pydantic/pydantic/pull/8294)*
        Add more support for private attributes in `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8525](https://github.com/pydantic/pydantic/pull/8525)* Use a stack for
        the types namespace by [@dmontagu](https://github.com/dmontagu) in [#8378](https://github.com/pydantic/pydantic/pull/8378)*
        Fix schema-building bug with `TypeAliasType` for types with refs by [@dmontagu](https://github.com/dmontagu)
        in [#8526](https://github.com/pydantic/pydantic/pull/8526)* Support `pydantic.Field(repr=False)`
        in dataclasses by [@tigeryy2](https://github.com/tigeryy2) in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        Override `dataclass_transform` behavior for `RootModel` by [@Viicos](https://github.com/Viicos)
        in [#8163](https://github.com/pydantic/pydantic/pull/8163)* Refactor signature
        generation for simplicity by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8572](https://github.com/pydantic/pydantic/pull/8572)* Fix ordering bug
        of PlainValidator annotation by [@Anvil](https://github.com/Anvil) in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        Fix `exclude_none` for json serialization of `computed_field`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1098](https://github.com/pydantic/pydantic-core/pull/1098)*
        Support yyyy-MM-DD string for datetimes by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1124](https://github.com/pydantic/pydantic-core/pull/1124)*
        Tweak ordering of definitions in generated schemas by [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)### New Contributors####
        `pydantic`* [@ekeew](https://github.com/ekeew) made their first contribution
        in [#6874](https://github.com/pydantic/pydantic/pull/6874)* [@lambertsbennett](https://github.com/lambertsbennett)
        made their first contribution in [#8054](https://github.com/pydantic/pydantic/pull/8054)*
        [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx) made their first
        contribution in [#8138](https://github.com/pydantic/pydantic/pull/8138)* [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        made their first contribution in [#7825](https://github.com/pydantic/pydantic/pull/7825)*
        [@ariebovenberg](https://github.com/ariebovenberg) made their first contribution
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* [@LukeTonin](https://github.com/LukeTonin)
        made their first contribution in [#8223](https://github.com/pydantic/pydantic/pull/8223)*
        [@denisart](https://github.com/denisart) made their first contribution in
        [#8231](https://github.com/pydantic/pydantic/pull/8231)* [@ianhfc](https://github.com/ianhfc)
        made their first contribution in [#8066](https://github.com/pydantic/pydantic/pull/8066)*
        [@eonu](https://github.com/eonu) made their first contribution in [#8255](https://github.com/pydantic/pydantic/pull/8255)*
        [@amandahla](https://github.com/amandahla) made their first contribution in
        [#8263](https://github.com/pydantic/pydantic/pull/8263)* [@ibleedicare](https://github.com/ibleedicare)
        made their first contribution in [#8262](https://github.com/pydantic/pydantic/pull/8262)*
        [@jevins09](https://github.com/jevins09) made their first contribution in
        [#8316](https://github.com/pydantic/pydantic/pull/8316)* [@cuu508](https://github.com/cuu508)
        made their first contribution in [#8322](https://github.com/pydantic/pydantic/pull/8322)*
        [@slanzmich](https://github.com/slanzmich) made their first contribution in
        [#8305](https://github.com/pydantic/pydantic/pull/8305)* [@jensenbox](https://github.com/jensenbox)
        made their first contribution in [#8331](https://github.com/pydantic/pydantic/pull/8331)*
        [@szepeviktor](https://github.com/szepeviktor) made their first contribution
        in [#8356](https://github.com/pydantic/pydantic/pull/8356)* [@Elkiwa](https://github.com/Elkiwa)
        made their first contribution in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        [@parhamfh](https://github.com/parhamfh) made their first contribution in
        [#8395](https://github.com/pydantic/pydantic/pull/8395)* [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        made their first contribution in [#8402](https://github.com/pydantic/pydantic/pull/8402)*
        [@NeevCohen](https://github.com/NeevCohen) made their first contribution in
        [#8387](https://github.com/pydantic/pydantic/pull/8387)* [@zby](https://github.com/zby)
        made their first contribution in [#8497](https://github.com/pydantic/pydantic/pull/8497)*
        [@patelnets](https://github.com/patelnets) made their first contribution in
        [#8491](https://github.com/pydantic/pydantic/pull/8491)* [@edwardwli](https://github.com/edwardwli)
        made their first contribution in [#8503](https://github.com/pydantic/pydantic/pull/8503)*
        [@luca-matei](https://github.com/luca-matei) made their first contribution
        in [#8507](https://github.com/pydantic/pydantic/pull/8507)* [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        made their first contribution in [#8437](https://github.com/pydantic/pydantic/pull/8437)*
        [@bL34cHig0](https://github.com/bL34cHig0) made their first contribution in
        [#8501](https://github.com/pydantic/pydantic/pull/8501)* [@tigeryy2](https://github.com/tigeryy2)
        made their first contribution in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        [@geospackle](https://github.com/geospackle) made their first contribution
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* [@Anvil](https://github.com/Anvil)
        made their first contribution in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        [@hungtsetse](https://github.com/hungtsetse) made their first contribution
        in [#8546](https://github.com/pydantic/pydantic/pull/8546)* [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        made their first contribution in [#8583](https://github.com/pydantic/pydantic/pull/8583)####
        `pydantic-core`* [@mariuswinger](https://github.com/mariuswinger) made their
        first contribution in [pydantic/pydantic-core#1087](https://github.com/pydantic/pydantic-core/pull/1087)*
        [@adamchainz](https://github.com/adamchainz) made their first contribution
        in [pydantic/pydantic-core#1090](https://github.com/pydantic/pydantic-core/pull/1090)*
        [@akx](https://github.com/akx) made their first contribution in [pydantic/pydantic-core#1123](https://github.com/pydantic/pydantic-core/pull/1123)##
        v2.6.0b1 (2024-01-19)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0b1)
        for details.## v2.5.3 (2023-12-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.3)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.6#### Fixes* Fix
        memory leak with recursive definitions creating reference cycles by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1125](https://github.com/pydantic/pydantic-core/pull/1125)##
        v2.5.2 (2023-11-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.2)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.5#### New Features*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)#### Fixes* Fix
        validation of `Literal` from JSON keys when used as `dict` key by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1075](https://github.com/pydantic/pydantic-core/pull/1075)*
        Fix bug re `custom_init` on members of `Union` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1076](https://github.com/pydantic/pydantic-core/pull/1076)*
        Fix `JsonValue` `bool` serialization by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8190](https://github.com/pydantic/pydantic/pull/8159)* Fix handling of
        unhashable inputs with `Literal` in `Union`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1089](https://github.com/pydantic/pydantic-core/pull/1089)##
        v2.5.1 (2023-11-15)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.1)###
        What's Changed#### Packaging* uprev pydantic-core to 2.14.3 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8120](https://github.com/pydantic/pydantic/pull/8120)#### Fixes* Fix
        package description limit by [@dmontagu](https://github.com/dmontagu) in [#8097](https://github.com/pydantic/pydantic/pull/8097)*
        Fix `ValidateCallWrapper` error when creating a model which has a [@validate_call](https://github.com/validate_call)
        wrapped field annotation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8110](https://github.com/pydantic/pydantic/pull/8110)## v2.5.0 (2023-11-13)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0)The code
        released in v2.5.0 is functionally identical to that of v2.5.0b1.### What's
        Changed#### Packaging* Update pydantic-core from 2.10.1 to 2.14.1, significant
        changes from these updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.10.1...v2.14.1)*
        Update to `pyright==1.1.335` by [@Viicos](https://github.com/Viicos) in [#8075](https://github.com/pydantic/pydantic/pull/8075)####
        New Features* Allow plugins to catch non `ValidationError` errors by [@adriangb](https://github.com/adriangb)
        in [#7806](https://github.com/pydantic/pydantic/pull/7806)* Support `__doc__`
        argument in `create_model()` by [@chris-spann](https://github.com/chris-spann)
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* Expose `regex_engine`
        flag - meaning you can use with the Rust or Python regex libraries in constraints
        by [@utkini](https://github.com/utkini) in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        Save return type generated from type annotation in `ComputedFieldInfo` by
        [@alexmojaki](https://github.com/alexmojaki) in [#7889](https://github.com/pydantic/pydantic/pull/7889)*
        Adopting `ruff` formatter by [@Luca-Blight](https://github.com/Luca-Blight)
        in [#7930](https://github.com/pydantic/pydantic/pull/7930)* Added `validation_error_cause`
        to config by [@zakstucke](https://github.com/zakstucke) in [#7626](https://github.com/pydantic/pydantic/pull/7626)*
        Make path of the item to validate available in plugin by [@hramezani](https://github.com/hramezani)
        in [#7861](https://github.com/pydantic/pydantic/pull/7861)* Add `CallableDiscriminator`
        and `Tag` by [@dmontagu](https://github.com/dmontagu) in [#7983](https://github.com/pydantic/pydantic/pull/7983)
        \ * `CallableDiscriminator` renamed to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Make union case
        tags affect union error messages by [@dmontagu](https://github.com/dmontagu)
        in [#8001](https://github.com/pydantic/pydantic/pull/8001)* Add `examples`
        and `json_schema_extra` to `@computed_field` by [@alexmojaki](https://github.com/alexmojaki)
        in [#8013](https://github.com/pydantic/pydantic/pull/8013)* Add `JsonValue`
        type by [@dmontagu](https://github.com/dmontagu) in [#7998](https://github.com/pydantic/pydantic/pull/7998)*
        Allow `str` as argument to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Add `SchemaSerializer.__reduce__`
        method to enable pickle serialization by [@edoakes](https://github.com/edoakes)
        in [pydantic/pydantic-core#1006](https://github.com/pydantic/pydantic-core/pull/1006)####
        Changes* **Significant Change:** replace `ultra_strict` with new smart union
        implementation, the way unions are validated has changed significantly to
        improve performance and correctness, we have worked hard to absolutely minimise
        the number of cases where behaviour has changed, see the PR for details -
        by [@davidhewitt](https://github.com/davidhewitt) in [pydantic/pydantic-core#867](https://github.com/pydantic/pydantic-core/pull/867)*
        Add support for instance method reassignment when `extra='allow'` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7683](https://github.com/pydantic/pydantic/pull/7683)* Support JSON schema
        generation for `Enum` types with no cases by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7927](https://github.com/pydantic/pydantic/pull/7927)* Warn if a class
        inherits from `Generic` before `BaseModel` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7891](https://github.com/pydantic/pydantic/pull/7891)#### Performance*
        New custom JSON parser, `jiter` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#974](https://github.com/pydantic/pydantic-core/pull/974)*
        PGO build for MacOS M1 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1063](https://github.com/pydantic/pydantic-core/pull/1063)*
        Use `__getattr__` for all package imports, improve import time by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7947](https://github.com/pydantic/pydantic/pull/7947)#### Fixes* Fix
        `mypy` issue with subclasses of `RootModel` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7677](https://github.com/pydantic/pydantic/pull/7677)* Properly rebuild
        the `FieldInfo` when a forward ref gets evaluated by [@dmontagu](https://github.com/dmontagu)
        in [#7698](https://github.com/pydantic/pydantic/pull/7698)* Fix failure to
        load `SecretStr` from JSON (regression in v2.4) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7729](https://github.com/pydantic/pydantic/pull/7729)* Fix `defer_build`
        behavior with `TypeAdapter` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7736](https://github.com/pydantic/pydantic/pull/7736)* Improve compatibility
        with legacy `mypy` versions by [@dmontagu](https://github.com/dmontagu) in
        [#7742](https://github.com/pydantic/pydantic/pull/7742)* Fix: update `TypeVar`
        handling when default is not set by [@pmmmwh](https://github.com/pmmmwh) in
        [#7719](https://github.com/pydantic/pydantic/pull/7719)* Support specification
        of `strict` on `Enum` type fields by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7761](https://github.com/pydantic/pydantic/pull/7761)* Wrap `weakref.ref`
        instead of subclassing to fix `cloudpickle` serialization by [@edoakes](https://github.com/edoakes)
        in [#7780](https://github.com/pydantic/pydantic/pull/7780)* Keep values of
        private attributes set within `model_post_init` in subclasses by [@alexmojaki](https://github.com/alexmojaki)
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* Add more specific
        type for non-callable `json_schema_extra` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7803](https://github.com/pydantic/pydantic/pull/7803)* Raise an error
        when deleting frozen (model) fields by [@alexmojaki](https://github.com/alexmojaki)
        in [#7800](https://github.com/pydantic/pydantic/pull/7800)* Fix schema sorting
        bug with default values by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7817](https://github.com/pydantic/pydantic/pull/7817)* Use generated
        alias for aliases that are not specified otherwise by [@alexmojaki](https://github.com/alexmojaki)
        in [#7802](https://github.com/pydantic/pydantic/pull/7802)* Support `strict`
        specification for `UUID` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7865](https://github.com/pydantic/pydantic/pull/7865)* JSON schema: fix
        extra parameter handling by [@me-and](https://github.com/me-and) in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        Fix: support `pydantic.Field(kw_only=True)` with inherited dataclasses by
        [@PrettyWood](https://github.com/PrettyWood) in [#7827](https://github.com/pydantic/pydantic/pull/7827)*
        Support `validate_call` decorator for methods in classes with `__slots__`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [#7883](https://github.com/pydantic/pydantic/pull/7883)*
        Fix pydantic dataclass problem with `dataclasses.field` default by [@hramezani](https://github.com/hramezani)
        in [#7898](https://github.com/pydantic/pydantic/pull/7898)* Fix schema generation
        for generics with union type bounds by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7899](https://github.com/pydantic/pydantic/pull/7899)* Fix version for
        `importlib_metadata` on python 3.7 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7904](https://github.com/pydantic/pydantic/pull/7904)* Support `|` operator
        (Union) in PydanticRecursiveRef by [@alexmojaki](https://github.com/alexmojaki)
        in [#7892](https://github.com/pydantic/pydantic/pull/7892)* Fix `display_as_type`
        for `TypeAliasType` in python 3.12 by [@dmontagu](https://github.com/dmontagu)
        in [#7929](https://github.com/pydantic/pydantic/pull/7929)* Add support for
        `NotRequired` generics in `TypedDict` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7932](https://github.com/pydantic/pydantic/pull/7932)* Make generic `TypeAliasType`
        specifications produce different schema definitions by [@alexdrydew](https://github.com/alexdrydew)
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* Added fix for
        signature of inherited dataclass by [@howsunjow](https://github.com/howsunjow)
        in [#7925](https://github.com/pydantic/pydantic/pull/7925)* Make the model
        name generation more robust in JSON schema by [@joakimnordling](https://github.com/joakimnordling)
        in [#7881](https://github.com/pydantic/pydantic/pull/7881)* Fix plurals in
        validation error messages (in tests) by [@Iipin](https://github.com/Iipin)
        in [#7972](https://github.com/pydantic/pydantic/pull/7972)* `PrivateAttr`
        is passed from `Annotated` default position by [@tabassco](https://github.com/tabassco)
        in [#8004](https://github.com/pydantic/pydantic/pull/8004)* Don't decode bytes
        (which may not be UTF8) when displaying SecretBytes by [@alexmojaki](https://github.com/alexmojaki)
        in [#8012](https://github.com/pydantic/pydantic/pull/8012)* Use `classmethod`
        instead of `classmethod[Any, Any, Any]` by [@Mr-Pepe](https://github.com/Mr-Pepe)
        in [#7979](https://github.com/pydantic/pydantic/pull/7979)* Clearer error
        on invalid Plugin by [@samuelcolvin](https://github.com/samuelcolvin) in [#8023](https://github.com/pydantic/pydantic/pull/8023)*
        Correct pydantic dataclasses import by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8027](https://github.com/pydantic/pydantic/pull/8027)* Fix misbehavior
        for models referencing redefined type aliases by [@dmontagu](https://github.com/dmontagu)
        in [#8050](https://github.com/pydantic/pydantic/pull/8050)* Fix `Optional`
        field with `validate_default` only performing one field validation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1002](https://github.com/pydantic/pydantic-core/pull/1002)*
        Fix `definition-ref` bug with `Dict` keys by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1014](https://github.com/pydantic/pydantic-core/pull/1014)*
        Fix bug allowing validation of `bool` types with `coerce_numbers_to_str=True`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [pydantic/pydantic-core#1017](https://github.com/pydantic/pydantic-core/pull/1017)*
        Don't accept `NaN` in float and decimal constraints by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1037](https://github.com/pydantic/pydantic-core/pull/1037)*
        Add `lax_str` and `lax_int` support for enum values not inherited from str/int
        by [@michaelhly](https://github.com/michaelhly) in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)*
        Support subclasses in lists in `Union` of `List` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1039](https://github.com/pydantic/pydantic-core/pull/1039)*
        Allow validation against `max_digits` and `decimals` to pass if normalized
        or non-normalized input is valid by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1049](https://github.com/pydantic/pydantic-core/pull/1049)*
        Fix: proper pluralization in `ValidationError` messages by [@Iipin](https://github.com/Iipin)
        in [pydantic/pydantic-core#1050](https://github.com/pydantic/pydantic-core/pull/1050)*
        Disallow the string `'-'` as `datetime` input by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/speedate#52](https://github.com/pydantic/speedate/pull/52) &
        [pydantic/pydantic-core#1060](https://github.com/pydantic/pydantic-core/pull/1060)*
        Fix: NaN and Inf float serialization by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1062](https://github.com/pydantic/pydantic-core/pull/1062)*
        Restore manylinux-compatible PGO builds by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1068](https://github.com/pydantic/pydantic-core/pull/1068)###
        New Contributors#### `pydantic`* [@schneebuzz](https://github.com/schneebuzz)
        made their first contribution in [#7699](https://github.com/pydantic/pydantic/pull/7699)*
        [@edoakes](https://github.com/edoakes) made their first contribution in [#7780](https://github.com/pydantic/pydantic/pull/7780)*
        [@alexmojaki](https://github.com/alexmojaki) made their first contribution
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* [@NickG123](https://github.com/NickG123)
        made their first contribution in [#7751](https://github.com/pydantic/pydantic/pull/7751)*
        [@gowthamgts](https://github.com/gowthamgts) made their first contribution
        in [#7830](https://github.com/pydantic/pydantic/pull/7830)* [@jamesbraza](https://github.com/jamesbraza)
        made their first contribution in [#7848](https://github.com/pydantic/pydantic/pull/7848)*
        [@laundmo](https://github.com/laundmo) made their first contribution in [#7850](https://github.com/pydantic/pydantic/pull/7850)*
        [@rahmatnazali](https://github.com/rahmatnazali) made their first contribution
        in [#7870](https://github.com/pydantic/pydantic/pull/7870)* [@waterfountain1996](https://github.com/waterfountain1996)
        made their first contribution in [#7878](https://github.com/pydantic/pydantic/pull/7878)*
        [@chris-spann](https://github.com/chris-spann) made their first contribution
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* [@me-and](https://github.com/me-and)
        made their first contribution in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        [@utkini](https://github.com/utkini) made their first contribution in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        [@bn-l](https://github.com/bn-l) made their first contribution in [#7744](https://github.com/pydantic/pydantic/pull/7744)*
        [@alexdrydew](https://github.com/alexdrydew) made their first contribution
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* [@Luca-Blight](https://github.com/Luca-Blight)
        made their first contribution in [#7930](https://github.com/pydantic/pydantic/pull/7930)*
        [@howsunjow](https://github.com/howsunjow) made their first contribution in
        [#7925](https://github.com/pydantic/pydantic/pull/7925)* [@joakimnordling](https://github.com/joakimnordling)
        made their first contribution in [#7881](https://github.com/pydantic/pydantic/pull/7881)*
        [@icfly2](https://github.com/icfly2) made their first contribution in [#7976](https://github.com/pydantic/pydantic/pull/7976)*
        [@Yummy-Yums](https://github.com/Yummy-Yums) made their first contribution
        in [#8003](https://github.com/pydantic/pydantic/pull/8003)* [@Iipin](https://github.com/Iipin)
        made their first contribution in [#7972](https://github.com/pydantic/pydantic/pull/7972)*
        [@tabassco](https://github.com/tabassco) made their first contribution in
        [#8004](https://github.com/pydantic/pydantic/pull/8004)* [@Mr-Pepe](https://github.com/Mr-Pepe)
        made their first contribution in [#7979](https://github.com/pydantic/pydantic/pull/7979)*
        [@0x00cl](https://github.com/0x00cl) made their first contribution in [#8010](https://github.com/pydantic/pydantic/pull/8010)*
        [@barraponto](https://github.com/barraponto) made their first contribution
        in [#8032](https://github.com/pydantic/pydantic/pull/8032)#### `pydantic-core`*
        [@sisp](https://github.com/sisp) made their first contribution in [pydantic/pydantic-core#995](https://github.com/pydantic/pydantic-core/pull/995)*
        [@michaelhly](https://github.com/michaelhly) made their first contribution
        in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)##
        v2.5.0b1 (2023-11-09)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0b1)
        for details.## v2.4.2 (2023-09-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.2)###
        What's Changed#### Fixes* Fix bug with JSON schema for sequence of discriminated
        union by [@dmontagu](https://github.com/dmontagu) in [#7647](https://github.com/pydantic/pydantic/pull/7647)*
        Fix schema references in discriminated unions by [@adriangb](https://github.com/adriangb)
        in [#7646](https://github.com/pydantic/pydantic/pull/7646)* Fix json schema
        generation for recursive models by [@adriangb](https://github.com/adriangb)
        in [#7653](https://github.com/pydantic/pydantic/pull/7653)* Fix `models_json_schema`
        for generic models by [@adriangb](https://github.com/adriangb) in [#7654](https://github.com/pydantic/pydantic/pull/7654)*
        Fix xfailed test for generic model signatures by [@adriangb](https://github.com/adriangb)
        in [#7658](https://github.com/pydantic/pydantic/pull/7658)### New Contributors*
        [@austinorr](https://github.com/austinorr) made their first contribution in
        [#7657](https://github.com/pydantic/pydantic/pull/7657)* [@peterHoburg](https://github.com/peterHoburg)
        made their first contribution in [#7670](https://github.com/pydantic/pydantic/pull/7670)##
        v2.4.1 (2023-09-26)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.1)###
        What's Changed#### Packaging* Update pydantic-core to 2.10.1 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7633](https://github.com/pydantic/pydantic/pull/7633)#### Fixes* Serialize
        unsubstituted type vars as `Any` by [@adriangb](https://github.com/adriangb)
        in [#7606](https://github.com/pydantic/pydantic/pull/7606)* Remove schema
        building caches by [@adriangb](https://github.com/adriangb) in [#7624](https://github.com/pydantic/pydantic/pull/7624)*
        Fix an issue where JSON schema extras weren't JSON encoded by [@dmontagu](https://github.com/dmontagu)
        in [#7625](https://github.com/pydantic/pydantic/pull/7625)## v2.4.0 (2023-09-22)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.4.0)### What's
        Changed#### Packaging* Update pydantic-core to 2.10.0 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7542](https://github.com/pydantic/pydantic/pull/7542)#### New Features*
        Add `Base64Url` types by [@dmontagu](https://github.com/dmontagu) in [#7286](https://github.com/pydantic/pydantic/pull/7286)*
        Implement optional `number` to `str` coercion by [@lig](https://github.com/lig)
        in [#7508](https://github.com/pydantic/pydantic/pull/7508)* Allow access to
        `field_name` and `data` in all validators if there is data and a field name
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7542](https://github.com/pydantic/pydantic/pull/7542)*
        Add `BaseModel.model_validate_strings` and `TypeAdapter.validate_strings`
        by [@hramezani](https://github.com/hramezani) in [#7552](https://github.com/pydantic/pydantic/pull/7552)*
        Add Pydantic `plugins` experimental implementation by [@lig](https://github.com/lig)
        [@samuelcolvin](https://github.com/samuelcolvin) and [@Kludex](https://github.com/Kludex)
        in [#6820](https://github.com/pydantic/pydantic/pull/6820)#### Changes* Do
        not override `model_post_init` in subclass with private attrs by [@Viicos](https://github.com/Viicos)
        in [#7302](https://github.com/pydantic/pydantic/pull/7302)* Make fields with
        defaults not required in the serialization schema by default by [@dmontagu](https://github.com/dmontagu)
        in [#7275](https://github.com/pydantic/pydantic/pull/7275)* Mark `Extra` as
        deprecated by [@disrupted](https://github.com/disrupted) in [#7299](https://github.com/pydantic/pydantic/pull/7299)*
        Make `EncodedStr` a dataclass by [@Kludex](https://github.com/Kludex) in [#7396](https://github.com/pydantic/pydantic/pull/7396)*
        Move `annotated_handlers` to be public by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7569](https://github.com/pydantic/pydantic/pull/7569)#### Performance*
        Simplify flattening and inlining of `CoreSchema` by [@adriangb](https://github.com/adriangb)
        in [#7523](https://github.com/pydantic/pydantic/pull/7523)* Remove unused
        copies in `CoreSchema` walking by [@adriangb](https://github.com/adriangb)
        in [#7528](https://github.com/pydantic/pydantic/pull/7528)* Add caches for
        collecting definitions and invalid schemas from a CoreSchema by [@adriangb](https://github.com/adriangb)
        in [#7527](https://github.com/pydantic/pydantic/pull/7527)* Eagerly resolve
        discriminated unions and cache cases where we can't by [@adriangb](https://github.com/adriangb)
        in [#7529](https://github.com/pydantic/pydantic/pull/7529)* Replace `dict.get`
        and `dict.setdefault` with more verbose versions in `CoreSchema` building
        hot paths by [@adriangb](https://github.com/adriangb) in [#7536](https://github.com/pydantic/pydantic/pull/7536)*
        Cache invalid `CoreSchema` discovery by [@adriangb](https://github.com/adriangb)
        in [#7535](https://github.com/pydantic/pydantic/pull/7535)* Allow disabling
        `CoreSchema` validation for faster startup times by [@adriangb](https://github.com/adriangb)
        in [#7565](https://github.com/pydantic/pydantic/pull/7565)#### Fixes* Fix
        config detection for `TypedDict` from grandparent classes by [@dmontagu](https://github.com/dmontagu)
        in [#7272](https://github.com/pydantic/pydantic/pull/7272)* Fix hash function
        generation for frozen models with unusual MRO by [@dmontagu](https://github.com/dmontagu)
        in [#7274](https://github.com/pydantic/pydantic/pull/7274)* Make `strict`
        config overridable in field for Path by [@hramezani](https://github.com/hramezani)
        in [#7281](https://github.com/pydantic/pydantic/pull/7281)* Use `ser_json_<timedelta|bytes>`
        on default in `GenerateJsonSchema` by [@Kludex](https://github.com/Kludex)
        in [#7269](https://github.com/pydantic/pydantic/pull/7269)* Adding a check
        that alias is validated as an identifier for Python by [@andree0](https://github.com/andree0)
        in [#7319](https://github.com/pydantic/pydantic/pull/7319)* Raise an error
        when computed field overrides field by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7346](https://github.com/pydantic/pydantic/pull/7346)* Fix applying `SkipValidation`
        to referenced schemas by [@adriangb](https://github.com/adriangb) in [#7381](https://github.com/pydantic/pydantic/pull/7381)*
        Enforce behavior of private attributes having double leading underscore by
        [@lig](https://github.com/lig) in [#7265](https://github.com/pydantic/pydantic/pull/7265)*
        Standardize `__get_pydantic_core_schema__` signature by [@hramezani](https://github.com/hramezani)
        in [#7415](https://github.com/pydantic/pydantic/pull/7415)* Fix generic dataclass
        fields mutation bug (when using `TypeAdapter`) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7435](https://github.com/pydantic/pydantic/pull/7435)* Fix `TypeError`
        on `model_validator` in `wrap` mode by [@pmmmwh](https://github.com/pmmmwh)
        in [#7496](https://github.com/pydantic/pydantic/pull/7496)* Improve enum error
        message by [@hramezani](https://github.com/hramezani) in [#7506](https://github.com/pydantic/pydantic/pull/7506)*
        Make `repr` work for instances that failed initialization when handling `ValidationError`s
        by [@dmontagu](https://github.com/dmontagu) in [#7439](https://github.com/pydantic/pydantic/pull/7439)*
        Fixed a regular expression denial of service issue by limiting whitespaces
        by [@prodigysml](https://github.com/prodigysml) in [#7360](https://github.com/pydantic/pydantic/pull/7360)*
        Fix handling of `UUID` values having `UUID.version=None` by [@lig](https://github.com/lig)
        in [#7566](https://github.com/pydantic/pydantic/pull/7566)* Fix `__iter__`
        returning private `cached_property` info by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7570](https://github.com/pydantic/pydantic/pull/7570)* Improvements to
        version info message by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#7594](https://github.com/pydantic/pydantic/pull/7594)### New Contributors*
        [@15498th](https://github.com/15498th) made their first contribution in [#7238](https://github.com/pydantic/pydantic/pull/7238)*
        [@GabrielCappelli](https://github.com/GabrielCappelli) made their first contribution
        in [#7213](https://github.com/pydantic/pydantic/pull/7213)* [@tobni](https://github.com/tobni)
        made their first contribution in [#7184](https://github.com/pydantic/pydantic/pull/7184)*
        [@redruin1](https://github.com/redruin1) made their first contribution in
        [#7282](https://github.com/pydantic/pydantic/pull/7282)* [@FacerAin](https://github.com/FacerAin)
        made their first contribution in [#7288](https://github.com/pydantic/pydantic/pull/7288)*
        [@acdha](https://github.com/acdha) made their first contribution in [#7297](https://github.com/pydantic/pydantic/pull/7297)*
        [@andree0](https://github.com/andree0) made their first contribution in [#7319](https://github.com/pydantic/pydantic/pull/7319)*
        [@gordonhart](https://github.com/gordonhart) made their first contribution
        in [#7375](https://github.com/pydantic/pydantic/pull/7375)* [@pmmmwh](https://github.com/pmmmwh)
        made their first contribution in [#7496](https://github.com/pydantic/pydantic/pull/7496)*
        [@disrupted](https://github.com/disrupted) made their first contribution in
        [#7299](https://github.com/pydantic/pydantic/pull/7299)* [@prodigysml](https://github.com/prodigysml)
        made their first contribution in [#7360](https://github.com/pydantic/pydantic/pull/7360)##
        v2.3.0 (2023-08-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.3.0)*
        \U0001F525 Remove orphaned changes file from repo by [@lig](https://github.com/lig)
        in [#7168](https://github.com/pydantic/pydantic/pull/7168)* Add copy button
        on documentation by [@Kludex](https://github.com/Kludex) in [#7190](https://github.com/pydantic/pydantic/pull/7190)*
        Fix docs on JSON type by [@Kludex](https://github.com/Kludex) in [#7189](https://github.com/pydantic/pydantic/pull/7189)*
        Update mypy 1.5.0 to 1.5.1 in CI by [@hramezani](https://github.com/hramezani)
        in [#7191](https://github.com/pydantic/pydantic/pull/7191)* fix download links
        badge by [@samuelcolvin](https://github.com/samuelcolvin) in [#7200](https://github.com/pydantic/pydantic/pull/7200)*
        add 2.2.1 to changelog by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7212](https://github.com/pydantic/pydantic/pull/7212)* Make ModelWrapValidator
        protocols generic by [@dmontagu](https://github.com/dmontagu) in [#7154](https://github.com/pydantic/pydantic/pull/7154)*
        Correct `Field(..., exclude: bool)` docs by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7214](https://github.com/pydantic/pydantic/pull/7214)* Make shadowing
        attributes a warning instead of an error by [@adriangb](https://github.com/adriangb)
        in [#7193](https://github.com/pydantic/pydantic/pull/7193)* Document `Base64Str`
        and `Base64Bytes` by [@Kludex](https://github.com/Kludex) in [#7192](https://github.com/pydantic/pydantic/pull/7192)*
        Fix `config.defer_build` for serialization first cases by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7024](https://github.com/pydantic/pydantic/pull/7024)* clean Model docstrings
        in JSON Schema by [@samuelcolvin](https://github.com/samuelcolvin) in [#7210](https://github.com/pydantic/pydantic/pull/7210)*
        fix [#7228](https://github.com/pydantic/pydantic/pull/7228) (typo): docs in
        `validators.md` to correct `validate_default` kwarg by [@lmmx](https://github.com/lmmx)
        in [#7229](https://github.com/pydantic/pydantic/pull/7229)* \u2705 Implement
        `tzinfo.fromutc` method for `TzInfo` in `pydantic-core` by [@lig](https://github.com/lig)
        in [#7019](https://github.com/pydantic/pydantic/pull/7019)* Support `__get_validators__`
        by [@hramezani](https://github.com/hramezani) in [#7197](https://github.com/pydantic/pydantic/pull/7197)##
        v2.2.1 (2023-08-18)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.2.1)*
        Make `xfail`ing test for root model extra stop `xfail`ing by [@dmontagu](https://github.com/dmontagu)
        in [#6937](https://github.com/pydantic/pydantic/pull/6937)* Optimize recursion
        detection by stopping on the second visit for the same object by [@mciucu](https://github.com/mciucu)
        in [#7160](https://github.com/pydantic/pydantic/pull/7160)* fix link in docs
        by [@tlambert03](https://github.com/tlambert03) in [#7166](https://github.com/pydantic/pydantic/pull/7166)*
        Replace MiMalloc w/ default allocator by [@adriangb](https://github.com/adriangb)
        in [pydantic/pydantic-core#900](https://github.com/pydantic/pydantic-core/pull/900)*
        Bump pydantic-core to 2.6.1 and prepare 2.2.1 release by [@adriangb](https://github.com/adriangb)
        in [#7176](https://github.com/pydantic/pydantic/pull/7176)## v2.2.0 (2023-08-17)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.2.0)* Split
        \"pipx install\" setup command into two commands on the documentation site
        by [@nomadmtb](https://github.com/nomadmtb) in [#6869](https://github.com/pydantic/pydantic/pull/6869)*
        Deprecate `Field.include` by [@hramezani](https://github.com/hramezani) in
        [#6852](https://github.com/pydantic/pydantic/pull/6852)* Fix typo in default
        factory error msg by [@hramezani](https://github.com/hramezani) in [#6880](https://github.com/pydantic/pydantic/pull/6880)*
        Simplify handling of typing.Annotated in GenerateSchema by [@dmontagu](https://github.com/dmontagu)
        in [#6887](https://github.com/pydantic/pydantic/pull/6887)* Re-enable fastapi
        tests in CI by [@dmontagu](https://github.com/dmontagu) in [#6883](https://github.com/pydantic/pydantic/pull/6883)*
        Make it harder to hit collisions with json schema defrefs by [@dmontagu](https://github.com/dmontagu)
        in [#6566](https://github.com/pydantic/pydantic/pull/6566)* Cleaner error
        for invalid input to `Path` fields by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6903](https://github.com/pydantic/pydantic/pull/6903)* :memo: support
        Coordinate Type by [@yezz123](https://github.com/yezz123) in [#6906](https://github.com/pydantic/pydantic/pull/6906)*
        Fix `ForwardRef` wrapper for py 3.10.0 (shim until bpo-45166) by [@randomir](https://github.com/randomir)
        in [#6919](https://github.com/pydantic/pydantic/pull/6919)* Fix misbehavior
        related to copying of RootModel by [@dmontagu](https://github.com/dmontagu)
        in [#6918](https://github.com/pydantic/pydantic/pull/6918)* Fix issue with
        recursion error caused by ParamSpec by [@dmontagu](https://github.com/dmontagu)
        in [#6923](https://github.com/pydantic/pydantic/pull/6923)* Add section about
        Constrained classes to the Migration Guide by [@Kludex](https://github.com/Kludex)
        in [#6924](https://github.com/pydantic/pydantic/pull/6924)* Use `main` branch
        for badge links by [@Viicos](https://github.com/Viicos) in [#6925](https://github.com/pydantic/pydantic/pull/6925)*
        Add test for v1/v2 Annotated discrepancy by [@carlbordum](https://github.com/carlbordum)
        in [#6926](https://github.com/pydantic/pydantic/pull/6926)* Make the v1 mypy
        plugin work with both v1 and v2 by [@dmontagu](https://github.com/dmontagu)
        in [#6921](https://github.com/pydantic/pydantic/pull/6921)* Fix issue where
        generic models couldn't be parametrized with BaseModel by [@dmontagu](https://github.com/dmontagu)
        in [#6933](https://github.com/pydantic/pydantic/pull/6933)* Remove xfail for
        discriminated union with alias by [@dmontagu](https://github.com/dmontagu)
        in [#6938](https://github.com/pydantic/pydantic/pull/6938)* add field_serializer
        to computed_field by [@andresliszt](https://github.com/andresliszt) in [#6965](https://github.com/pydantic/pydantic/pull/6965)*
        Use union_schema with Type[Union[...]] by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#6952](https://github.com/pydantic/pydantic/pull/6952)* Fix inherited
        typeddict attributes / config by [@adriangb](https://github.com/adriangb)
        in [#6981](https://github.com/pydantic/pydantic/pull/6981)* fix dataclass
        annotated before validator called twice by [@davidhewitt](https://github.com/davidhewitt)
        in [#6998](https://github.com/pydantic/pydantic/pull/6998)* Update test-fastapi
        deselected tests by [@hramezani](https://github.com/hramezani) in [#7014](https://github.com/pydantic/pydantic/pull/7014)*
        Fix validator doc format by [@hramezani](https://github.com/hramezani) in
        [#7015](https://github.com/pydantic/pydantic/pull/7015)* Fix typo in docstring
        of model_json_schema by [@AdamVinch-Federated](https://github.com/AdamVinch-Federated)
        in [#7032](https://github.com/pydantic/pydantic/pull/7032)* remove unused
        \"type ignores\" with pyright by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7026](https://github.com/pydantic/pydantic/pull/7026)* Add benchmark
        representing FastAPI startup time by [@adriangb](https://github.com/adriangb)
        in [#7030](https://github.com/pydantic/pydantic/pull/7030)* Fix json_encoders
        for Enum subclasses by [@adriangb](https://github.com/adriangb) in [#7029](https://github.com/pydantic/pydantic/pull/7029)*
        Update docstring of `ser_json_bytes` regarding base64 encoding by [@Viicos](https://github.com/Viicos)
        in [#7052](https://github.com/pydantic/pydantic/pull/7052)* Allow `@validate_call`
        to work on async methods by [@adriangb](https://github.com/adriangb) in [#7046](https://github.com/pydantic/pydantic/pull/7046)*
        Fix: mypy error with `Settings` and `SettingsConfigDict` by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#7002](https://github.com/pydantic/pydantic/pull/7002)* Fix some typos
        (repeated words and it's/its) by [@eumiro](https://github.com/eumiro) in [#7063](https://github.com/pydantic/pydantic/pull/7063)*
        Fix the typo in docstring by [@harunyasar](https://github.com/harunyasar)
        in [#7062](https://github.com/pydantic/pydantic/pull/7062)* Docs: Fix broken
        URL in the pydantic-settings package recommendation by [@swetjen](https://github.com/swetjen)
        in [#6995](https://github.com/pydantic/pydantic/pull/6995)* Handle constraints
        being applied to schemas that don't accept it by [@adriangb](https://github.com/adriangb)
        in [#6951](https://github.com/pydantic/pydantic/pull/6951)* Replace almost_equal_floats
        with math.isclose by [@eumiro](https://github.com/eumiro) in [#7082](https://github.com/pydantic/pydantic/pull/7082)*
        bump pydantic-core to 2.5.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7077](https://github.com/pydantic/pydantic/pull/7077)* Add `short_version`
        and use it in links by [@hramezani](https://github.com/hramezani) in [#7115](https://github.com/pydantic/pydantic/pull/7115)*
        \U0001F4DD Add usage link to `RootModel` by [@Kludex](https://github.com/Kludex)
        in [#7113](https://github.com/pydantic/pydantic/pull/7113)* Revert \"Fix default
        port for mongosrv DSNs (#6827)\" by [@Kludex](https://github.com/Kludex) in
        [#7116](https://github.com/pydantic/pydantic/pull/7116)* Clarify validate_default
        and _Unset handling in usage docs and migration guide by [@benbenbang](https://github.com/benbenbang)
        in [#6950](https://github.com/pydantic/pydantic/pull/6950)* Tweak documentation
        of `Field.exclude` by [@Viicos](https://github.com/Viicos) in [#7086](https://github.com/pydantic/pydantic/pull/7086)*
        Do not require `validate_assignment` to use `Field.frozen` by [@Viicos](https://github.com/Viicos)
        in [#7103](https://github.com/pydantic/pydantic/pull/7103)* tweaks to `_core_utils`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7040](https://github.com/pydantic/pydantic/pull/7040)*
        Make DefaultDict working with set by [@hramezani](https://github.com/hramezani)
        in [#7126](https://github.com/pydantic/pydantic/pull/7126)* Don't always require
        typing.Generic as a base for partially parametrized models by [@dmontagu](https://github.com/dmontagu)
        in [#7119](https://github.com/pydantic/pydantic/pull/7119)* Fix issue with
        JSON schema incorrectly using parent class core schema by [@dmontagu](https://github.com/dmontagu)
        in [#7020](https://github.com/pydantic/pydantic/pull/7020)* Fix xfailed test
        related to TypedDict and alias_generator by [@dmontagu](https://github.com/dmontagu)
        in [#6940](https://github.com/pydantic/pydantic/pull/6940)* Improve error
        message for NameEmail by [@dmontagu](https://github.com/dmontagu) in [#6939](https://github.com/pydantic/pydantic/pull/6939)*
        Fix generic computed fields by [@dmontagu](https://github.com/dmontagu) in
        [#6988](https://github.com/pydantic/pydantic/pull/6988)* Reflect namedtuple
        default values during validation by [@dmontagu](https://github.com/dmontagu)
        in [#7144](https://github.com/pydantic/pydantic/pull/7144)* Update dependencies,
        fix pydantic-core usage, fix CI issues by [@dmontagu](https://github.com/dmontagu)
        in [#7150](https://github.com/pydantic/pydantic/pull/7150)* Add mypy 1.5.0
        by [@hramezani](https://github.com/hramezani) in [#7118](https://github.com/pydantic/pydantic/pull/7118)*
        Handle non-json native enum values by [@adriangb](https://github.com/adriangb)
        in [#7056](https://github.com/pydantic/pydantic/pull/7056)* document `round_trip`
        in Json type documentation  by [@jc-louis](https://github.com/jc-louis) in
        [#7137](https://github.com/pydantic/pydantic/pull/7137)* Relax signature checks
        to better support builtins and C extension functions as validators by [@adriangb](https://github.com/adriangb)
        in [#7101](https://github.com/pydantic/pydantic/pull/7101)* add union_mode='left_to_right'
        by [@davidhewitt](https://github.com/davidhewitt) in [#7151](https://github.com/pydantic/pydantic/pull/7151)*
        Include an error message hint for inherited ordering by [@yvalencia91](https://github.com/yvalencia91)
        in [#7124](https://github.com/pydantic/pydantic/pull/7124)* Fix one docs link
        and resolve some warnings for two others by [@dmontagu](https://github.com/dmontagu)
        in [#7153](https://github.com/pydantic/pydantic/pull/7153)* Include Field
        extra keys name in warning by [@hramezani](https://github.com/hramezani) in
        [#7136](https://github.com/pydantic/pydantic/pull/7136)## v2.1.1 (2023-07-25)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.1.1)* Skip FieldInfo
        merging when unnecessary by [@dmontagu](https://github.com/dmontagu) in [#6862](https://github.com/pydantic/pydantic/pull/6862)##
        v2.1.0 (2023-07-25)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.1.0)*
        Add `StringConstraints` for use as Annotated metadata by [@adriangb](https://github.com/adriangb)
        in [#6605](https://github.com/pydantic/pydantic/pull/6605)* Try to fix intermittently
        failing CI by [@adriangb](https://github.com/adriangb) in [#6683](https://github.com/pydantic/pydantic/pull/6683)*
        Remove redundant example of optional vs default. by [@ehiggs-deliverect](https://github.com/ehiggs-deliverect)
        in [#6676](https://github.com/pydantic/pydantic/pull/6676)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6692](https://github.com/pydantic/pydantic/pull/6692)*
        Remove the Validate always section in validator docs by [@adriangb](https://github.com/adriangb)
        in [#6679](https://github.com/pydantic/pydantic/pull/6679)* Fix recursion
        error in json schema generation by [@adriangb](https://github.com/adriangb)
        in [#6720](https://github.com/pydantic/pydantic/pull/6720)* Fix incorrect
        subclass check for secretstr by [@AlexVndnblcke](https://github.com/AlexVndnblcke)
        in [#6730](https://github.com/pydantic/pydantic/pull/6730)* update pdm / pdm
        lockfile to 2.8.0 by [@davidhewitt](https://github.com/davidhewitt) in [#6714](https://github.com/pydantic/pydantic/pull/6714)*
        unpin pdm on more CI jobs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6755](https://github.com/pydantic/pydantic/pull/6755)* improve source
        locations for auxiliary packages in docs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6749](https://github.com/pydantic/pydantic/pull/6749)* Assume builtins
        don't accept an info argument by [@adriangb](https://github.com/adriangb)
        in [#6754](https://github.com/pydantic/pydantic/pull/6754)* Fix bug where
        calling `help(BaseModelSubclass)` raises errors by [@hramezani](https://github.com/hramezani)
        in [#6758](https://github.com/pydantic/pydantic/pull/6758)* Fix mypy plugin
        handling of `@model_validator(mode=\"after\")` by [@ljodal](https://github.com/ljodal)
        in [#6753](https://github.com/pydantic/pydantic/pull/6753)* update pydantic-core
        to 2.3.1 by [@davidhewitt](https://github.com/davidhewitt) in [#6756](https://github.com/pydantic/pydantic/pull/6756)*
        Mypy plugin for settings by [@hramezani](https://github.com/hramezani) in
        [#6760](https://github.com/pydantic/pydantic/pull/6760)* Use `contentSchema`
        keyword for JSON schema by [@dmontagu](https://github.com/dmontagu) in [#6715](https://github.com/pydantic/pydantic/pull/6715)*
        fast-path checking finite decimals by [@davidhewitt](https://github.com/davidhewitt)
        in [#6769](https://github.com/pydantic/pydantic/pull/6769)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6771](https://github.com/pydantic/pydantic/pull/6771)*
        Improve json schema doc by [@hramezani](https://github.com/hramezani) in [#6772](https://github.com/pydantic/pydantic/pull/6772)*
        Update validator docs by [@adriangb](https://github.com/adriangb) in [#6695](https://github.com/pydantic/pydantic/pull/6695)*
        Fix typehint for wrap validator by [@dmontagu](https://github.com/dmontagu)
        in [#6788](https://github.com/pydantic/pydantic/pull/6788)* \U0001F41B Fix
        validation warning for unions of Literal and other type by [@lig](https://github.com/lig)
        in [#6628](https://github.com/pydantic/pydantic/pull/6628)* Update documentation
        for generics support in V2 by [@tpdorsey](https://github.com/tpdorsey) in
        [#6685](https://github.com/pydantic/pydantic/pull/6685)* add pydantic-core
        build info to `version_info()` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6785](https://github.com/pydantic/pydantic/pull/6785)* Fix pydantic dataclasses
        that use slots with default values by [@dmontagu](https://github.com/dmontagu)
        in [#6796](https://github.com/pydantic/pydantic/pull/6796)* Fix inheritance
        of hash function for frozen models by [@dmontagu](https://github.com/dmontagu)
        in [#6789](https://github.com/pydantic/pydantic/pull/6789)* \u2728 Add `SkipJsonSchema`
        annotation by [@Kludex](https://github.com/Kludex) in [#6653](https://github.com/pydantic/pydantic/pull/6653)*
        Error if an invalid field name is used with Field by [@dmontagu](https://github.com/dmontagu)
        in [#6797](https://github.com/pydantic/pydantic/pull/6797)* Add `GenericModel`
        to `MOVED_IN_V2` by [@adriangb](https://github.com/adriangb) in [#6776](https://github.com/pydantic/pydantic/pull/6776)*
        Remove unused code from `docs/usage/types/custom.md` by [@hramezani](https://github.com/hramezani)
        in [#6803](https://github.com/pydantic/pydantic/pull/6803)* Fix `float` ->
        `Decimal` coercion precision loss by [@adriangb](https://github.com/adriangb)
        in [#6810](https://github.com/pydantic/pydantic/pull/6810)* remove email validation
        from the north star benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6816](https://github.com/pydantic/pydantic/pull/6816)* Fix link to mypy
        by [@progsmile](https://github.com/progsmile) in [#6824](https://github.com/pydantic/pydantic/pull/6824)*
        Improve initialization hooks example by [@hramezani](https://github.com/hramezani)
        in [#6822](https://github.com/pydantic/pydantic/pull/6822)* Fix default port
        for mongosrv DSNs by [@dmontagu](https://github.com/dmontagu) in [#6827](https://github.com/pydantic/pydantic/pull/6827)*
        Improve API documentation, in particular more links between usage and API
        docs by [@samuelcolvin](https://github.com/samuelcolvin) in [#6780](https://github.com/pydantic/pydantic/pull/6780)*
        update pydantic-core to 2.4.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#6831](https://github.com/pydantic/pydantic/pull/6831)* Fix `annotated_types.MaxLen`
        validator for custom sequence types by [@ImogenBits](https://github.com/ImogenBits)
        in [#6809](https://github.com/pydantic/pydantic/pull/6809)* Update V1 by [@hramezani](https://github.com/hramezani)
        in [#6833](https://github.com/pydantic/pydantic/pull/6833)* Make it so callable
        JSON schema extra works by [@dmontagu](https://github.com/dmontagu) in [#6798](https://github.com/pydantic/pydantic/pull/6798)*
        Fix serialization issue with `InstanceOf` by [@dmontagu](https://github.com/dmontagu)
        in [#6829](https://github.com/pydantic/pydantic/pull/6829)* Add back support
        for `json_encoders` by [@adriangb](https://github.com/adriangb) in [#6811](https://github.com/pydantic/pydantic/pull/6811)*
        Update field annotations when building the schema by [@dmontagu](https://github.com/dmontagu)
        in [#6838](https://github.com/pydantic/pydantic/pull/6838)* Use `WeakValueDictionary`
        to fix generic memory leak by [@dmontagu](https://github.com/dmontagu) in
        [#6681](https://github.com/pydantic/pydantic/pull/6681)* Add `config.defer_build`
        to optionally make model building lazy by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6823](https://github.com/pydantic/pydantic/pull/6823)* delegate `UUID`
        serialization to pydantic-core by [@davidhewitt](https://github.com/davidhewitt)
        in [#6850](https://github.com/pydantic/pydantic/pull/6850)* Update `json_encoders`
        docs by [@adriangb](https://github.com/adriangb) in [#6848](https://github.com/pydantic/pydantic/pull/6848)*
        Fix error message for `staticmethod`/`classmethod` order with validate_call
        by [@dmontagu](https://github.com/dmontagu) in [#6686](https://github.com/pydantic/pydantic/pull/6686)*
        Improve documentation for `Config` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6847](https://github.com/pydantic/pydantic/pull/6847)* Update serialization
        doc to mention `Field.exclude` takes priority over call-time `include/exclude`
        by [@hramezani](https://github.com/hramezani) in [#6851](https://github.com/pydantic/pydantic/pull/6851)*
        Allow customizing core schema generation by making `GenerateSchema` public
        by [@adriangb](https://github.com/adriangb) in [#6737](https://github.com/pydantic/pydantic/pull/6737)##
        v2.0.3 (2023-07-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.3)*
        Mention PyObject (v1) moving to ImportString (v2) in migration doc by [@slafs](https://github.com/slafs)
        in [#6456](https://github.com/pydantic/pydantic/pull/6456)* Fix release-tweet
        CI by [@Kludex](https://github.com/Kludex) in [#6461](https://github.com/pydantic/pydantic/pull/6461)*
        Revise the section on required / optional / nullable fields. by [@ybressler](https://github.com/ybressler)
        in [#6468](https://github.com/pydantic/pydantic/pull/6468)* Warn if a type
        hint is not in fact a type by [@adriangb](https://github.com/adriangb) in
        [#6479](https://github.com/pydantic/pydantic/pull/6479)* Replace TransformSchema
        with GetPydanticSchema by [@dmontagu](https://github.com/dmontagu) in [#6484](https://github.com/pydantic/pydantic/pull/6484)*
        Fix the un-hashability of various annotation types, for use in caching generic
        containers by [@dmontagu](https://github.com/dmontagu) in [#6480](https://github.com/pydantic/pydantic/pull/6480)*
        PYD-164: Rework custom types docs by [@adriangb](https://github.com/adriangb)
        in [#6490](https://github.com/pydantic/pydantic/pull/6490)* Fix ci by [@adriangb](https://github.com/adriangb)
        in [#6507](https://github.com/pydantic/pydantic/pull/6507)* Fix forward ref
        in generic by [@adriangb](https://github.com/adriangb) in [#6511](https://github.com/pydantic/pydantic/pull/6511)*
        Fix generation of serialization JSON schemas for core_schema.ChainSchema by
        [@dmontagu](https://github.com/dmontagu) in [#6515](https://github.com/pydantic/pydantic/pull/6515)*
        Document the change in `Field.alias` behavior in Pydantic V2 by [@hramezani](https://github.com/hramezani)
        in [#6508](https://github.com/pydantic/pydantic/pull/6508)* Give better error
        message attempting to compute the json schema of a model with undefined fields
        by [@dmontagu](https://github.com/dmontagu) in [#6519](https://github.com/pydantic/pydantic/pull/6519)*
        Document `alias_priority` by [@tpdorsey](https://github.com/tpdorsey) in [#6520](https://github.com/pydantic/pydantic/pull/6520)*
        Add redirect for types documentation by [@tpdorsey](https://github.com/tpdorsey)
        in [#6513](https://github.com/pydantic/pydantic/pull/6513)* Allow updating
        docs without release by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#6551](https://github.com/pydantic/pydantic/pull/6551)* Ensure docs tests
        always run in the right folder by [@dmontagu](https://github.com/dmontagu)
        in [#6487](https://github.com/pydantic/pydantic/pull/6487)* Defer evaluation
        of return type hints for serializer functions by [@dmontagu](https://github.com/dmontagu)
        in [#6516](https://github.com/pydantic/pydantic/pull/6516)* Disable E501 from
        Ruff and rely on just Black by [@adriangb](https://github.com/adriangb) in
        [#6552](https://github.com/pydantic/pydantic/pull/6552)* Update JSON Schema
        documentation for V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6492](https://github.com/pydantic/pydantic/pull/6492)*
        Add documentation of cyclic reference handling by [@dmontagu](https://github.com/dmontagu)
        in [#6493](https://github.com/pydantic/pydantic/pull/6493)* Remove the need
        for change files by [@samuelcolvin](https://github.com/samuelcolvin) in [#6556](https://github.com/pydantic/pydantic/pull/6556)*
        add \"north star\" benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6547](https://github.com/pydantic/pydantic/pull/6547)* Update Dataclasses
        docs by [@tpdorsey](https://github.com/tpdorsey) in [#6470](https://github.com/pydantic/pydantic/pull/6470)*
        \u267B\uFE0F Use different error message on v1 redirects by [@Kludex](https://github.com/Kludex)
        in [#6595](https://github.com/pydantic/pydantic/pull/6595)* \u2B06 Upgrade
        `pydantic-core` to v2.2.0 by [@lig](https://github.com/lig) in [#6589](https://github.com/pydantic/pydantic/pull/6589)*
        Fix serialization for IPvAny by [@dmontagu](https://github.com/dmontagu) in
        [#6572](https://github.com/pydantic/pydantic/pull/6572)* Improve CI by using
        PDM instead of pip to install typing-extensions by [@adriangb](https://github.com/adriangb)
        in [#6602](https://github.com/pydantic/pydantic/pull/6602)* Add `enum` error
        type docs  by [@lig](https://github.com/lig) in [#6603](https://github.com/pydantic/pydantic/pull/6603)*
        \U0001F41B Fix `max_length` for unicode strings by [@lig](https://github.com/lig)
        in [#6559](https://github.com/pydantic/pydantic/pull/6559)* Add documentation
        for accessing features via `pydantic.v1` by [@tpdorsey](https://github.com/tpdorsey)
        in [#6604](https://github.com/pydantic/pydantic/pull/6604)* Include extra
        when iterating over a model by [@adriangb](https://github.com/adriangb) in
        [#6562](https://github.com/pydantic/pydantic/pull/6562)* Fix typing of model_validator
        by [@adriangb](https://github.com/adriangb) in [#6514](https://github.com/pydantic/pydantic/pull/6514)*
        Touch up Decimal validator by [@adriangb](https://github.com/adriangb) in
        [#6327](https://github.com/pydantic/pydantic/pull/6327)* Fix various docstrings
        using fixed pytest-examples by [@dmontagu](https://github.com/dmontagu) in
        [#6607](https://github.com/pydantic/pydantic/pull/6607)* Handle function validators
        in a discriminated union by [@dmontagu](https://github.com/dmontagu) in [#6570](https://github.com/pydantic/pydantic/pull/6570)*
        Review json_schema.md by [@tpdorsey](https://github.com/tpdorsey) in [#6608](https://github.com/pydantic/pydantic/pull/6608)*
        Make validate_call work on basemodel methods by [@dmontagu](https://github.com/dmontagu)
        in [#6569](https://github.com/pydantic/pydantic/pull/6569)* add test for big
        int json serde by [@davidhewitt](https://github.com/davidhewitt) in [#6614](https://github.com/pydantic/pydantic/pull/6614)*
        Fix pydantic dataclass problem with dataclasses.field default_factory by [@hramezani](https://github.com/hramezani)
        in [#6616](https://github.com/pydantic/pydantic/pull/6616)* Fixed mypy type
        inference for TypeAdapter by [@zakstucke](https://github.com/zakstucke) in
        [#6617](https://github.com/pydantic/pydantic/pull/6617)* Make it work to use
        None as a generic parameter by [@dmontagu](https://github.com/dmontagu) in
        [#6609](https://github.com/pydantic/pydantic/pull/6609)* Make it work to use
        `$ref` as an alias by [@dmontagu](https://github.com/dmontagu) in [#6568](https://github.com/pydantic/pydantic/pull/6568)*
        add note to migration guide about changes to `AnyUrl` etc by [@davidhewitt](https://github.com/davidhewitt)
        in [#6618](https://github.com/pydantic/pydantic/pull/6618)* \U0001F41B Support
        defining `json_schema_extra` on `RootModel` using `Field` by [@lig](https://github.com/lig)
        in [#6622](https://github.com/pydantic/pydantic/pull/6622)* Update pre-commit
        to prevent commits to main branch on accident by [@dmontagu](https://github.com/dmontagu)
        in [#6636](https://github.com/pydantic/pydantic/pull/6636)* Fix PDM CI for
        python 3.7 on MacOS/windows by [@dmontagu](https://github.com/dmontagu) in
        [#6627](https://github.com/pydantic/pydantic/pull/6627)* Produce more accurate
        signatures for pydantic dataclasses by [@dmontagu](https://github.com/dmontagu)
        in [#6633](https://github.com/pydantic/pydantic/pull/6633)* Updates to Url
        types for Pydantic V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6638](https://github.com/pydantic/pydantic/pull/6638)*
        Fix list markdown in `transform` docstring by [@StefanBRas](https://github.com/StefanBRas)
        in [#6649](https://github.com/pydantic/pydantic/pull/6649)* simplify slots_dataclass
        construction to appease mypy by [@davidhewitt](https://github.com/davidhewitt)
        in [#6639](https://github.com/pydantic/pydantic/pull/6639)* Update TypedDict
        schema generation docstring by [@adriangb](https://github.com/adriangb) in
        [#6651](https://github.com/pydantic/pydantic/pull/6651)* Detect and lint-error
        for prints by [@dmontagu](https://github.com/dmontagu) in [#6655](https://github.com/pydantic/pydantic/pull/6655)*
        Add xfailing test for pydantic-core PR 766 by [@dmontagu](https://github.com/dmontagu)
        in [#6641](https://github.com/pydantic/pydantic/pull/6641)* Ignore unrecognized
        fields from dataclasses metadata by [@dmontagu](https://github.com/dmontagu)
        in [#6634](https://github.com/pydantic/pydantic/pull/6634)* Make non-existent
        class getattr a mypy error by [@dmontagu](https://github.com/dmontagu) in
        [#6658](https://github.com/pydantic/pydantic/pull/6658)* Update pydantic-core
        to 2.3.0 by [@hramezani](https://github.com/hramezani) in [#6648](https://github.com/pydantic/pydantic/pull/6648)*
        Use OrderedDict from typing_extensions by [@dmontagu](https://github.com/dmontagu)
        in [#6664](https://github.com/pydantic/pydantic/pull/6664)* Fix typehint for
        JSON schema extra callable by [@dmontagu](https://github.com/dmontagu) in
        [#6659](https://github.com/pydantic/pydantic/pull/6659)## v2.0.2 (2023-07-05)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)* Fix bug
        where round-trip pickling/unpickling a `RootModel` would change the value
        of `__dict__`, [#6457](https://github.com/pydantic/pydantic/pull/6457) by
        [@dmontagu](https://github.com/dmontagu)* Allow single-item discriminated
        unions, [#6405](https://github.com/pydantic/pydantic/pull/6405) by [@dmontagu](https://github.com/dmontagu)*
        Fix issue with union parsing of enums, [#6440](https://github.com/pydantic/pydantic/pull/6440)
        by [@dmontagu](https://github.com/dmontagu)* Docs: Fixed `constr` documentation,
        renamed old `regex` to new `pattern`, [#6452](https://github.com/pydantic/pydantic/pull/6452)
        by [@miili](https://github.com/miili)* Change `GenerateJsonSchema.generate_definitions`
        signature, [#6436](https://github.com/pydantic/pydantic/pull/6436) by [@dmontagu](https://github.com/dmontagu)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)##
        v2.0.1 (2023-07-04)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)First
        patch release of Pydantic V2* Extra fields added via `setattr` (i.e. `m.some_extra_field
        = 'extra_value'`)  are added to `.model_extra` if `model_config` `extra='allowed'`.
        Fixed [#6333](https://github.com/pydantic/pydantic/pull/6333), [#6365](https://github.com/pydantic/pydantic/pull/6365)
        by [@aaraney](https://github.com/aaraney)* Automatically unpack JSON schema
        '$ref' for custom types, [#6343](https://github.com/pydantic/pydantic/pull/6343)
        by [@adriangb](https://github.com/adriangb)* Fix tagged unions multiple processing
        in submodels, [#6340](https://github.com/pydantic/pydantic/pull/6340) by [@suharnikov](https://github.com/suharnikov)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)##
        v2.0 (2023-06-30)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0)Pydantic
        V2 is here! :tada:See [this post](https://docs.pydantic.dev/2.0/blog/pydantic-v2-final/)
        for more details.## v2.0b3 (2023-06-16)Third beta pre-release of Pydantic
        V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b3)##
        v2.0b2 (2023-06-03)Add `from_attributes` runtime flag to `TypeAdapter.validate_python`
        and `BaseModel.model_validate`.See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b2)##
        v2.0b1 (2023-06-01)First beta pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b1)## v2.0a4
        (2023-05-05)Fourth pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a4)##
        v2.0a3 (2023-04-20)Third pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a3)## v2.0a2
        (2023-04-12)Second pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a2)##
        v2.0a1 (2023-04-03)First pre-release of Pydantic V2!See [this post](https://docs.pydantic.dev/blog/pydantic-v2-alpha/)
        for more details.... see [here](https://docs.pydantic.dev/changelog/#v0322-2019-08-17)
        for earlier changes."
      Package: pydantic
      Source: pip
      Version: '2.0'
      Hash: ''
      licenses:
      - MIT
      Title: pydantic
      DownloadURL: https://files.pythonhosted.org/packages/2a/63/f2b665b22a5c2717752cd960d4f55272903b900aa6bf271d2c0a40548e29/pydantic-2.0.tar.gz
  bazaar:
    register: 'yes'
    prim: SCAS-642733
    community_link: https://pypi.org/project/pydantic/2.7.1/
    community_name: https://pypi.org/project/pydantic/2.7.1/
    community_url: https://pypi.org/project/pydantic/2.7.1/
    component_comment: ''
    component_highlevel_description: ''
    component_name: pydantic
    component_platform: linux
    component_programing_language: ''
    component_version: '2.0'
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/2a/63/f2b665b22a5c2717752cd960d4f55272903b900aa6bf271d2c0a40548e29/pydantic-2.0.tar.gz
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pydantic
    target_sw: linux
    vendor: pip
    version: '2.0'
    web_url: https://pypi.org/project/pydantic/2.7.1/
  licenses:
  - MIT
  name: pydantic
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - '2.0'
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: '2.0'
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: python-dateutil+2.8.2
  additional_info:
    fossa-attribution:
      Description: "dateutil - powerful extensions to datetime==========================================|pypi|
        |support| |licence||gitter| |readthedocs||travis| |appveyor| |pipelines| |coverage|..
        |pypi| image:: https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: pypi version..
        |support| image:: https://img.shields.io/pypi/pyversions/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: supported
        Python version.. |travis| image:: https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-square&label=Travis%20Build
        \   :target: https://travis-ci.org/dateutil/dateutil    :alt: travis build
        status.. |appveyor| image:: https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-square&logo=appveyor
        \   :target: https://ci.appveyor.com/project/dateutil/dateutil    :alt: appveyor
        build status.. |pipelines| image:: https://dev.azure.com/pythondateutilazure/dateutil/_apis/build/status/dateutil.dateutil?branchName=master
        \   :target: https://dev.azure.com/pythondateutilazure/dateutil/_build/latest?definitionId=1&branchName=master
        \   :alt: azure pipelines build status.. |coverage| image:: https://codecov.io/gh/dateutil/dateutil/branch/master/graphs/badge.svg?branch=master
        \   :target: https://codecov.io/gh/dateutil/dateutil?branch=master    :alt:
        Code coverage.. |gitter| image:: https://badges.gitter.im/dateutil/dateutil.svg
        \  :alt: Join the chat at https://gitter.im/dateutil/dateutil   :target: https://gitter.im/dateutil/dateutil..
        |licence| image:: https://img.shields.io/pypi/l/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: licence..
        |readthedocs| image:: https://img.shields.io/readthedocs/dateutil/latest.svg?style=flat-square&label=Read%20the%20Docs
        \  :alt: Read the documentation at https://dateutil.readthedocs.io/en/latest/
        \  :target: https://dateutil.readthedocs.io/en/latest/The `dateutil` module
        provides powerful extensions tothe standard `datetime` module, available in
        Python.Installation============`dateutil` can be installed from PyPI using
        `pip` (note that the package name isdifferent from the importable name)::
        \   pip install python-dateutilDownload========dateutil is available on PyPIhttps://pypi.org/project/python-dateutil/The
        documentation is hosted at:https://dateutil.readthedocs.io/en/stable/Code====The
        code and issue tracker are hosted on GitHub:https://github.com/dateutil/dateutil/Features========*
        Computing of relative deltas (next month, next year,  next Monday, last week
        of month, etc);* Computing of relative deltas between two given  date and/or
        datetime objects;* Computing of dates based on very flexible recurrence rules,
        \ using a superset of the `iCalendar <https://www.ietf.org/rfc/rfc2445.txt>`_
        \ specification. Parsing of RFC strings is supported as well.* Generic parsing
        of dates in almost any string format;* Timezone (tzinfo) implementations for
        tzfile(5) format  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ  environment
        string (in all known formats), iCalendar  format files, given ranges (with
        help from relative deltas),  local machine timezone, fixed offset timezone,
        UTC timezone,  and Windows registry-based time zones.* Internal up-to-date
        world timezone information based on  Olson's database.* Computing of Easter
        Sunday dates for any given year,  using Western, Orthodox or Julian algorithms;*
        A comprehensive test suite.Quick example=============Here's a snapshot, just
        to give an idea about the power of thepackage. For more examples, look at
        the documentation.Suppose you want to know how much time is left, inyears/months/days/etc,
        before the next easter happening on ayear with a Friday 13th in August, and
        you want to get today'sdate out of the \"date\" unix system command. Here
        is the code:.. code-block:: python3    >>> from dateutil.relativedelta import
        *    >>> from dateutil.easter import *    >>> from dateutil.rrule import *
        \   >>> from dateutil.parser import *    >>> from datetime import *    >>>
        now = parse(\"Sat Oct 11 17:13:46 UTC 2003\")    >>> today = now.date()    >>>
        year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year
        \   >>> rdelta = relativedelta(easter(year), today)    >>> print(\"Today is:
        %s\" % today)    Today is: 2003-10-11    >>> print(\"Year with next Aug 13th
        on a Friday is: %s\" % year)    Year with next Aug 13th on a Friday is: 2004
        \   >>> print(\"How far is the Easter of that year: %s\" % rdelta)    How
        far is the Easter of that year: relativedelta(months=+6)    >>> print(\"And
        the Easter of that year is: %s\" % (today+rdelta))    And the Easter of that
        year is: 2004-04-11Being exactly 6 months ahead was **really** a coincidence
        :)Contributing============We welcome many types of contributions - bug reports,
        pull requests (code, infrastructure or documentation fixes). For more information
        about how to contribute to the project, see the ``CONTRIBUTING.md`` file in
        the repository.Author======The dateutil module was written by Gustavo Niemeyer
        <gustavo@niemeyer.net>in 2003.It is maintained by:* Gustavo Niemeyer <gustavo@niemeyer.net>
        2003-2011* Tomi Pievil\xE4inen <tomi.pievilainen@iki.fi> 2012-2014* Yaron
        de Leeuw <me@jarondl.net> 2014-2016* Paul Ganssle <paul@ganssle.io> 2015-Starting
        with version 2.4.1 and running until 2.8.2, all source and binarydistributions
        will be signed by a PGP key that has, at the very least, beensigned by the
        key which made the previous release. A table of release signingkeys can be
        found below:===========  ============================Releases     Signing
        key fingerprint===========  ============================2.4.1-2.8.2  `6B49
        ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB`_===========  ============================New
        releases *may* have signed tags, but binary and source distributionsuploaded
        to PyPI will no longer have GPG signatures attached.Contact=======Our mailing
        list is available at `dateutil@python.org <https://mail.python.org/mailman/listinfo/dateutil>`_.
        As it is hosted by the PSF, it is subject to the `PSF code ofconduct <https://www.python.org/psf/conduct/>`_.License=======All
        contributions after December 1, 2017 released under dual license - either
        `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`_ or the
        `BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>`_. Contributions
        before December 1, 2017 - except those those explicitly relicensed - are released
        only under the BSD 3-Clause License... _6B49 ACBA DCF6 BD1C A206 67AB CD54
        FCE3 D964 BEFB:   https://pgp.mit.edu/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB"
      Package: python-dateutil
      Source: pip
      Version: 2.8.2
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      Title: python-dateutil
      DownloadURL: https://files.pythonhosted.org/packages/36/7a/87837f39d0296e723bb9b62bbb257d0355c7f6128853c78955f57342a56d/python_dateutil-2.8.2-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1057771
    community_link: https://github.com/dateutil/dateutil
    community_name: https://github.com/dateutil/dateutil
    community_url: https://github.com/dateutil/dateutil
    component_comment: ''
    component_highlevel_description: Extensions to the standard Python datetime module.The
      dateutil module provides powerful extensions to the datetime module available
      in the Python standard library.
    component_name: Python-Dateutil
    component_platform: linux
    component_programing_language: Python
    component_version: 2.8.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159998 (Dual License)
    src_download_link: https://github.com/dateutil/dateutil/archive/2.8.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=980699&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: python-dateutil
    target_sw: linux
    vendor: pip
    version: 2.8.2
    web_url: https://github.com/dateutil/dateutil
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  name: python-dateutil
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2.8.2
  mimer:
    linking: Static
    product_number: CAX1057771
    product_version_label: 2.8.2
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: python-dotenv+1.0.1
  additional_info:
    fossa-attribution:
      Description: "# python-dotenv[![Build Status][build_status_badge]][build_status_link][![PyPI
        version][pypi_badge]][pypi_link]Python-dotenv reads key-value pairs from a
        `.env` file and can set them as environmentvariables. It helps in the development
        of applications following the[12-factor](https://12factor.net/) principles.-
        [Getting Started](#getting-started)- [Other Use Cases](#other-use-cases)  *
        [Load configuration without altering the environment](#load-configuration-without-altering-the-environment)
        \ * [Parse configuration as a stream](#parse-configuration-as-a-stream)  *
        [Load .env files in IPython](#load-env-files-in-ipython)- [Command-line Interface](#command-line-interface)-
        [File format](#file-format)  * [Multiline values](#multiline-values)  * [Variable
        expansion](#variable-expansion)- [Related Projects](#related-projects)- [Acknowledgements](#acknowledgements)##
        Getting Started```shellpip install python-dotenv```If your application takes
        its configuration from environment variables, like a 12-factorapplication,
        launching it in development is not very practical because you have to setthose
        environment variables yourself.To help you with that, you can add Python-dotenv
        to your application to make it load theconfiguration from a `.env` file when
        it is present (e.g. in development) while remainingconfigurable via the environment:```pythonfrom
        dotenv import load_dotenvload_dotenv()  # take environment variables from
        .env.# Code of your application, which uses environment variables (e.g. from
        `os.environ` or# `os.getenv`) as if they came from the actual environment.```By
        default, `load_dotenv` doesn't override existing environment variables.To
        configure the development environment, add a `.env` in the root directory
        of yourproject:```.\u251C\u2500\u2500 .env\u2514\u2500\u2500 foo.py```The
        syntax of `.env` files supported by python-dotenv is similar to that of Bash:```bash#
        Development settingsDOMAIN=example.orgADMIN_EMAIL=admin@${DOMAIN}ROOT_URL=${DOMAIN}/app```If
        you use variables in values, ensure they are surrounded with `{` and `}`,
        like`${DOMAIN}`, as bare variables such as `$DOMAIN` are not expanded.You
        will probably want to add `.env` to your `.gitignore`, especially if it containssecrets
        like a password.See the section \"File format\" below for more information
        about what you can write in a`.env` file.## Other Use Cases### Load configuration
        without altering the environmentThe function `dotenv_values` works more or
        less the same way as `load_dotenv`, except itdoesn't touch the environment,
        it just returns a `dict` with the values parsed from the`.env` file.```pythonfrom
        dotenv import dotenv_valuesconfig = dotenv_values(\".env\")  # config = {\"USER\":
        \"foo\", \"EMAIL\": \"foo@example.org\"}```This notably enables advanced configuration
        management:```pythonimport osfrom dotenv import dotenv_valuesconfig = {    **dotenv_values(\".env.shared\"),
        \ # load shared development variables    **dotenv_values(\".env.secret\"),
        \ # load sensitive variables    **os.environ,  # override loaded values with
        environment variables}```### Parse configuration as a stream`load_dotenv`
        and `dotenv_values` accept [streams][python_streams] via their `stream`argument.
        \ It is thus possible to load the variables from sources other than thefilesystem
        (e.g. the network).```pythonfrom io import StringIOfrom dotenv import load_dotenvconfig
        = StringIO(\"USER=foo\\nEMAIL=foo@example.org\")load_dotenv(stream=config)```###
        Load .env files in IPythonYou can use dotenv in IPython.  By default, it will
        use `find_dotenv` to search for a`.env` file:```python%load_ext dotenv%dotenv```You
        can also specify a path:```python%dotenv relative/or/absolute/path/to/.env```Optional
        flags:- `-o` to override existing variables.- `-v` for increased verbosity.##
        Command-line InterfaceA CLI interface `dotenv` is also included, which helps
        you manipulate the `.env` filewithout manually opening it.```shell$ pip install
        \"python-dotenv[cli]\"$ dotenv set USER foo$ dotenv set EMAIL foo@example.org$
        dotenv listUSER=fooEMAIL=foo@example.org$ dotenv list --format=json{  \"USER\":
        \"foo\",  \"EMAIL\": \"foo@example.org\"}$ dotenv run -- python foo.py```Run
        `dotenv --help` for more information about the options and subcommands.##
        File formatThe format is not formally specified and still improves over time.
        \ That being said,`.env` files should mostly look like Bash files.Keys can
        be unquoted or single-quoted. Values can be unquoted, single- or double-quoted.Spaces
        before and after keys, equal signs, and values are ignored. Values can be
        followedby a comment.  Lines can start with the `export` directive, which
        does not affect theirinterpretation.Allowed escape sequences:- in single-quoted
        values: `\\\\`, `\\'`- in double-quoted values: `\\\\`, `\\'`, `\\\"`, `\\a`,
        `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\v`### Multiline valuesIt is possible
        for single- or double-quoted values to span multiple lines.  The followingexamples
        are equivalent:```bashFOO=\"first linesecond line\"``````bashFOO=\"first line\\nsecond
        line\"```### Variable without a valueA variable can have no value:```bashFOO```It
        results in `dotenv_values` associating that variable name with the value `None`
        (e.g.`{\"FOO\": None}`. `load_dotenv`, on the other hand, simply ignores such
        variables.This shouldn't be confused with `FOO=`, in which case the variable
        is associated with theempty string.### Variable expansionPython-dotenv can
        interpolate variables using POSIX variable expansion.With `load_dotenv(override=True)`
        or `dotenv_values()`, the value of a variable is thefirst of the values defined
        in the following list:- Value of that variable in the `.env` file.- Value
        of that variable in the environment.- Default value, if provided.- Empty string.With
        `load_dotenv(override=False)`, the value of a variable is the first of the
        valuesdefined in the following list:- Value of that variable in the environment.-
        Value of that variable in the `.env` file.- Default value, if provided.- Empty
        string.## Related Projects-   [Honcho](https://github.com/nickstenning/honcho)
        - For managing    Procfile-based applications.-   [django-dotenv](https://github.com/jpadilla/django-dotenv)-
        \  [django-environ](https://github.com/joke2k/django-environ)-   [django-environ-2](https://github.com/sergeyklay/django-environ-2)-
        \  [django-configuration](https://github.com/jezdez/django-configurations)-
        \  [dump-env](https://github.com/sobolevn/dump-env)-   [environs](https://github.com/sloria/environs)-
        \  [dynaconf](https://github.com/rochacbruno/dynaconf)-   [parse_it](https://github.com/naorlivne/parse_it)-
        \  [python-decouple](https://github.com/HBNetwork/python-decouple)## AcknowledgementsThis
        project is currently maintained by [Saurabh Kumar](https://saurabh-kumar.com)
        and[Bertrand Bonnefoy-Claudet](https://github.com/bbc2) and would not have
        been possiblewithout the support of these [awesomepeople](https://github.com/theskumar/python-dotenv/graphs/contributors).[build_status_badge]:
        https://github.com/theskumar/python-dotenv/actions/workflows/test.yml/badge.svg[build_status_link]:
        https://github.com/theskumar/python-dotenv/actions/workflows/test.yml[pypi_badge]:
        https://badge.fury.io/py/python-dotenv.svg[pypi_link]: https://badge.fury.io/py/python-dotenv[python_streams]:
        https://docs.python.org/3/library/io.html# ChangelogAll notable changes to
        this project will be documented in this file.The format is based on [Keep
        a Changelog](https://keepachangelog.com/en/1.0.0/), and thisproject adheres
        to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).## [1.0.1] -
        2024-01-23**Fixed*** Gracefully handle code which has been imported from a
        zipfile ([#456] by [@samwyma])* Allow modules using load_dotenv to be reloaded
        when launched in a separate thread ([#497] by [@freddyaboulton])* Fix file
        not closed after deletion, handle error in the rewrite function ([#469] by
        [@Qwerty-133])**Misc*** Use pathlib.Path in tests ([#466] by [@eumiro])* Fix
        year in release date in changelog.md ([#454] by [@jankislinger])* Use https
        in README links ([#474] by [@Nicals])## [1.0.0] - 2023-02-24**Fixed*** Drop
        support for python 3.7, add python 3.12-dev (#449 by [@theskumar])* Handle
        situations where the cwd does not exist. (#446 by [@jctanner])## [0.21.1]
        - 2023-01-21**Added*** Use Python 3.11 non-beta in CI (#438 by [@bbc2])* Modernize
        variables code (#434 by [@Nougat-Waffle])* Modernize main.py and parser.py
        code (#435 by [@Nougat-Waffle])* Improve conciseness of cli.py and __init__.py
        (#439 by [@Nougat-Waffle])* Improve error message for `get` and `list` commands
        when env file can't be opened (#441 by [@bbc2])* Updated License to align
        with BSD OSI template (#433 by [@lsmith77])**Fixed*** Fix Out-of-scope error
        when \"dest\" variable is undefined (#413 by [@theGOTOguy])* Fix IPython test
        warning about deprecated `magic` (#440 by [@bbc2])* Fix type hint for dotenv_path
        var, add StrPath alias (#432 by [@eaf])## [0.21.0] - 2022-09-03**Added***
        CLI: add support for invocations via 'python -m'. (#395 by [@theskumar])*
        `load_dotenv` function now returns `False`. (#388 by [@larsks])* CLI: add
        --format= option to list command. (#407 by [@sammck])**Fixed*** Drop Python
        3.5 and 3.6 and upgrade GA (#393 by [@eggplants])* Use `open` instead of `io.open`.
        (#389 by [@rabinadk1])* Improve documentation for variables without a value
        (#390 by [@bbc2])* Add `parse_it` to Related Projects (#410 by [@naorlivne])*
        Update README.md (#415 by [@harveer07])* Improve documentation with direct
        use of MkDocs (#398 by [@bbc2])## [0.20.0] - 2022-03-24**Added**- Add `encoding`
        (`Optional[str]`) parameter to `get_key`, `set_key` and `unset_key`.  (#379
        by [@bbc2])**Fixed**- Use dict to specify the `entry_points` parameter of
        `setuptools.setup` (#376 by  [@mgorny]).- Don't build universal wheels (#387
        by [@bbc2]).## [0.19.2] - 2021-11-11**Fixed**- In `set_key`, add missing newline
        character before new entry if necessary. (#361 by  [@bbc2])## [0.19.1] - 2021-08-09**Added**-
        Add support for Python 3.10. (#359 by [@theskumar])## [0.19.0] - 2021-07-24**Changed**-
        Require Python 3.5 or a later version.  Python 2 and 3.4 are no longer supported.
        (#341  by [@bbc2]).**Added**- The `dotenv_path` argument of `set_key` and
        `unset_key` now has a type of `Union[str,  os.PathLike]` instead of just `os.PathLike`
        (#347 by [@bbc2]).- The `stream` argument of `load_dotenv` and `dotenv_values`
        can now be a text stream  (`IO[str]`), which includes values like `io.StringIO(\"foo\")`
        and `open(\"file.env\",  \"r\")` (#348 by [@bbc2]).## [0.18.0] - 2021-06-20**Changed**-
        Raise `ValueError` if `quote_mode` isn't one of `always`, `auto` or `never`
        in  `set_key` (#330 by [@bbc2]).- When writing a value to a .env file with
        `set_key` or `dotenv set <key> <value>` (#330  by [@bbc2]):  - Use single
        quotes instead of double quotes.  - Don't strip surrounding quotes.  - In
        `auto` mode, don't add quotes if the value is only made of alphanumeric characters
        \   (as determined by `string.isalnum`).## [0.17.1] - 2021-04-29**Fixed**-
        Fixed tests for build environments relying on `PYTHONPATH` (#318 by [@befeleme]).##
        [0.17.0] - 2021-04-02**Changed**- Make `dotenv get <key>` only show the value,
        not `key=value` (#313 by [@bbc2]).**Added**- Add `--override`/`--no-override`
        option to `dotenv run` (#312 by [@zueve] and [@bbc2]).## [0.16.0] - 2021-03-27**Changed**-
        The default value of the `encoding` parameter for `load_dotenv` and `dotenv_values`
        is  now `\"utf-8\"` instead of `None` (#306 by [@bbc2]).- Fix resolution order
        in variable expansion with `override=False` (#287 by [@bbc2]).## [0.15.0]
        - 2020-10-28**Added**- Add `--export` option to `set` to make it prepend the
        binding with `export` (#270 by  [@jadutter]).**Changed**- Make `set` command
        create the `.env` file in the current directory if no `.env` file was  found
        (#270 by [@jadutter]).**Fixed**- Fix potentially empty expanded value for
        duplicate key (#260 by [@bbc2]).- Fix import error on Python 3.5.0 and 3.5.1
        (#267 by [@gongqingkui]).- Fix parsing of unquoted values containing several
        adjacent space or tab characters  (#277 by [@bbc2], review by [@x-yuri]).##
        [0.14.0] - 2020-07-03**Changed**- Privilege definition in file over the environment
        in variable expansion (#256 by  [@elbehery95]).**Fixed**- Improve error message
        for when file isn't found (#245 by [@snobu]).- Use HTTPS URL in package meta
        data (#251 by [@ekohl]).## [0.13.0] - 2020-04-16**Added**- Add support for
        a Bash-like default value in variable expansion (#248 by [@bbc2]).## [0.12.0]
        - 2020-02-28**Changed**- Use current working directory to find `.env` when
        bundled by PyInstaller (#213 by  [@gergelyk]).**Fixed**- Fix escaping of quoted
        values written by `set_key` (#236 by [@bbc2]).- Fix `dotenv run` crashing
        on environment variables without values (#237 by [@yannham]).- Remove warning
        when last line is empty (#238 by [@bbc2]).## [0.11.0] - 2020-02-07**Added**-
        Add `interpolate` argument to `load_dotenv` and `dotenv_values` to disable
        interpolation  (#232 by [@ulyssessouza]).**Changed**- Use logging instead
        of warnings (#231 by [@bbc2]).**Fixed**- Fix installation in non-UTF-8 environments
        (#225 by [@altendky]).- Fix PyPI classifiers (#228 by [@bbc2]).## [0.10.5]
        - 2020-01-19**Fixed**- Fix handling of malformed lines and lines without a
        value (#222 by [@bbc2]):  - Don't print warning when key has no value.  -
        Reject more malformed lines (e.g. \"A: B\", \"a='b',c\").- Fix handling of
        lines with just a comment (#224 by [@bbc2]).## [0.10.4] - 2020-01-17**Added**-
        Make typing optional (#179 by [@techalchemy]).- Print a warning on malformed
        line (#211 by [@bbc2]).- Support keys without a value (#220 by [@ulyssessouza]).##
        0.10.3- Improve interactive mode detection ([@andrewsmith])([#183]).- Refactor
        parser to fix parsing inconsistencies ([@bbc2])([#170]).  - Interpret escapes
        as control characters only in double-quoted strings.  - Interpret `#` as start
        of comment only if preceded by whitespace.## 0.10.2- Add type hints and expose
        them to users ([@qnighy])([#172])- `load_dotenv` and `dotenv_values` now accept
        an `encoding` parameter, defaults to `None`  ([@theskumar])([@earlbread])([#161])-
        Fix `str`/`unicode` inconsistency in Python 2: values are always `str` now.
        ([@bbc2])([#121])- Fix Unicode error in Python 2, introduced in 0.10.0. ([@bbc2])([#176])##
        0.10.1- Fix parsing of variable without a value ([@asyncee])([@bbc2])([#158])##
        0.10.0- Add support for UTF-8 in unquoted values ([@bbc2])([#148])- Add support
        for trailing comments ([@bbc2])([#148])- Add backslashes support in values
        ([@bbc2])([#148])- Add support for newlines in values ([@bbc2])([#148])- Force
        environment variables to str with Python2 on Windows ([@greyli])- Drop Python
        3.3 support ([@greyli])- Fix stderr/-out/-in redirection ([@venthur])## 0.9.0-
        Add `--version` parameter to cli ([@venthur])- Enable loading from current
        directory ([@cjauvin])- Add 'dotenv run' command for calling arbitrary shell
        script with .env ([@venthur])## 0.8.1-   Add tests for docs ([@Flimm])-   Make
        'cli' support optional. Use `pip install python-dotenv[cli]`. ([@theskumar])##
        0.8.0-   `set_key` and `unset_key` only modified the affected file instead
        of    parsing and re-writing file, this causes comments and other file    entact
        as it is.-   Add support for `export` prefix in the line.-   Internal refractoring
        ([@theskumar])-   Allow `load_dotenv` and `dotenv_values` to work with `StringIO())`
        ([@alanjds])([@theskumar])([#78])## 0.7.1-   Remove hard dependency on iPython
        ([@theskumar])## 0.7.0-   Add support to override system environment variable
        via .env.    ([@milonimrod](https://github.com/milonimrod))    ([\\#63](https://github.com/theskumar/python-dotenv/issues/63))-
        \  Disable \".env not found\" warning by default    ([@maxkoryukov](https://github.com/maxkoryukov))
        \   ([\\#57](https://github.com/theskumar/python-dotenv/issues/57))## 0.6.5-
        \  Add support for special characters `\\`.    ([@pjona](https://github.com/pjona))
        \   ([\\#60](https://github.com/theskumar/python-dotenv/issues/60))## 0.6.4-
        \  Fix issue with single quotes ([@Flimm])    ([\\#52](https://github.com/theskumar/python-dotenv/issues/52))##
        0.6.3-   Handle unicode exception in setup.py    ([\\#46](https://github.com/theskumar/python-dotenv/issues/46))##
        0.6.2-   Fix dotenv list command ([@ticosax](https://github.com/ticosax))-
        \  Add iPython Support    ([@tillahoffmann](https://github.com/tillahoffmann))##
        0.6.0-   Drop support for Python 2.6-   Handle escaped characters and newlines
        in quoted values. (Thanks    [@iameugenejo](https://github.com/iameugenejo))-
        \  Remove any spaces around unquoted key/value. (Thanks    [@paulochf](https://github.com/paulochf))-
        \  Added POSIX variable expansion. (Thanks    [@hugochinchilla](https://github.com/hugochinchilla))##
        0.5.1-   Fix find\\_dotenv - it now start search from the file where this
        \   function is called from.## 0.5.0-   Add `find_dotenv` method that will
        try to find a `.env` file.    (Thanks [@isms](https://github.com/isms))##
        0.4.0-   cli: Added `-q/--quote` option to control the behaviour of quotes
        \   around values in `.env`. (Thanks    [@hugochinchilla](https://github.com/hugochinchilla)).-
        \  Improved test coverage.[#78]: https://github.com/theskumar/python-dotenv/issues/78[#121]:
        https://github.com/theskumar/python-dotenv/issues/121[#148]: https://github.com/theskumar/python-dotenv/issues/148[#158]:
        https://github.com/theskumar/python-dotenv/issues/158[#170]: https://github.com/theskumar/python-dotenv/issues/170[#172]:
        https://github.com/theskumar/python-dotenv/issues/172[#176]: https://github.com/theskumar/python-dotenv/issues/176[#183]:
        https://github.com/theskumar/python-dotenv/issues/183[#359]: https://github.com/theskumar/python-dotenv/issues/359[#469]:
        https://github.com/theskumar/python-dotenv/issues/469[#456]: https://github.com/theskumar/python-dotenv/issues/456[#466]:
        https://github.com/theskumar/python-dotenv/issues/466[#454]: https://github.com/theskumar/python-dotenv/issues/454[#474]:
        https://github.com/theskumar/python-dotenv/issues/474[@alanjds]: https://github.com/alanjds[@altendky]:
        https://github.com/altendky[@andrewsmith]: https://github.com/andrewsmith[@asyncee]:
        https://github.com/asyncee[@bbc2]: https://github.com/bbc2[@befeleme]: https://github.com/befeleme[@cjauvin]:
        https://github.com/cjauvin[@eaf]: https://github.com/eaf[@earlbread]: https://github.com/earlbread[@eggplants]:
        https://github.com/@eggplants[@ekohl]: https://github.com/ekohl[@elbehery95]:
        https://github.com/elbehery95[@eumiro]: https://github.com/eumiro[@Flimm]:
        https://github.com/Flimm[@freddyaboulton]: https://github.com/freddyaboulton[@gergelyk]:
        https://github.com/gergelyk[@gongqingkui]: https://github.com/gongqingkui[@greyli]:
        https://github.com/greyli[@harveer07]: https://github.com/@harveer07[@jadutter]:
        https://github.com/jadutter[@jankislinger]: https://github.com/jankislinger[@jctanner]:
        https://github.com/jctanner[@larsks]: https://github.com/@larsks[@lsmith77]:
        https://github.com/lsmith77[@mgorny]: https://github.com/mgorny[@naorlivne]:
        https://github.com/@naorlivne[@Nicals]: https://github.com/Nicals[@Nougat-Waffle]:
        https://github.com/Nougat-Waffle[@qnighy]: https://github.com/qnighy[@Qwerty-133]:
        https://github.com/Qwerty-133[@rabinadk1]: https://github.com/@rabinadk1[@sammck]:
        https://github.com/@sammck[@samwyma]: https://github.com/samwyma[@snobu]:
        https://github.com/snobu[@techalchemy]: https://github.com/techalchemy[@theGOTOguy]:
        https://github.com/theGOTOguy[@theskumar]: https://github.com/theskumar[@ulyssessouza]:
        https://github.com/ulyssessouza[@venthur]: https://github.com/venthur[@x-yuri]:
        https://github.com/x-yuri[@yannham]: https://github.com/yannham[@zueve]: https://github.com/zueve[Unreleased]:
        https://github.com/theskumar/python-dotenv/compare/v1.0.1...HEAD[1.0.1]: https://github.com/theskumar/python-dotenv/compare/v1.0.0...v1.0.1[1.0.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.21.0...v1.0.0[0.21.1]:
        https://github.com/theskumar/python-dotenv/compare/v0.21.0...v0.21.1[0.21.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.20.0...v0.21.0[0.20.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.19.2...v0.20.0[0.19.2]:
        https://github.com/theskumar/python-dotenv/compare/v0.19.1...v0.19.2[0.19.1]:
        https://github.com/theskumar/python-dotenv/compare/v0.19.0...v0.19.1[0.19.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.18.0...v0.19.0[0.18.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.17.1...v0.18.0[0.17.1]:
        https://github.com/theskumar/python-dotenv/compare/v0.17.0...v0.17.1[0.17.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.16.0...v0.17.0[0.16.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.15.0...v0.16.0[0.15.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.14.0...v0.15.0[0.14.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.13.0...v0.14.0[0.13.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.12.0...v0.13.0[0.12.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.11.0...v0.12.0[0.11.0]:
        https://github.com/theskumar/python-dotenv/compare/v0.10.5...v0.11.0[0.10.5]:
        https://github.com/theskumar/python-dotenv/compare/v0.10.4...v0.10.5[0.10.4]:
        https://github.com/theskumar/python-dotenv/compare/v0.10.3...v0.10.4"
      Package: python-dotenv
      Source: pip
      Version: 1.0.1
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: python-dotenv
      DownloadURL: https://files.pythonhosted.org/packages/bc/57/e84d88dfe0aec03b7a2d4327012c1627ab5f03652216c63d49846d7a6c58/python-dotenv-1.0.1.tar.gz
  bazaar:
    register: 'no'
    prim: 14/CTX1026133
    community_link: https://github.com/theskumar/python-dotenv
    community_name: https://github.com/theskumar/python-dotenv
    community_url: https://github.com/theskumar/python-dotenv
    component_comment: ''
    component_highlevel_description: Reads key-value pairs from a .env file and can
      set them as environment variables. It helps in developing applications following
      the 12-factor principles.
    component_name: python-dotenv
    component_platform: linux
    component_programing_language: Python
    component_version: V1.0.1
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/theskumar/python-dotenv/archive/v1.0.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1082902&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: python-dotenv
    target_sw: linux
    vendor: pip
    version: 1.0.1
    web_url: https://github.com/theskumar/python-dotenv
  licenses:
  - BSD-3-Clause
  name: python-dotenv
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.0.1
  mimer:
    linking: Static
    product_number: CTX1026133
    product_version_label: V1.0.1
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: python-multipart+0.0.9
  additional_info:
    fossa-attribution:
      Description: '================== Python-Multipart==================.. image::
        https://github.com/andrew-d/python-multipart/actions/workflows/test.yaml/badge.svg        :target:
        https://github.com/andrew-d/python-multipart/actionspython-multipart is an
        Apache2 licensed streaming multipart parser for Python.Test coverage is currently
        100%.Documentation is available `here`_... _here: https://andrew-d.github.io/python-multipart/Why?----Because
        streaming uploads are awesome for large files.How to Test-----------If you
        want to test:.. code-block:: bash    $ pip install ''.[dev]''    $ inv test'
      Package: python-multipart
      Source: pip
      Version: 0.0.9
      Hash: ''
      licenses:
      - Apache-2.0
      Title: python-multipart
      DownloadURL: https://files.pythonhosted.org/packages/5c/0f/9c55ac6c84c0336e22a26fa84ca6c51d58d7ac3a2d78b0dfa8748826c883/python_multipart-0.0.9.tar.gz
  bazaar:
    register: 'no'
    prim: 4/CTX1030575
    community_link: https://github.com/andrew-d/python-multipart
    community_name: https://github.com/andrew-d/python-multipart
    community_url: https://github.com/andrew-d/python-multipart
    component_comment: ''
    component_highlevel_description: A streaming multipart parser for Python.
    component_name: python-multipart
    component_platform: linux
    component_programing_language: Python
    component_version: 0.0.9
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/andrew-d/python-multipart/archive/0.0.9.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1086253&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: python-multipart
    target_sw: linux
    vendor: pip
    version: 0.0.9
    web_url: https://pypi.org/project/python-multipart/0.0.9/
  licenses:
  - Apache-2.0
  name: python-multipart
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.0.9
  mimer:
    linking: Static
    product_number: CTX1030575
    product_version_label: 0.0.9
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: python-rapidjson+1.16
  additional_info:
    fossa-attribution:
      Description: ".. -*- coding: utf-8 -*-.. :Project:   python-rapidjson -- Introduction..
        :Author:    Ken Robbins <ken@kenrobbins.com>.. :License:   MIT License.. :Copyright:
        \xA9 2015 Ken Robbins.. :Copyright: \xA9 2016, 2017, 2018, 2020, 2022 Lele
        Gaifax..================== python-rapidjson==================Python wrapper
        around RapidJSON===============================:Authors: Ken Robbins <ken@kenrobbins.com>;
        Lele Gaifax <lele@metapensiero.it>:License: `MIT License`__:Status: |build|
        |doc|__ https://raw.githubusercontent.com/python-rapidjson/python-rapidjson/master/LICENSE..
        |build| image:: https://travis-ci.org/python-rapidjson/python-rapidjson.svg?branch=master
        \  :target: https://travis-ci.org/python-rapidjson/python-rapidjson   :alt:
        Build status.. |doc| image:: https://readthedocs.org/projects/python-rapidjson/badge/?version=latest
        \  :target: https://readthedocs.org/projects/python-rapidjson/builds/   :alt:
        Documentation statusRapidJSON_ is an extremely fast C++ JSON parser and serialization
        library: this modulewraps it into a Python 3 extension, exposing its serialization/deserialization
        (to/fromeither ``bytes``, ``str`` or *file-like* instances) and `JSON Schema`__
        validationcapabilities.Latest version documentation is automatically rendered
        by `Read the Docs`__.__ http://json-schema.org/documentation.html__ https://python-rapidjson.readthedocs.io/en/latest/Getting
        Started---------------First install ``python-rapidjson``:.. code-block:: bash
        \   $ pip install python-rapidjsonor, if you prefer `Conda`__:.. code-block::
        bash    $ conda install -c conda-forge python-rapidjson__ https://conda.io/docs/Basic
        usage looks like this:.. code-block:: python    >>> import rapidjson    >>>
        data = {'foo': 100, 'bar': 'baz'}    >>> rapidjson.dumps(data)    '{\"foo\":100,\"bar\":\"baz\"}'
        \   >>> rapidjson.loads('{\"bar\":\"baz\",\"foo\":100}')    {'bar': 'baz',
        'foo': 100}    >>>    >>> class Stream:    ...   def write(self, data):    ...
        \     print(\"Chunk:\", data)    ...    >>> rapidjson.dump(data, Stream(),
        chunk_size=5)    Chunk: b'{\"foo'    Chunk: b'\":100'    Chunk: b',\"bar'
        \   Chunk: b'\":\"ba'    Chunk: b'z\"}'Development-----------If you want to
        install the development version (maybe to contribute fixes orenhancements)
        you may clone the repository:.. code-block:: bash    $ git clone --recursive
        https://github.com/python-rapidjson/python-rapidjson.git.. note:: The ``--recursive``
        option is needed because we use a *submodule* to          include RapidJSON_
        sources. Alternatively you can do a plain          ``clone`` immediately followed
        by a ``git submodule update --init``.          Alternatively, if you already
        have (a *compatible* version of)          RapidJSON includes around, you can
        compile the module specifying          their location with the option ``--rj-include-dir``,
        for example:          .. code-block:: shell             $ python3 setup.py
        build --rj-include-dir=/usr/include/rapidjsonA set of makefiles implement
        most common operations, such as *build*, *check*and *release*; see ``make
        help`` output for a list of available targets.Performance-----------``python-rapidjson``
        tries to be as performant as possible while stayingcompatible with the ``json``
        module.See the `this section`__ in the documentation for a comparison with
        other JSON libraries.__ https://python-rapidjson.readthedocs.io/en/latest/benchmarks.htmlIncompatibility---------------Although
        we tried to implement an API similar to the standard library ``json``, being
        astrict *drop-in* replacement in not our goal and we have decided to depart
        from there insome aspects. See `this section`__ in the documentation for further
        details.__ https://python-rapidjson.readthedocs.io/en/latest/quickstart.html#incompatibilities..
        _RapidJSON: http://rapidjson.org/Changes-------1.16 (2024-02-28)~~~~~~~~~~~~~~~~~*
        Produce Python 3.8 wheels again, I deactivated it too eagerly, it's in *security
        fixes  only* mode, not yet reached its `end-of-life` state1.15 (2024-02-28)~~~~~~~~~~~~~~~~~*
        Honor the `recursion limit`__ also at parse time, to avoid attacks as described
        by  `CVE-2024-27454`__  __ https://docs.python.org/3.12/library/sys.html#sys.setrecursionlimit
        \ __ https://monicz.dev/CVE-2024-274541.14 (2023-12-14)~~~~~~~~~~~~~~~~~*
        Produce binary wheels for macOS/arm64, thanks to timothyjlaurent (`PR #195`__)
        \ __ https://github.com/python-rapidjson/python-rapidjson/pull/1701.13 (2023-10-29)~~~~~~~~~~~~~~~~~*
        Fix handling of write_mode in dump functions (problem emerged discussing `issue
        #191`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1911.12
        (2023-10-07)~~~~~~~~~~~~~~~~~* Generate wheels on PyPI using final Python
        3.12 release, thanks to cibuildwheel `2.16.2`__  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v21621.11
        (2023-09-11)~~~~~~~~~~~~~~~~~* Use `current master`__ version of rapidjson
        \ __ https://github.com/Tencent/rapidjson/compare/083f359f5c36198accc2b9360ce1e32a333231d9...5e17dbed34eef33af8f3e734820b5dc547a2a3aa9*
        Use cibuildwheel `2.15.0`__  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v21501.10
        (2023-03-15)~~~~~~~~~~~~~~~~~* Use `current master`__ version of rapidjson
        \ __ https://github.com/Tencent/rapidjson/commit/083f359f5c36198accc2b9360ce1e32a333231d9*
        Produce ppc64le wheels, thanks to mgiessing (`PR #170`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/170*
        Use cibuildwheel `2.12.1`__  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v21211.9
        (2022-10-17)~~~~~~~~~~~~~~~~* Produce Python 3.11 wheels, thanks to ``cibuildwheel``
        `2.11.1`__  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v21111.8
        (2022-07-07)~~~~~~~~~~~~~~~~* Fix `problem on macOS`__ explicitly requiring
        C++11, thanks to agate-pris (`issue  #166`__)  __ https://github.com/Tencent/rapidjson/commit/9965ab37f6cfae3d58a0a6e34c76112866ace0b1#commitcomment-77875054
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/1661.7 (2022-07-06)~~~~~~~~~~~~~~~~*
        Use `current master`__ version of rapidjson  __ https://github.com/Tencent/rapidjson/commit/232389d4f1012dddec4ef84861face2d2ba85709*
        Update the test suite to work on Pyston, thanks to Kevin Modzelewski (`PR
        #161`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/1611.6
        (2022-02-19)~~~~~~~~~~~~~~~~* Fix memory leak when using ``end_array`` (`issue
        #160`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1601.5
        (2021-10-16)~~~~~~~~~~~~~~~~* Fix serialization bug when using DM_UNIX_TIME
        in a non-C locale context1.4 (2021-06-25)~~~~~~~~~~~~~~~~* Build binary wheel
        for aarch64, thanks to odidev (`PR #156`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/1561.3
        (2021-06-25)~~~~~~~~~~~~~~~~* Yet another attempt to fix automatic wheels
        upload1.2 (2021-06-25)~~~~~~~~~~~~~~~~* Fix automatic wheels upload from GH
        Actions to PyPI1.1 (2021-06-25)~~~~~~~~~~~~~~~~* Reduce decoder memory consumption
        by uniquifiying keys in the loaded dictionaries* Implement an alternative
        way of transmogrify JSON objects, similar to ``json``\\ 's  ``object_pairs_hook``
        load option (`issue #154`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1541.0
        (2020-12-13)~~~~~~~~~~~~~~~~* Require Python 3.6 or greater* New serialization
        options, ``iterable_mode`` and ``mapping_mode``, to give some control  on
        how generic iterables and mappings get encoded (fix `issue #149`__ and  `issue
        #150`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/149
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/150* Internal
        refactorings, folding \"skipkeys\" and \"sort_keys\" arguments into the  mapping_mode
        options, respectively as MM_SKIP_NON_STRING_KEYS and MM_SORT_KEYS: \"old\"
        \ arguments kept for backward compatibility* Bump major version to 1, tag
        as \"production/stable\" and switch to a simpler X.Y  versioning schema0.9.4
        (2020-11-16)~~~~~~~~~~~~~~~~~~* Fix memory leak loading an invalid JSON (`issue
        #148`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1480.9.3
        (2020-10-24)~~~~~~~~~~~~~~~~~~* Fix access to ``Encoder`` instance attributes
        (`issue #147`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1470.9.2
        (2020-10-24)~~~~~~~~~~~~~~~~~~* Use `current master`__ version of rapidjson
        \ __ https://github.com/Tencent/rapidjson/commit/0ccdbf364c577803e2a751f5aededce935314313*
        Enable GH Actions-based test workflow, thanks to Martin Thoma (`PR #143`__)
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/143* Produce
        Python 3.9 wheels, disable testing under Python < 3.6* Make the character
        used for indentation in pretty mode a parameter (`issue #135`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/135*
        Handle wider precision range in timestamps fractional seconds (`PR 133`__),
        thanks to  Karl Seguin  __ https://github.com/python-rapidjson/python-rapidjson/pull/133*
        Add comparison benchmarks against orjson and hyperjson (`issue #130`__ and
        `PR #131`__,  thanks to Sebastian Pipping)  __ https://github.com/python-rapidjson/python-rapidjson/issues/130
        \ __ https://github.com/python-rapidjson/python-rapidjson/pull/1310.9.1 (2019-11-13)~~~~~~~~~~~~~~~~~~*
        Fix memory leak in case of failed validation (`issue #126`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1260.9.0
        (2019-11-13)~~~~~~~~~~~~~~~~~~* Produce Python 3.8 wheels* Compatibility fix
        for Python 3.8 (`issue #125`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/125*
        New dump option ``write_mode``, supporting RapidJSON's ``kFormatSingleLineArray``
        option  (`issue #123`__), thanks to Nguy\u1EC5n H\u1ED3ng Qu\xE2n for the
        initial implementation (`PR #124`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/123
        \ __ https://github.com/python-rapidjson/python-rapidjson/pull/1240.8.0 (2019-08-09)~~~~~~~~~~~~~~~~~~*
        New serialization option ``bytes_mode`` to control how bytes instances get
        encoded  (`issue #122`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1220.7.2
        (2019-06-09)~~~~~~~~~~~~~~~~~~* Hopefully fix the memory leak when loading
        from a stream (`issue #117`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1170.7.1
        (2019-05-11)~~~~~~~~~~~~~~~~~~* Raise a more specific exception on loading
        errors, ``JSONDecodeError``, instead of  generic ``ValueError`` (`issue #118`__)
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/118* Fix
        optimization path when using ``OrderedDict``\\ s (`issue #119`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/119*
        Fix serialization of ``IntEnum``\\ s (`issue #121`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/121*
        I spent *quite a lot* of time investigating on the memory leak when loading
        from a  stream (`issue #117`__): as I was not able to fully replicate the
        problem, I cannot be  sure I solved the problem... sorry!  __ https://github.com/python-rapidjson/python-rapidjson/issues/1170.7.0
        (2019-02-11)~~~~~~~~~~~~~~~~~~* Raise correct exception in code samples (`PR
        #109`__), thanks to Thomas D\xE4hling  __ https://github.com/python-rapidjson/python-rapidjson/pull/109*
        Fix compilation with system-wide install of rapidjson (`issue #110`__)  __
        https://github.com/python-rapidjson/python-rapidjson/issues/110* Use current
        master version of rapidjson, that includes a `fix`__ for its `issue #1368`__
        \ and `issue #1336`__, and cures several compilation warnings as well (`issue
        #112`__ and  `issue #107`__)  __ https://github.com/Tencent/rapidjson/commit/f5e5d47fac0f654749c4d6267015005b74643dff
        \ __ https://github.com/Tencent/rapidjson/issues/1368  __ https://github.com/Tencent/rapidjson/issues/1336
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/112  __ https://github.com/python-rapidjson/python-rapidjson/issues/107*
        Fix memory leak when using ``object_hook`` (`issue #115`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/1150.6.3
        (2018-07-11)~~~~~~~~~~~~~~~~~~* No visible changes, but now PyPI carries binary
        wheels for Python 3.7.0.6.2 (2018-06-08)~~~~~~~~~~~~~~~~~~* Use a more specific
        ValidationError, to differentiate from invalid JSON0.6.1 (2018-06-06)~~~~~~~~~~~~~~~~~~*
        Nothing new, attempt to build Python 3.6 binary wheels on Travis CI0.6.0 (2018-06-06)~~~~~~~~~~~~~~~~~~*
        Add a new comparison table involving ``ensure_ascii`` (`issue #98`__)  __
        https://github.com/python-rapidjson/python-rapidjson/issues/98* Use Python's
        ``repr()`` to emit float values instead of rapidjson's ``dtoa()`` (`issue
        \ #101`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/101*
        Use a newer (although unreleased) version of rapidjson to fix an `issue`__
        with  JSONSchema validation (`PR #103`__), thanks to Anthony Miyaguchi  __
        https://github.com/Tencent/rapidjson/issues/825  __ https://github.com/python-rapidjson/python-rapidjson/pull/1030.5.2
        (2018-03-31)~~~~~~~~~~~~~~~~~~* Tiny tweak to restore macOS build on Travis
        CI0.5.1 (2018-03-31)~~~~~~~~~~~~~~~~~~* Minor tweaks to CI and PyPI deploy
        configuration0.5.0 (2018-03-31)~~~~~~~~~~~~~~~~~~* New ``RawJSON`` class,
        allowing inclusion of *pre-serialized* content (`PR #95`__ and  `PR #96`__),
        thanks to Silvio Tomatis  __ https://github.com/python-rapidjson/python-rapidjson/pull/95
        \ __ https://github.com/python-rapidjson/python-rapidjson/pull/960.4.3 (2018-01-14)~~~~~~~~~~~~~~~~~~*
        Deserialize from ``bytes`` and ``bytearray`` instances, ensuring they  contain
        valid UTF-8 data* Speed up parsing of floating point numbers, avoiding intermediary
        conversion  to a Python string (`PR #94`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/940.4.2
        (2018-01-09)~~~~~~~~~~~~~~~~~~* Fix precision handling of DM_UNIX_TIME timestamps0.4.1
        (2018-01-08)~~~~~~~~~~~~~~~~~~* Fix memory leaks in ``Decoder()`` and ``Encoder()``
        classes, related to  bad handling of ``PyObject_GetAttr()`` result value*
        Fix compatibility with Python 3.7a0.4.0 (2018-01-05)~~~~~~~~~~~~~~~~~~* Implemented
        the streaming interface, see `load()`__ and `dump()`__ (`issue #80`__)  __
        https://python-rapidjson.readthedocs.io/en/latest/load.html  __ https://python-rapidjson.readthedocs.io/en/latest/dump.html
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/80  **Backward
        incompatibility**: now the *flags* arguments on all the functions are  *keyword
        only*, to mimic stdlib's ``json`` style0.3.2 (2017-12-21)~~~~~~~~~~~~~~~~~~*
        Reduce compiler warnings (`issue #87`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/870.3.1
        (2017-12-20)~~~~~~~~~~~~~~~~~~* Fix Travis CI recipe to accomodate MacOS0.3.0
        (2017-12-20)~~~~~~~~~~~~~~~~~~* Fix compilation on MacOS (`issue #78`__)  __
        https://github.com/python-rapidjson/python-rapidjson/issues/78* Handle generic
        iterables (`PR #89`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/89
        \ **Backward incompatibility**: the ``dumps()`` function and the ``Encoder()``
        \ constructor used to accept a ``max_recursion_depth`` argument, to control
        \ the maximum allowed nesting of Python structures; since the underlying  function
        is now effectively recursive, it has been replaced by the generic  `sys.setrecursionlimit()`__
        mechanism  __ https://docs.python.org/3.6/library/sys.html#sys.setrecursionlimit0.2.7
        (2017-12-08)~~~~~~~~~~~~~~~~~~* Restore compatibility with Python < 3.60.2.6
        (2017-12-08)~~~~~~~~~~~~~~~~~~* Fix memory leaks when using object_hook/start_object/end_object0.2.5
        (2017-09-30)~~~~~~~~~~~~~~~~~~* Fix bug where error handling code could raise
        an exception causing a  confusing exception to be returned (`PR #82`__)  __
        https://github.com/python-rapidjson/python-rapidjson/pull/82* Fix bug where
        loads's ``object_hook`` and dumps's ``default`` arguments  could not be passed
        ``None`` explicitly (`PR #83`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/83*
        Fix crash when dealing with surrogate pairs (`issue #81`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/810.2.4
        (2017-09-17)~~~~~~~~~~~~~~~~~~* Fix compatibility with MacOS/clang0.2.3 (2017-08-24)~~~~~~~~~~~~~~~~~~*
        Limit the precision of DM_UNIX_TIME timestamps to six decimal digits0.2.2
        (2017-08-24)~~~~~~~~~~~~~~~~~~* Nothing new, attempt to fix production of
        Python 3.6 binary wheels0.2.1 (2017-08-24)~~~~~~~~~~~~~~~~~~* Nothing new,
        attempt to fix production of Python 3.6 binary wheels0.2.0 (2017-08-24)~~~~~~~~~~~~~~~~~~*
        New ``parse_mode`` option, implementing relaxed JSON syntax (`issue #73`__)
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/73* New ``Encoder``
        and ``Decoder``, implementing a class-based interface* New ``Validator``,
        exposing the underlying *JSON schema* validation (`issue #71`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/710.1.0
        (2017-08-16)~~~~~~~~~~~~~~~~~~* Remove beta status0.1.0b4 (2017-08-14)~~~~~~~~~~~~~~~~~~~~*
        Make execution of the test suite on Appveyor actually happen0.1.0b3 (2017-08-12)~~~~~~~~~~~~~~~~~~~~*
        Exclude CI configurations from the source distribution0.1.0b2 (2017-08-12)~~~~~~~~~~~~~~~~~~~~*
        Fix Powershell wheel upload script in appveyor configuration0.1.0b1 (2017-08-12)~~~~~~~~~~~~~~~~~~~~*
        Compilable with somewhat old g++ (`issue #69`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/69*
        **Backward incompatibilities**:  - all ``DATETIME_MODE_XXX`` constants have
        been shortened to ``DM_XXX``    ``DATETIME_MODE_ISO8601_UTC`` has been renamed
        to ``DM_SHIFT_TO_UTC``  - all ``UUID_MODE_XXX`` constants have been shortened
        to ``UM_XXX``* New option ``DM_UNIX_TIME`` to serialize date, datetime and
        time values as  `UNIX timestamps`__ targeting `issue #61`__  __ https://en.wikipedia.org/wiki/Unix_time
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/61* New option
        ``DM_NAIVE_IS_UTC`` to treat na\xEFve datetime and time values as if  they
        were in the UTC timezone (also for issue #61)* New keyword argument ``number_mode``
        to use underlying C library numbers* Binary wheels for GNU/Linux and Windows
        on PyPI (one would hope: this is the  reason for the beta1 release)0.0.11
        (2017-03-05)~~~~~~~~~~~~~~~~~~~* Fix a couple of refcount handling glitches,
        hopefully targeting `issue  #48`__.  __ https://github.com/python-rapidjson/python-rapidjson/issues/480.0.10
        (2017-03-02)~~~~~~~~~~~~~~~~~~~* Fix source distribution to contain all required
        stuff (`PR #64`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/640.0.9
        (2017-03-02)~~~~~~~~~~~~~~~~~~* CI testing on GitHub* Allow using locally
        installed RapidJSON library (`issue #60`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/60*
        Bug fixes (`issue #37`__, `issue #51`__, `issue #57`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/37
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/51  __ https://github.com/python-rapidjson/python-rapidjson/issues/570.0.8
        (2016-12-09)~~~~~~~~~~~~~~~~~~* Use unpatched RapidJSON 1.1 (`PR #46`__)  __
        https://github.com/python-rapidjson/python-rapidjson/pull/46* Handle serialization
        and deserialization of datetime, date and time  instances (`PR #35`__) and
        of UUID instances (`PR #40`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/35
        \ __ https://github.com/python-rapidjson/python-rapidjson/pull/40* Sphinx
        based documentation (`PR #44`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/44*
        Refresh benchmarks (`PR #45`__)  __ https://github.com/python-rapidjson/python-rapidjson/pull/45*
        Bug fixes (`issue #25`__, `issue #38`__, `PR #43`__)  __ https://github.com/python-rapidjson/python-rapidjson/issues/25
        \ __ https://github.com/python-rapidjson/python-rapidjson/issues/38  __ https://github.com/python-rapidjson/python-rapidjson/pull/43"
      Package: python-rapidjson
      Source: pip
      Version: '1.16'
      Hash: ''
      licenses:
      - BSD-3-Clause
      - JSON
      - MIT
      Title: python-rapidjson
      DownloadURL: https://files.pythonhosted.org/packages/67/cf/d0d323aaa6b75f31a84ac44e911b9a51009c9c7d3be2016413d6991114c9/python-rapidjson-1.16.tar.gz
  bazaar:
    register: 'no'
    prim: 3/CTX1033561
    community_link: https://github.com/python-rapidjson/python-rapidjson
    community_name: https://github.com/python-rapidjson/python-rapidjson
    community_url: https://github.com/python-rapidjson/python-rapidjson
    component_comment: ''
    component_highlevel_description: Python wrapper around rapidjson
    component_name: python-rapidjson
    component_platform: linux
    component_programing_language: C++
    component_version: V1.16
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/python-rapidjson/python-rapidjson/archive/v1.16.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1087632&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: python-rapidjson
    target_sw: linux
    vendor: pip
    version: '1.16'
    web_url: https://github.com/python-rapidjson/python-rapidjson
  licenses:
  - BSD-3-Clause
  - JSON
  - MIT
  name: python-rapidjson
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '1.16'
  mimer:
    linking: Static
    product_number: CTX1033561
    product_version_label: v1.16
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pytz+2023.4
  additional_info:
    fossa-attribution:
      Description: 'pytz - World Timezone Definitions for Python============================================:Author:
        Stuart Bishop <stuart@stuartbishop.net>Introduction~~~~~~~~~~~~pytz brings
        the Olson tz database into Python. This library allowsaccurate and cross platform
        timezone calculations using Python 2.4or higher. It also solves the issue
        of ambiguous times at the endof daylight saving time, which you can read more
        about in the PythonLibrary Reference (``datetime.tzinfo``).Almost all of the
        Olson timezones are supported... note::    Projects using Python 3.9 or later
        should be using the support    now included as part of the standard library,
        and third party    packages work with it such as `tzdata <https://pypi.org/project/tzdata/>`_.    pytz
        offers no advantages beyond backwards compatibility with    code written for
        earlier versions of Python... note::    This library differs from the documented
        Python API for    tzinfo implementations; if you want to create local wallclock    times
        you need to use the ``localize()`` method documented in this    document.
        In addition, if you perform date arithmetic on local    times that cross DST
        boundaries, the result may be in an incorrect    timezone (ie. subtract 1
        minute from 2002-10-27 1:00 EST and you get    2002-10-27 0:59 EST instead
        of the correct 2002-10-27 1:59 EDT). A    ``normalize()`` method is provided
        to correct this. Unfortunately these    issues cannot be resolved without
        modifying the Python datetime    implementation (see PEP-431).Installation~~~~~~~~~~~~This
        package can either be installed using ``pip`` or from a tarball using thestandard
        Python distutils.If you are installing using ``pip``, you don''t need to download
        anything as thelatest version will be downloaded for you from PyPI::    pip
        install pytzIf you are installing from a tarball, run the following command
        as anadministrative user::    python setup.py installpytz for Enterprise~~~~~~~~~~~~~~~~~~~Available
        as part of the Tidelift Subscription.The maintainers of pytz and thousands
        of other packages are working with Tidelift to deliver commercial support
        and maintenance for the open source dependencies you use to build your applications.
        Save time, reduce risk, and improve code health, while paying the maintainers
        of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-pytz?utm_source=pypi-pytz&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_.Example
        & Usage~~~~~~~~~~~~~~~Localized times and date arithmetic----------------------------------->>>
        from datetime import datetime, timedelta>>> from pytz import timezone>>> import
        pytz>>> utc = pytz.utc>>> utc.zone''UTC''>>> eastern = timezone(''US/Eastern'')>>>
        eastern.zone''US/Eastern''>>> amsterdam = timezone(''Europe/Amsterdam'')>>>
        fmt = ''%Y-%m-%d %H:%M:%S %Z%z''This library only supports two ways of building
        a localized time. Thefirst is to use the ``localize()`` method provided by
        the pytz library.This is used to localize a naive datetime (datetime with
        no timezoneinformation):>>> loc_dt = eastern.localize(datetime(2002, 10, 27,
        6, 0, 0))>>> print(loc_dt.strftime(fmt))2002-10-27 06:00:00 EST-0500The second
        way of building a localized time is by converting an existinglocalized time
        using the standard ``astimezone()`` method:>>> ams_dt = loc_dt.astimezone(amsterdam)>>>
        ams_dt.strftime(fmt)''2002-10-27 12:00:00 CET+0100''Unfortunately using the
        tzinfo argument of the standard datetimeconstructors ''''does not work''''
        with pytz for many timezones.>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)  #
        /!\ Does not work this way!''2002-10-27 12:00:00 LMT+0018''It is safe for
        timezones without daylight saving transitions though, suchas UTC:>>> datetime(2002,
        10, 27, 12, 0, 0, tzinfo=pytz.utc).strftime(fmt)  # /!\ Not recommended except
        for UTC''2002-10-27 12:00:00 UTC+0000''The preferred way of dealing with times
        is to always work in UTC,converting to localtime only when generating output
        to be readby humans.>>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)>>>
        loc_dt = utc_dt.astimezone(eastern)>>> loc_dt.strftime(fmt)''2002-10-27 01:00:00
        EST-0500''This library also allows you to do date arithmetic using localtimes,
        although it is more complicated than working in UTC as youneed to use the
        ``normalize()`` method to handle daylight saving timeand other timezone transitions.
        In this example, ``loc_dt`` is setto the instant when daylight saving time
        ends in the US/Easterntimezone.>>> before = loc_dt - timedelta(minutes=10)>>>
        before.strftime(fmt)''2002-10-27 00:50:00 EST-0500''>>> eastern.normalize(before).strftime(fmt)''2002-10-27
        01:50:00 EDT-0400''>>> after = eastern.normalize(before + timedelta(minutes=20))>>>
        after.strftime(fmt)''2002-10-27 01:10:00 EST-0500''Creating local times is
        also tricky, and the reason why working withlocal times is not recommended.
        Unfortunately, you cannot just passa ``tzinfo`` argument when constructing
        a datetime (see the nextsection for more details)>>> dt = datetime(2002, 10,
        27, 1, 30, 0)>>> dt1 = eastern.localize(dt, is_dst=True)>>> dt1.strftime(fmt)''2002-10-27
        01:30:00 EDT-0400''>>> dt2 = eastern.localize(dt, is_dst=False)>>> dt2.strftime(fmt)''2002-10-27
        01:30:00 EST-0500''Converting between timezones is more easily done, using
        thestandard astimezone method.>>> utc_dt = datetime.fromtimestamp(1143408899,
        tz=utc)>>> utc_dt.strftime(fmt)''2006-03-26 21:34:59 UTC+0000''>>> au_tz =
        timezone(''Australia/Sydney'')>>> au_dt = utc_dt.astimezone(au_tz)>>> au_dt.strftime(fmt)''2006-03-27
        08:34:59 AEDT+1100''>>> utc_dt2 = au_dt.astimezone(utc)>>> utc_dt2.strftime(fmt)''2006-03-26
        21:34:59 UTC+0000''>>> utc_dt == utc_dt2TrueYou can take shortcuts when dealing
        with the UTC side of timezoneconversions. ``normalize()`` and ``localize()``
        are not reallynecessary when there are no daylight saving time transitions
        todeal with.>>> utc_dt = datetime.fromtimestamp(1143408899, tz=utc)>>> utc_dt.strftime(fmt)''2006-03-26
        21:34:59 UTC+0000''>>> au_tz = timezone(''Australia/Sydney'')>>> au_dt = au_tz.normalize(utc_dt.astimezone(au_tz))>>>
        au_dt.strftime(fmt)''2006-03-27 08:34:59 AEDT+1100''>>> utc_dt2 = au_dt.astimezone(utc)>>>
        utc_dt2.strftime(fmt)''2006-03-26 21:34:59 UTC+0000''``tzinfo`` API--------------The
        ``tzinfo`` instances returned by the ``timezone()`` function havebeen extended
        to cope with ambiguous times by adding an ``is_dst``parameter to the ``utcoffset()``,
        ``dst()`` && ``tzname()`` methods.>>> tz = timezone(''America/St_Johns'')>>>
        normal = datetime(2009, 9, 1)>>> ambiguous = datetime(2009, 10, 31, 23, 30)The
        ``is_dst`` parameter is ignored for most timestamps. It is only usedduring
        DST transition ambiguous periods to resolve that ambiguity.>>> print(tz.utcoffset(normal,
        is_dst=True))-1 day, 21:30:00>>> print(tz.dst(normal, is_dst=True))1:00:00>>>
        tz.tzname(normal, is_dst=True)''NDT''>>> print(tz.utcoffset(ambiguous, is_dst=True))-1
        day, 21:30:00>>> print(tz.dst(ambiguous, is_dst=True))1:00:00>>> tz.tzname(ambiguous,
        is_dst=True)''NDT''>>> print(tz.utcoffset(normal, is_dst=False))-1 day, 21:30:00>>>
        tz.dst(normal, is_dst=False).seconds3600>>> tz.tzname(normal, is_dst=False)''NDT''>>>
        print(tz.utcoffset(ambiguous, is_dst=False))-1 day, 20:30:00>>> tz.dst(ambiguous,
        is_dst=False)datetime.timedelta(0)>>> tz.tzname(ambiguous, is_dst=False)''NST''If
        ``is_dst`` is not specified, ambiguous timestamps will raisean ``pytz.exceptions.AmbiguousTimeError``
        exception.>>> print(tz.utcoffset(normal))-1 day, 21:30:00>>> print(tz.dst(normal))1:00:00>>>
        tz.tzname(normal)''NDT''>>> import pytz.exceptions>>> try:...     tz.utcoffset(ambiguous)...
        except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00>>>
        try:...     tz.dst(ambiguous)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00>>>
        try:...     tz.tzname(ambiguous)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00Problems
        with Localtime~~~~~~~~~~~~~~~~~~~~~~~The major problem we have to deal with
        is that certain datetimesmay occur twice in a year. For example, in the US/Eastern
        timezoneon the last Sunday morning in October, the following sequencehappens:    -
        01:00 EDT occurs    - 1 hour later, instead of 2:00am the clock is turned
        back 1 hour      and 01:00 happens again (this time 01:00 EST)In fact, every
        instant between 01:00 and 02:00 occurs twice. This meansthat if you try and
        create a time in the ''US/Eastern'' timezonethe standard datetime syntax,
        there is no way to specify if you meantbefore of after the end-of-daylight-saving-time
        transition. Using thepytz custom syntax, the best you can do is make an educated
        guess:>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 1, 30, 00))>>>
        loc_dt.strftime(fmt)''2002-10-27 01:30:00 EST-0500''As you can see, the system
        has chosen one for you and there is a 50%chance of it being out by one hour.
        For some applications, this doesnot matter. However, if you are trying to
        schedule meetings with peoplein different timezones or analyze log files it
        is not acceptable.The best and simplest solution is to stick with using UTC.  The
        pytzpackage encourages using UTC for internal timezone representation byincluding
        a special UTC implementation based on the standard Pythonreference implementation
        in the Python documentation.The UTC timezone unpickles to be the same instance,
        and pickles to asmaller size than other pytz tzinfo instances.  The UTC implementationcan
        be obtained as pytz.utc, pytz.UTC, or pytz.timezone(''UTC'').>>> import pickle,
        pytz>>> dt = datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)>>> naive = dt.replace(tzinfo=None)>>>
        p = pickle.dumps(dt, 1)>>> naive_p = pickle.dumps(naive, 1)>>> len(p) - len(naive_p)17>>>
        new = pickle.loads(p)>>> new == dtTrue>>> new is dtFalse>>> new.tzinfo is
        dt.tzinfoTrue>>> pytz.utc is pytz.UTC is pytz.timezone(''UTC'')TrueNote that
        some other timezones are commonly thought of as the same (GMT,Greenwich, Universal,
        etc.). The definition of UTC is distinct from theseother timezones, and they
        are not equivalent. For this reason, they willnot compare the same in Python.>>>
        utc == pytz.timezone(''GMT'')FalseSee the section `What is UTC`_, below.If
        you insist on working with local times, this library provides afacility for
        constructing them unambiguously:>>> loc_dt = datetime(2002, 10, 27, 1, 30,
        00)>>> est_dt = eastern.localize(loc_dt, is_dst=True)>>> edt_dt = eastern.localize(loc_dt,
        is_dst=False)>>> print(est_dt.strftime(fmt) + '' / '' + edt_dt.strftime(fmt))2002-10-27
        01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500If you pass None as the is_dst
        flag to localize(), pytz will refuse toguess and raise exceptions if you try
        to build ambiguous or non-existenttimes.For example, 1:30am on 27th Oct 2002
        happened twice in the US/Easterntimezone when the clocks where put back at
        the end of Daylight SavingTime:>>> dt = datetime(2002, 10, 27, 1, 30, 00)>>>
        try:...     eastern.localize(dt, is_dst=None)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % dt)pytz.exceptions.AmbiguousTimeError: 2002-10-27 01:30:00Similarly,
        2:30am on 7th April 2002 never happened at all in theUS/Eastern timezone,
        as the clocks where put forward at 2:00am skippingthe entire hour:>>> dt =
        datetime(2002, 4, 7, 2, 30, 00)>>> try:...     eastern.localize(dt, is_dst=None)...
        except pytz.exceptions.NonExistentTimeError:...     print(''pytz.exceptions.NonExistentTimeError:
        %s'' % dt)pytz.exceptions.NonExistentTimeError: 2002-04-07 02:30:00Both of
        these exceptions share a common base class to make error handlingeasier:>>>
        isinstance(pytz.AmbiguousTimeError(), pytz.InvalidTimeError)True>>> isinstance(pytz.NonExistentTimeError(),
        pytz.InvalidTimeError)TrueA special case is where countries change their timezone
        definitionswith no daylight savings time switch. For example, in 1915 Warsawswitched
        from Warsaw time to Central European time with no daylight savingstransition.
        So at the stroke of midnight on August 5th 1915 the clockswere wound back
        24 minutes creating an ambiguous time period that cannotbe specified without
        referring to the timezone abbreviation or theactual UTC offset. In this case
        midnight happened twice, neither timeduring a daylight saving time period.
        pytz handles this transition bytreating the ambiguous period before the switch
        as daylight savingstime, and the ambiguous period after as standard time.>>>
        warsaw = pytz.timezone(''Europe/Warsaw'')>>> amb_dt1 = warsaw.localize(datetime(1915,
        8, 4, 23, 59, 59), is_dst=True)>>> amb_dt1.strftime(fmt)''1915-08-04 23:59:59
        WMT+0124''>>> amb_dt2 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59),
        is_dst=False)>>> amb_dt2.strftime(fmt)''1915-08-04 23:59:59 CET+0100''>>>
        switch_dt = warsaw.localize(datetime(1915, 8, 5, 00, 00, 00), is_dst=False)>>>
        switch_dt.strftime(fmt)''1915-08-05 00:00:00 CET+0100''>>> str(switch_dt -
        amb_dt1)''0:24:01''>>> str(switch_dt - amb_dt2)''0:00:01''The best way of
        creating a time during an ambiguous time period isby converting from another
        timezone such as UTC:>>> utc_dt = datetime(1915, 8, 4, 22, 36, tzinfo=pytz.utc)>>>
        utc_dt.astimezone(warsaw).strftime(fmt)''1915-08-04 23:36:00 CET+0100''The
        standard Python way of handling all these ambiguities is not tohandle them,
        such as demonstrated in this example using the US/Easterntimezone definition
        from the Python documentation (Note that thisimplementation only works for
        dates between 1987 and 2006 - it isincluded for tests only!):>>> from pytz.reference
        import Eastern # pytz.reference only for tests>>> dt = datetime(2002, 10,
        27, 0, 30, tzinfo=Eastern)>>> str(dt)''2002-10-27 00:30:00-04:00''>>> str(dt
        + timedelta(hours=1))''2002-10-27 01:30:00-05:00''>>> str(dt + timedelta(hours=2))''2002-10-27
        02:30:00-05:00''>>> str(dt + timedelta(hours=3))''2002-10-27 03:30:00-05:00''Notice
        the first two results? At first glance you might think they arecorrect, but
        taking the UTC offset into account you find that they areactually two hours
        appart instead of the 1 hour we asked for.>>> from pytz.reference import UTC
        # pytz.reference only for tests>>> str(dt.astimezone(UTC))''2002-10-27 04:30:00+00:00''>>>
        str((dt + timedelta(hours=1)).astimezone(UTC))''2002-10-27 06:30:00+00:00''Country
        Information~~~~~~~~~~~~~~~~~~~A mechanism is provided to access the timezones
        commonly in usefor a particular country, looked up using the ISO 3166 country
        code.It returns a list of strings that can be used to retrieve the relevanttzinfo
        instance using ``pytz.timezone()``:>>> print('' ''.join(pytz.country_timezones[''nz'']))Pacific/Auckland
        Pacific/ChathamThe Olson database comes with a ISO 3166 country code to English
        countryname mapping that pytz exposes as a dictionary:>>> print(pytz.country_names[''nz''])New
        ZealandWhat is UTC~~~~~~~~~~~''UTC'' is `Coordinated Universal Time`_. It
        is a successor to, but distinctfrom, Greenwich Mean Time (GMT) and the various
        definitions of UniversalTime. UTC is now the worldwide standard for regulating
        clocks and timemeasurement.All other timezones are defined relative to UTC,
        and include offsets likeUTC+0800 - hours to add or subtract from UTC to derive
        the local time. Nodaylight saving time occurs in UTC, making it a useful timezone
        to performdate arithmetic without worrying about the confusion and ambiguities
        causedby daylight saving time transitions, your country changing its timezone,
        ormobile computers that roam through multiple timezones...  _Coordinated Universal
        Time: https://en.wikipedia.org/wiki/Coordinated_Universal_TimeHelpers~~~~~~~There
        are two lists of timezones provided.``all_timezones`` is the exhaustive list
        of the timezone names that canbe used.>>> from pytz import all_timezones>>>
        len(all_timezones) >= 500True>>> ''Etc/Greenwich'' in all_timezonesTrue``common_timezones``
        is a list of useful, current timezones. It doesn''tcontain deprecated zones
        or historical zones, except for a few I''vedeemed in common usage, such as
        US/Eastern (open a bug report if youthink other timezones are deserving of
        being included here). It is alsoa sequence of strings.>>> from pytz import
        common_timezones>>> len(common_timezones) < len(all_timezones)True>>> ''Etc/Greenwich''
        in common_timezonesFalse>>> ''Australia/Melbourne'' in common_timezonesTrue>>>
        ''US/Eastern'' in common_timezonesTrue>>> ''Canada/Eastern'' in common_timezonesTrue>>>
        ''Australia/Yancowinna'' in all_timezonesTrue>>> ''Australia/Yancowinna''
        in common_timezonesFalseBoth ``common_timezones`` and ``all_timezones`` are
        alphabeticallysorted:>>> common_timezones_dupe = common_timezones[:]>>> common_timezones_dupe.sort()>>>
        common_timezones == common_timezones_dupeTrue>>> all_timezones_dupe = all_timezones[:]>>>
        all_timezones_dupe.sort()>>> all_timezones == all_timezones_dupeTrue``all_timezones``
        and ``common_timezones`` are also available as sets.>>> from pytz import all_timezones_set,
        common_timezones_set>>> ''US/Eastern'' in all_timezones_setTrue>>> ''US/Eastern''
        in common_timezones_setTrue>>> ''Australia/Victoria'' in common_timezones_setFalseYou
        can also retrieve lists of timezones used by particular countriesusing the
        ``country_timezones()`` function. It requires an ISO-3166two letter country
        code.>>> from pytz import country_timezones>>> print('' ''.join(country_timezones(''ch'')))Europe/Zurich>>>
        print('' ''.join(country_timezones(''CH'')))Europe/ZurichInternationalization
        - i18n/l10n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Pytz is an interface to the IANA
        database, which uses ASCII names. The `Unicode  Consortium''s Unicode Locales
        (CLDR) <http://cldr.unicode.org>`_project provides translations. Python packages
        such as`Babel <https://babel.pocoo.org/en/latest/api/dates.html#timezone-functionality>`_and
        Thomas Khyn''s `l18n <https://pypi.org/project/l18n/>`_ package can be usedto
        access these translations from Python.License~~~~~~~MIT license.This code
        is also available as part of Zope 3 under the Zope PublicLicense,  Version
        2.1 (ZPL).I''m happy to relicense this code if necessary for inclusion in
        otheropen source projects.Latest Versions~~~~~~~~~~~~~~~This package will
        be updated after releases of the Olson timezonedatabase.  The latest version
        can be downloaded from the `Python PackageIndex <https://pypi.org/project/pytz/>`_.  The
        code that is usedto generate this distribution is hosted on Github and availableusing
        git::    git clone https://github.com/stub42/pytz.gitAnnouncements of new
        releases are made on`Launchpad <https://launchpad.net/pytz>`_, and the`Atom
        feed <http://feeds.launchpad.net/pytz/announcements.atom>`_hosted there.Bugs,
        Feature Requests & Patches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Bugs should be reported
        on `Github <https://github.com/stub42/pytz/issues>`_.Feature requests are
        unlikely to be considered, and efforts instead directedto timezone support
        now built into Python or packages that work with it.Security Issues~~~~~~~~~~~~~~~Reports
        about security issues can be made via `Tidelift <https://tidelift.com/security>`_.Issues
        & Limitations~~~~~~~~~~~~~~~~~~~~- This project is in maintenance mode. Projects
        using Python 3.9 or later  are best served by using the timezone functionaly
        now included in core  Python and packages that work with it such as `tzdata
        <https://pypi.org/project/tzdata/>`_.- Offsets from UTC are rounded to the
        nearest whole minute, so timezones  such as Europe/Amsterdam pre 1937 will
        be up to 30 seconds out. This  was a limitation of the Python datetime library.-
        If you think a timezone definition is incorrect, I probably can''t fix  it.
        pytz is a direct translation of the Olson timezone database, and  changes
        to the timezone definitions need to be made to this source.  If you find errors
        they should be reported to the time zone mailing  list, linked from http://www.iana.org/time-zones.Further
        Reading~~~~~~~~~~~~~~~More info than you want to know about timezones:https://data.iana.org/time-zones/tz-link.htmlContact~~~~~~~Stuart
        Bishop <stuart@stuartbishop.net>'
      Package: pytz
      Source: pip
      Version: '2023.4'
      Hash: ''
      licenses:
      - MIT
      - public-domain
      Title: pytz
      DownloadURL: https://files.pythonhosted.org/packages/ae/fd/c5bafe60236bc2a464452f916b6a1806257109c8954d6a7d19e5d4fb012f/pytz-2023.4.tar.gz
  bazaar:
    register: 'no'
    prim: 37/CAX1056526
    community_link: https://github.com/stub42/pytz
    community_name: https://github.com/stub42/pytz
    community_url: https://github.com/stub42/pytz
    component_comment: ''
    component_highlevel_description: pytz Python historical timezone library and database
    component_name: pytz, Python
    component_platform: linux
    component_programing_language: C
    component_version: '2023.4'
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/stub42/pytz/archive/release_2023.4.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1078415&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pytz
    target_sw: linux
    vendor: pip
    version: '2023.4'
    web_url: http://pythonhosted.org/pytz
  licenses:
  - MIT
  - public-domain
  name: pytz
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '2023.4'
  mimer:
    linking: Static
    product_number: CAX1056526
    product_version_label: release_2023.4
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: setuptools+69.1.1
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/setuptools.svg   :target:
        https://pypi.org/project/setuptools.. image:: https://img.shields.io/pypi/pyversions/setuptools.svg..
        image:: https://github.com/pypa/setuptools/actions/workflows/main.yml/badge.svg   :target:
        https://github.com/pypa/setuptools/actions?query=workflow%3A%22tests%22   :alt:
        tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target:
        https://github.com/astral-sh/ruff    :alt: Ruff.. image:: https://img.shields.io/readthedocs/setuptools/latest.svg    :target:
        https://setuptools.pypa.io.. image:: https://img.shields.io/badge/skeleton-2024-informational   :target:
        https://blog.jaraco.com/skeleton.. image:: https://img.shields.io/codecov/c/github/pypa/setuptools/master.svg?logo=codecov&logoColor=white   :target:
        https://codecov.io/gh/pypa/setuptools.. image:: https://tidelift.com/badges/github/pypa/setuptools?style=flat   :target:
        https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=readme..
        image:: https://img.shields.io/discord/803025117553754132   :target: https://discord.com/channels/803025117553754132/815945031150993468   :alt:
        DiscordSee the `Quickstart <https://setuptools.pypa.io/en/latest/userguide/quickstart.html>`_and
        the `User''s Guide <https://setuptools.pypa.io/en/latest/userguide/>`_ forinstructions
        on how to use Setuptools.Questions and comments should be directed to `GitHub
        Discussions<https://github.com/pypa/setuptools/discussions>`_.Bug reports
        and especially tested patches may besubmitted directly to the `bug tracker<https://github.com/pypa/setuptools/issues>`_.Code
        of Conduct===============Everyone interacting in the setuptools project''s
        codebases, issue trackers,chat rooms, and fora is expected to follow the`PSF
        Code of Conduct <https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md>`_.For
        Enterprise==============Available as part of the Tidelift Subscription.Setuptools
        and the maintainers of thousands of other packages are working with Tidelift
        to deliver one enterprise subscription that covers all of the open source
        you use.`Learn more <https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=referral&utm_campaign=github>`_.'
      Package: setuptools
      Source: pip
      Version: 69.1.1
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      - MIT
      Title: setuptools
      DownloadURL: https://files.pythonhosted.org/packages/c8/1f/e026746e5885a83e1af99002ae63650b7c577af5c424d4c27edcf729ab44/setuptools-69.1.1.tar.gz
  bazaar:
    register: 'no'
    prim: 180/CAX1054853
    community_link: https://pypi.org/project/setuptools/
    community_name: https://pypi.org/project/setuptools/
    community_url: https://pypi.org/project/setuptools/
    component_comment: ''
    component_highlevel_description: ''
    component_name: setuptools
    component_platform: linux
    component_programing_language: ''
    component_version: V69.1.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/c8/1f/e026746e5885a83e1af99002ae63650b7c577af5c424d4c27edcf729ab44/setuptools-69.1.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1079832&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: setuptools
    target_sw: linux
    vendor: pip
    version: 69.1.1
    web_url: https://github.com/pypa/setuptools
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  - MIT
  name: setuptools
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 69.1.1
  mimer:
    linking: Static
    product_number: CAX1054853
    product_version_label: V69.1.1
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: six+1.16.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/six.svg   :target: https://pypi.org/project/six/   :alt:
        six on PyPI.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master   :target:
        https://travis-ci.org/benjaminp/six   :alt: six on TravisCI.. image:: https://readthedocs.org/projects/six/badge/?version=latest   :target:
        https://six.readthedocs.io/   :alt: six''s documentation on Read the Docs..
        image:: https://img.shields.io/badge/license-MIT-green.svg   :target: https://github.com/benjaminp/six/blob/master/LICENSE   :alt:
        MIT License badgeSix is a Python 2 and 3 compatibility library.  It provides
        utility functionsfor smoothing over the differences between the Python versions
        with the goal ofwriting Python code that is compatible on both Python versions.  See
        thedocumentation for more information on what is provided.Six supports Python
        2.7 and 3.3+.  It is contained in only one Pythonfile, so it can be easily
        copied into your project. (The copyright and licensenotice must be retained.)Online
        documentation is at https://six.readthedocs.io/.Bugs can be reported to https://github.com/benjaminp/six.  The
        code can alsobe found there.'
      Package: six
      Source: pip
      Version: 1.16.0
      Hash: ''
      licenses:
      - MIT
      Title: six
      DownloadURL: https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1056543
    community_link: https://pythonhosted.org/six/
    community_name: https://pythonhosted.org/six/
    community_url: https://pythonhosted.org/six/
    component_comment: ''
    component_highlevel_description: Six is a Python 2 and 3 compatibility library.  It
      provides utility functions for smoothing over the differences between the Python
      versions with the goal of writing Python code that is compatible on both Python
      versions
    component_name: six
    component_platform: linux
    component_programing_language: Python
    component_version: 1.16.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/benjaminp/six/archive/refs/tags/1.16.0.zip
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Inactive community.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=970756&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: six
    target_sw: linux
    vendor: pip
    version: 1.16.0
    web_url: https://github.com/benjaminp/six
  licenses:
  - MIT
  name: six
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.16.0
  mimer:
    linking: Static
    product_number: CAX1056543
    product_version_label: 1.16.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: sniffio+1.3.1
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/badge/chat-join%20now-blue.svg   :target:
        https://gitter.im/python-trio/general   :alt: Join chatroom.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg   :target:
        https://sniffio.readthedocs.io/en/latest/?badge=latest   :alt: Documentation
        Status.. image:: https://img.shields.io/pypi/v/sniffio.svg   :target: https://pypi.org/project/sniffio   :alt:
        Latest PyPi version   .. image:: https://img.shields.io/conda/vn/conda-forge/sniffio.svg   :target:
        https://anaconda.org/conda-forge/sniffio    :alt: Latest conda-forge version   ..
        image:: https://travis-ci.org/python-trio/sniffio.svg?branch=master   :target:
        https://travis-ci.org/python-trio/sniffio   :alt: Automated test status..
        image:: https://codecov.io/gh/python-trio/sniffio/branch/master/graph/badge.svg   :target:
        https://codecov.io/gh/python-trio/sniffio   :alt: Test coverage=================================================================sniffio:
        Sniff out which async library your code is running under=================================================================You''re
        writing a library. You''ve decided to be ambitious, and supportmultiple async
        I/O packages, like `Trio<https://trio.readthedocs.io>`__, and `asyncio<https://docs.python.org/3/library/asyncio.html>`__,
        and ... You''vewritten a bunch of clever code to handle all the differences.
        But...how do you know *which* piece of clever code to run?This is a tiny package
        whose only purpose is to let you detect whichasync library your code is running
        under.* Documentation: https://sniffio.readthedocs.io* Bug tracker and source
        code: https://github.com/python-trio/sniffio* License: MIT or Apache License
        2.0, your choice* Contributor guide: https://trio.readthedocs.io/en/latest/contributing.html*
        Code of conduct: Contributors are requested to follow our `code of  conduct  <https://trio.readthedocs.io/en/latest/code-of-conduct.html>`_  in
        all project spaces.This library is maintained by the Trio project, as a service
        to theasync Python community as a whole.Quickstart----------.. code-block::
        python3   from sniffio import current_async_library   import trio   import
        asyncio   async def print_library():       library = current_async_library()       print("This
        is:", library)   # Prints "This is trio"   trio.run(print_library)   # Prints
        "This is asyncio"   asyncio.run(print_library())For more details, including
        how to add support to new async libraries,`please peruse our fine manual <https://sniffio.readthedocs.io>`__.'
      Package: sniffio
      Source: pip
      Version: 1.3.1
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      - MIT
      Title: sniffio
      DownloadURL: https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz
  bazaar:
    register: 'no'
    prim: 3/CTX1032981
    community_link: https://pypi.org/project/sniffio/1.3.1/
    community_name: https://pypi.org/project/sniffio/1.3.1/
    community_url: https://pypi.org/project/sniffio/1.3.1/
    component_comment: ''
    component_highlevel_description: Sniff out which async library your code is running
      under
    component_name: sniffio
    component_platform: linux
    component_programing_language: Python
    component_version: 1.3.1
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159008 (MIT License (MIT))
    - FAL1159998 (Dual License)
    src_download_link: https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080386&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: sniffio
    target_sw: linux
    vendor: pip
    version: 1.3.1
    web_url: https://pypi.org/project/sniffio/1.3.1/
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  - MIT
  name: sniffio
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.3.1
  mimer:
    linking: Static
    product_number: CTX1032981
    product_version_label: 1.3.1
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: starlette+0.36.3
  additional_info:
    fossa-attribution:
      Description: "<p align=\"center\">  <a href=\"https://www.starlette.io/\"><img
        width=\"420px\" src=\"https://raw.githubusercontent.com/encode/starlette/master/docs/img/starlette.png\"
        alt='starlette'></a></p><p align=\"center\">    <em>\u2728 The little ASGI
        framework that shines. \u2728</em></p>---[![Build Status](https://github.com/encode/starlette/workflows/Test%20Suite/badge.svg)](https://github.com/encode/starlette/actions)[![Package
        version](https://badge.fury.io/py/starlette.svg)](https://pypi.python.org/pypi/starlette)[![Supported
        Python Version](https://img.shields.io/pypi/pyversions/starlette.svg?color=%2334D058)](https://pypi.org/project/starlette)**Documentation**:
        [https://www.starlette.io/](https://www.starlette.io/)---# StarletteStarlette
        is a lightweight [ASGI][asgi] framework/toolkit,which is ideal for building
        async web services in Python.It is production-ready, and gives you the following:*
        A lightweight, low-complexity HTTP web framework.* WebSocket support.* In-process
        background tasks.* Startup and shutdown events.* Test client built on `httpx`.*
        CORS, GZip, Static Files, Streaming responses.* Session and Cookie support.*
        100% test coverage.* 100% type annotated codebase.* Few hard dependencies.*
        Compatible with `asyncio` and `trio` backends.* Great overall performance
        [against independent benchmarks][techempower].## RequirementsPython 3.8+##
        Installation```shell$ pip3 install starlette```You'll also want to install
        an ASGI server, such as [uvicorn](http://www.uvicorn.org/), [daphne](https://github.com/django/daphne/),
        or [hypercorn](https://pgjones.gitlab.io/hypercorn/).```shell$ pip3 install
        uvicorn```## Example**example.py**:```pythonfrom starlette.applications import
        Starlettefrom starlette.responses import JSONResponsefrom starlette.routing
        import Routeasync def homepage(request):    return JSONResponse({'hello':
        'world'})routes = [    Route(\"/\", endpoint=homepage)]app = Starlette(debug=True,
        routes=routes)```Then run the application using Uvicorn:```shell$ uvicorn
        example:app```For a more complete example, see [encode/starlette-example](https://github.com/encode/starlette-example).##
        DependenciesStarlette only requires `anyio`, and the following are optional:*
        [`httpx`][httpx] - Required if you want to use the `TestClient`.* [`jinja2`][jinja2]
        - Required if you want to use `Jinja2Templates`.* [`python-multipart`][python-multipart]
        - Required if you want to support form parsing, with `request.form()`.* [`itsdangerous`][itsdangerous]
        - Required for `SessionMiddleware` support.* [`pyyaml`][pyyaml] - Required
        for `SchemaGenerator` support.You can install all of these with `pip3 install
        starlette[full]`.## Framework or ToolkitStarlette is designed to be used either
        as a complete framework, or asan ASGI toolkit. You can use any of its components
        independently.```pythonfrom starlette.responses import PlainTextResponseasync
        def app(scope, receive, send):    assert scope['type'] == 'http'    response
        = PlainTextResponse('Hello, world!')    await response(scope, receive, send)```Run
        the `app` application in `example.py`:```shell$ uvicorn example:appINFO: Started
        server process [11509]INFO: Uvicorn running on http://127.0.0.1:8000 (Press
        CTRL+C to quit)```Run uvicorn with `--reload` to enable auto-reloading on
        code changes.## ModularityThe modularity that Starlette is designed on promotes
        building re-usablecomponents that can be shared between any ASGI framework.
        This should enablean ecosystem of shared middleware and mountable applications.The
        clean API separation also means it's easier to understand each componentin
        isolation.---<p align=\"center\"><i>Starlette is <a href=\"https://github.com/encode/starlette/blob/master/LICENSE.md\">BSD
        licensed</a> code.<br/>Designed & crafted with care.</i></br>&mdash; \u2B50\uFE0F
        &mdash;</p>[asgi]: https://asgi.readthedocs.io/en/latest/[httpx]: https://www.python-httpx.org/[jinja2]:
        https://jinja.palletsprojects.com/[python-multipart]: https://andrew-d.github.io/python-multipart/[itsdangerous]:
        https://itsdangerous.palletsprojects.com/[sqlalchemy]: https://www.sqlalchemy.org[pyyaml]:
        https://pyyaml.org/wiki/PyYAMLDocumentation[techempower]: https://www.techempower.com/benchmarks/#hw=ph&test=fortune&l=zijzen-sf"
      Package: starlette
      Source: pip
      Version: 0.36.3
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: starlette
      DownloadURL: https://files.pythonhosted.org/packages/be/47/1bba49d42d63f4453f0a64a20acbf2d0bd2f5a8cde6a166ee66c074a08f8/starlette-0.36.3.tar.gz
  bazaar:
    register: 'no'
    prim: 15/CTX1030839
    community_link: https://github.com/encode/starlette
    community_name: https://github.com/encode/starlette
    community_url: https://github.com/encode/starlette
    component_comment: ''
    component_highlevel_description: The little ASGI framework that shines. ????
    component_name: starlette
    component_platform: linux
    component_programing_language: Python
    component_version: 0.36.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/encode/starlette/archive/0.36.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1079562&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: starlette
    target_sw: linux
    vendor: pip
    version: 0.36.3
    web_url: https://pypi.org/project/starlette/0.37.2/
  licenses:
  - BSD-3-Clause
  name: starlette
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.36.3
  mimer:
    linking: Static
    product_number: CTX1030839
    product_version_label: 0.36.3
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: sympy+1.12
  additional_info:
    fossa-attribution:
      Description: "# SymPy[![pypi version](https://img.shields.io/pypi/v/sympy.svg)](https://pypi.python.org/pypi/sympy)[![Join
        the chat at https://gitter.im/sympy/sympy](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sympy/sympy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)[![Zenodo
        Badge](https://zenodo.org/badge/18918/sympy/sympy.svg)](https://zenodo.org/badge/latestdoi/18918/sympy/sympy)[![Downloads](https://pepy.tech/badge/sympy/month)](https://pepy.tech/project/sympy)[![GitHub
        Issues](https://img.shields.io/badge/issue_tracking-github-blue.svg)](https://github.com/sympy/sympy/issues)[![Git
        Tutorial](https://img.shields.io/badge/PR-Welcome-%23FF8300.svg?)](https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project)[![Powered
        by NumFocus](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)[![Commits
        since last release](https://img.shields.io/github/commits-since/sympy/sympy/latest.svg?longCache=true&style=flat-square&logo=git&logoColor=fff)](https://github.com/sympy/sympy/releases)[![SymPy
        Banner](https://github.com/sympy/sympy/raw/master/banner.svg)](https://sympy.org/)See
        the [AUTHORS](AUTHORS) file for the list of authors.And many more people helped
        on the SymPy mailing list, reported bugs,helped organize SymPy's participation
        in the Google Summer of Code, theGoogle Highly Open Participation Contest,
        Google Code-In, wrote andblogged about SymPy...License: New BSD License (see
        the [LICENSE](LICENSE) file for details) covers allfiles in the sympy repository
        unless stated otherwise.Our mailing list is at<https://groups.google.com/forum/?fromgroups#!forum/sympy>.We
        have a community chat at [Gitter](https://gitter.im/sympy/sympy). Feelfree
        to ask us anything there. We have a very welcoming and helpfulcommunity.##
        DownloadThe recommended installation method is through Anaconda,<https://www.anaconda.com/products/distribution>You
        can also get the latest version of SymPy from<https://pypi.python.org/pypi/sympy/>To
        get the git version do    $ git clone https://github.com/sympy/sympy.gitFor
        other options (tarballs, debs, etc.), see<https://docs.sympy.org/dev/install.html>.##
        Documentation and UsageFor in-depth instructions on installation and building
        thedocumentation, see the [SymPy Documentation Style Guide](https://docs.sympy.org/dev/documentation-style-guide.html).Everything
        is at:<https://docs.sympy.org/>You can generate everything at the above site
        in your local copy ofSymPy by:    $ cd doc    $ make htmlThen the docs will
        be in <span class=\"title-ref\">\\_build/html</span>. Ifyou don't want to
        read that, here is a short usage:From this directory, start Python and:```
        python>>> from sympy import Symbol, cos>>> x = Symbol('x')>>> e = 1/cos(x)>>>
        print(e.series(x, 0, 10))1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + 277*x**8/8064
        + O(x**10)```SymPy also comes with a console that is a simple wrapper around
        theclassic python console (or IPython when available) that loads the SymPynamespace
        and executes some common commands for you.To start it, issue:    $ bin/isympyfrom
        this directory, if SymPy is not installed or simply:    $ isympyif SymPy is
        installed.## InstallationSymPy has a hard dependency on the [mpmath](http://mpmath.org/)
        library(version \\>= 0.19). You should install it first, please refer to thempmath
        installation guide:<https://github.com/fredrik-johansson/mpmath#1-download--installation>To
        install SymPy using PyPI, run the following command:    $ pip install sympyTo
        install SymPy using Anaconda, run the following command:    $ conda install
        -c anaconda sympyTo install SymPy from GitHub source, first clone SymPy using
        `git`:    $ git clone https://github.com/sympy/sympy.gitThen, in the `sympy`
        repository that you cloned, simply run:    $ pip install .See <https://docs.sympy.org/dev/install.html>
        for more information.## ContributingWe welcome contributions from anyone,
        even if you are new to opensource. Please read our [Introduction to Contributing](https://github.com/sympy/sympy/wiki/Introduction-to-contributing)page
        and the [SymPy Documentation Style Guide](https://docs.sympy.org/dev/documentation-style-guide.html).
        If youare new and looking for some way to contribute, a good place to start
        isto look at the issues tagged [Easy to Fix](https://github.com/sympy/sympy/issues?q=is%3Aopen+is%3Aissue+label%3A%22Easy+to+Fix%22).Please
        note that all participants in this project are expected to followour Code
        of Conduct. By participating in this project you agree to abideby its terms.
        See [CODE\\_OF\\_CONDUCT.md](CODE_OF_CONDUCT.md).## TestsTo execute all tests,
        run:    $./setup.py testin the current directory.For the more fine-grained
        running of tests or doctests, use `bin/test`or respectively `bin/doctest`.
        The master branch is automatically testedby GitHub Actions.To test pull requests,
        use[sympy-bot](https://github.com/sympy/sympy-bot).## Regenerate Experimental
        <span class=\"title-ref\">LaTeX</span> Parser/LexerThe parser and lexer were
        generated with the [ANTLR4](http://antlr4.org)toolchain in `sympy/parsing/latex/_antlr`
        and checked into the repo.Presently, most users should not need to regenerate
        these files, butif you plan to work on this feature, you will need the `antlr4`command-line
        tool (and you must ensure that it is in your `PATH`).One way to get it is:
        \   $ conda install -c conda-forge antlr=4.11.1Alternatively, follow the instructions
        on the ANTLR website and downloadthe `antlr-4.11.1-complete.jar`. Then export
        the `CLASSPATH` as instructedand instead of creating `antlr4` as an alias,
        make it an executable filewith the following contents:``` bash#!/bin/bashjava
        -jar /usr/local/lib/antlr-4.11.1-complete.jar \"$@\"```After making changes
        to `sympy/parsing/latex/LaTeX.g4`, run:    $ ./setup.py antlr## CleanTo clean
        everything (thus getting the same tree as in the repository):    $ git clean
        -Xdfwhich will clear everything ignored by `.gitignore`, and:    $ git clean
        -dfto clear all untracked files. You can revert the most recent changes ingit
        with:    $ git reset --hardWARNING: The above commands will all clear changes
        you may have made,and you will lose them forever. Be sure to check things
        with `gitstatus`, `git diff`, `git clean -Xn`, and `git clean -n` before doing
        anyof those.## BugsOur issue tracker is at <https://github.com/sympy/sympy/issues>.
        Pleasereport any bugs that you find. Or, even better, fork the repository
        onGitHub and create a pull request. We welcome all changes, big or small,and
        we will help you make the pull request if you are new to git (justask on our
        mailing list or Gitter Channel). If you further have any queries, you can
        find answerson Stack Overflow using the [sympy](https://stackoverflow.com/questions/tagged/sympy)
        tag.## Brief HistorySymPy was started by Ond\u0159ej \u010Cert\xEDk in 2005,
        he wrote some code duringthe summer, then he wrote some more code during summer
        2006. In February2007, Fabian Pedregosa joined the project and helped fix
        many things,contributed documentation, and made it alive again. 5 students
        (MateuszPaprocki, Brian Jorgensen, Jason Gedge, Robert Schwarz, and Chris
        Wu)improved SymPy incredibly during summer 2007 as part of the GoogleSummer
        of Code. Pearu Peterson joined the development during the summer2007 and he
        has made SymPy much more competitive by rewriting the corefrom scratch, which
        has made it from 10x to 100x faster. Jurjen N.E. Boshas contributed pretty-printing
        and other patches. Fredrik Johansson haswritten mpmath and contributed a lot
        of patches.SymPy has participated in every Google Summer of Code since 2007.
        Youcan see <https://github.com/sympy/sympy/wiki#google-summer-of-code> forfull
        details. Each year has improved SymPy by bounds. Most of SymPy'sdevelopment
        has come from Google Summer of Code students.In 2011, Ond\u0159ej \u010Cert\xEDk
        stepped down as lead developer, with AaronMeurer, who also started as a Google
        Summer of Code student, taking hisplace. Ond\u0159ej \u010Cert\xEDk is still
        active in the community but is too busywith work and family to play a lead
        development role.Since then, a lot more people have joined the development
        and somepeople have also left. You can see the full list in doc/src/aboutus.rst,or
        online at:<https://docs.sympy.org/dev/aboutus.html#sympy-development-team>The
        git history goes back to 2007 when development moved from svn to hg.To see
        the history before that point, look at<https://github.com/sympy/sympy-old>.You
        can use git to see the biggest developers. The command:    $ git shortlog
        -nswill show each developer, sorted by commits to the project. The command:
        \   $ git shortlog -ns --since=\"1 year\"will show the top developers from
        the last year.## CitationTo cite SymPy in publications use> Meurer A, Smith
        CP, Paprocki M, \u010Cert\xEDk O, Kirpichev SB, Rocklin M,> Kumar A, Ivanov
        S, Moore JK, Singh S, Rathnayake T, Vig S, Granger BE,> Muller RP, Bonazzi
        F, Gupta H, Vats S, Johansson F, Pedregosa F, Curry> MJ, Terrel AR, Rou\u010Dka
        \u0160, Saboo A, Fernando I, Kulal S, Cimrman R,> Scopatz A. (2017) SymPy:
        symbolic computing in Python. *PeerJ Computer> Science* 3:e103 <https://doi.org/10.7717/peerj-cs.103>A
        BibTeX entry for LaTeX users is``` bibtex@article{10.7717/peerj-cs.103, title
        = {SymPy: symbolic computing in Python}, author = {Meurer, Aaron and Smith,
        Christopher P. and Paprocki, Mateusz and \\v{C}ert\\'{i}k, Ond\\v{r}ej and
        Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, Amit and Ivanov, Sergiu
        and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean
        and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta,
        Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry,
        Matthew J. and Terrel, Andy R. and Rou\\v{c}ka, \\v{S}t\\v{e}p\\'{a}n and
        Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert
        and Scopatz, Anthony}, year = 2017, month = Jan, keywords = {Python, Computer
        algebra system, Symbolics}, abstract = {            SymPy is an open-source
        computer algebra system written in pure Python. It is built with a focus on
        extensibility and ease of use, through both interactive and programmatic applications.
        These characteristics have led SymPy to become a popular symbolic library
        for the scientific Python ecosystem. This paper presents the architecture
        of SymPy, a description of its features, and a discussion of select submodules.
        The supplementary material provides additional examples and further outlines
        details of the architecture and features of SymPy.         }, volume = 3,
        pages = {e103}, journal = {PeerJ Computer Science}, issn = {2376-5992}, url
        = {https://doi.org/10.7717/peerj-cs.103}, doi = {10.7717/peerj-cs.103}}```SymPy
        is BSD licensed, so you are free to use it whatever you like, beit academic,
        commercial, creating forks or derivatives, as long as youcopy the BSD statement
        if you redistribute it (see the LICENSE file fordetails). That said, although
        not required by the SymPy license, if itis convenient for you, please cite
        SymPy when using it in your work andalso consider contributing all your changes
        back, so that we canincorporate it and all of us will benefit in the end."
      Package: sympy
      Source: pip
      Version: '1.12'
      Hash: ''
      licenses:
      - BSD-3-Clause
      - MIT
      Title: sympy
      DownloadURL: https://files.pythonhosted.org/packages/e5/57/3485a1a3dff51bfd691962768b14310dae452431754bfc091250be50dd29/sympy-1.12.tar.gz
  bazaar:
    register: 'no'
    prim: 2/CTX1031223
    community_link: https://pypi.org/project/sympy/
    community_name: https://pypi.org/project/sympy/
    community_url: https://pypi.org/project/sympy/
    component_comment: ''
    component_highlevel_description: A computer algebra system written in pure Python.
    component_name: sympy
    component_platform: linux
    component_programing_language: Python
    component_version: '1.12'
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://files.pythonhosted.org/packages/e5/57/3485a1a3dff51bfd691962768b14310dae452431754bfc091250be50dd29/sympy-1.12.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1065403&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: sympy
    target_sw: linux
    vendor: pip
    version: '1.12'
    web_url: https://sympy.org
  licenses:
  - BSD-3-Clause
  - MIT
  name: sympy
  primary:
  - torch+2.2.2
  subcomponent: false
  type: FOSS
  versions:
  - '1.12'
  mimer:
    linking: Static
    product_number: CTX1031223
    product_version_label: '1.12'
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: torch+2.2.2
  additional_info:
    fossa-attribution:
      Description: "![PyTorch Logo](https://github.com/pytorch/pytorch/blob/main/docs/source/_static/img/pytorch-logo-dark.png)--------------------------------------------------------------------------------PyTorch
        is a Python package that provides two high-level features:- Tensor computation
        (like NumPy) with strong GPU acceleration- Deep neural networks built on a
        tape-based autograd systemYou can reuse your favorite Python packages such
        as NumPy, SciPy, and Cython to extend PyTorch when needed.Our trunk health
        (Continuous Integration signals) can be found at [hud.pytorch.org](https://hud.pytorch.org/ci/pytorch/pytorch/main).<!--
        toc -->- [More About PyTorch](#more-about-pytorch)  - [A GPU-Ready Tensor
        Library](#a-gpu-ready-tensor-library)  - [Dynamic Neural Networks: Tape-Based
        Autograd](#dynamic-neural-networks-tape-based-autograd)  - [Python First](#python-first)
        \ - [Imperative Experiences](#imperative-experiences)  - [Fast and Lean](#fast-and-lean)
        \ - [Extensions Without Pain](#extensions-without-pain)- [Installation](#installation)
        \ - [Binaries](#binaries)    - [NVIDIA Jetson Platforms](#nvidia-jetson-platforms)
        \ - [From Source](#from-source)    - [Prerequisites](#prerequisites)    -
        [Install Dependencies](#install-dependencies)    - [Get the PyTorch Source](#get-the-pytorch-source)
        \   - [Install PyTorch](#install-pytorch)      - [Adjust Build Options (Optional)](#adjust-build-options-optional)
        \ - [Docker Image](#docker-image)    - [Using pre-built images](#using-pre-built-images)
        \   - [Building the image yourself](#building-the-image-yourself)  - [Building
        the Documentation](#building-the-documentation)  - [Previous Versions](#previous-versions)-
        [Getting Started](#getting-started)- [Resources](#resources)- [Communication](#communication)-
        [Releases and Contributing](#releases-and-contributing)- [The Team](#the-team)-
        [License](#license)<!-- tocstop -->## More About PyTorch[Learn the basics
        of PyTorch](https://pytorch.org/tutorials/beginner/basics/intro.html)At a
        granular level, PyTorch is a library that consists of the following components:|
        Component | Description || ---- | --- || [**torch**](https://pytorch.org/docs/stable/torch.html)
        | A Tensor library like NumPy, with strong GPU support || [**torch.autograd**](https://pytorch.org/docs/stable/autograd.html)
        | A tape-based automatic differentiation library that supports all differentiable
        Tensor operations in torch || [**torch.jit**](https://pytorch.org/docs/stable/jit.html)
        | A compilation stack (TorchScript) to create serializable and optimizable
        models from PyTorch code  || [**torch.nn**](https://pytorch.org/docs/stable/nn.html)
        | A neural networks library deeply integrated with autograd designed for maximum
        flexibility || [**torch.multiprocessing**](https://pytorch.org/docs/stable/multiprocessing.html)
        | Python multiprocessing, but with magical memory sharing of torch Tensors
        across processes. Useful for data loading and Hogwild training || [**torch.utils**](https://pytorch.org/docs/stable/data.html)
        | DataLoader and other utility functions for convenience |Usually, PyTorch
        is used either as:- A replacement for NumPy to use the power of GPUs.- A deep
        learning research platform that provides maximum flexibility and speed.Elaborating
        Further:### A GPU-Ready Tensor LibraryIf you use NumPy, then you have used
        Tensors (a.k.a. ndarray).![Tensor illustration](./docs/source/_static/img/tensor_illustration.png)PyTorch
        provides Tensors that can live either on the CPU or the GPU and accelerates
        thecomputation by a huge amount.We provide a wide variety of tensor routines
        to accelerate and fit your scientific computation needssuch as slicing, indexing,
        mathematical operations, linear algebra, reductions.And they are fast!###
        Dynamic Neural Networks: Tape-Based AutogradPyTorch has a unique way of building
        neural networks: using and replaying a tape recorder.Most frameworks such
        as TensorFlow, Theano, Caffe, and CNTK have a static view of the world.One
        has to build a neural network and reuse the same structure again and again.Changing
        the way the network behaves means that one has to start from scratch.With
        PyTorch, we use a technique called reverse-mode auto-differentiation, which
        allows you tochange the way your network behaves arbitrarily with zero lag
        or overhead. Our inspiration comesfrom several research papers on this topic,
        as well as current and past work such as[torch-autograd](https://github.com/twitter/torch-autograd),[autograd](https://github.com/HIPS/autograd),[Chainer](https://chainer.org),
        etc.While this technique is not unique to PyTorch, it's one of the fastest
        implementations of it to date.You get the best of speed and flexibility for
        your crazy research.![Dynamic graph](https://github.com/pytorch/pytorch/blob/main/docs/source/_static/img/dynamic_graph.gif)###
        Python FirstPyTorch is not a Python binding into a monolithic C++ framework.It
        is built to be deeply integrated into Python.You can use it naturally like
        you would use [NumPy](https://www.numpy.org/) / [SciPy](https://www.scipy.org/)
        / [scikit-learn](https://scikit-learn.org) etc.You can write your new neural
        network layers in Python itself, using your favorite librariesand use packages
        such as [Cython](https://cython.org/) and [Numba](http://numba.pydata.org/).Our
        goal is to not reinvent the wheel where appropriate.### Imperative ExperiencesPyTorch
        is designed to be intuitive, linear in thought, and easy to use.When you execute
        a line of code, it gets executed. There isn't an asynchronous view of the
        world.When you drop into a debugger or receive error messages and stack traces,
        understanding them is straightforward.The stack trace points to exactly where
        your code was defined.We hope you never spend hours debugging your code because
        of bad stack traces or asynchronous and opaque execution engines.### Fast
        and LeanPyTorch has minimal framework overhead. We integrate acceleration
        librariessuch as [Intel MKL](https://software.intel.com/mkl) and NVIDIA ([cuDNN](https://developer.nvidia.com/cudnn),
        [NCCL](https://developer.nvidia.com/nccl)) to maximize speed.At the core,
        its CPU and GPU Tensor and neural network backendsare mature and have been
        tested for years.Hence, PyTorch is quite fast \u2014 whether you run small
        or large neural networks.The memory usage in PyTorch is extremely efficient
        compared to Torch or some of the alternatives.We've written custom memory
        allocators for the GPU to make sure thatyour deep learning models are maximally
        memory efficient.This enables you to train bigger deep learning models than
        before.### Extensions Without PainWriting new neural network modules, or interfacing
        with PyTorch's Tensor API was designed to be straightforwardand with minimal
        abstractions.You can write new neural network layers in Python using the torch
        API[or your favorite NumPy-based libraries such as SciPy](https://pytorch.org/tutorials/advanced/numpy_extensions_tutorial.html).If
        you want to write your layers in C/C++, we provide a convenient extension
        API that is efficient and with minimal boilerplate.No wrapper code needs to
        be written. You can see [a tutorial here](https://pytorch.org/tutorials/advanced/cpp_extension.html)
        and [an example here](https://github.com/pytorch/extension-cpp).## Installation###
        BinariesCommands to install binaries via Conda or pip wheels are on our website:
        [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)####
        NVIDIA Jetson PlatformsPython wheels for NVIDIA's Jetson Nano, Jetson TX1/TX2,
        Jetson Xavier NX/AGX, and Jetson AGX Orin are provided [here](https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-10-now-available/72048)
        and the L4T container is published [here](https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-pytorch)They
        require JetPack 4.2 and above, and [@dusty-nv](https://github.com/dusty-nv)
        and [@ptrblck](https://github.com/ptrblck) are maintaining them.### From Source####
        PrerequisitesIf you are installing from source, you will need:- Python 3.8
        or later (for Linux, Python 3.8.1+ is needed)- A compiler that fully supports
        C++17, such as clang or gcc (gcc 9.4.0 or newer is required)We highly recommend
        installing an [Anaconda](https://www.anaconda.com/download) environment. You
        will get a high-quality BLAS library (MKL) and you get controlled dependency
        versions regardless of your Linux distro.If you want to compile with CUDA
        support, [select a supported version of CUDA from our support matrix](https://pytorch.org/get-started/locally/),
        then install the following:- [NVIDIA CUDA](https://developer.nvidia.com/cuda-downloads)-
        [NVIDIA cuDNN](https://developer.nvidia.com/cudnn) v8.5 or above- [Compiler](https://gist.github.com/ax3l/9489132)
        compatible with CUDANote: You could refer to the [cuDNN Support Matrix](https://docs.nvidia.com/deeplearning/cudnn/reference/support-matrix.html)
        for cuDNN versions with the various supported CUDA, CUDA driver and NVIDIA
        hardwareIf you want to disable CUDA support, export the environment variable
        `USE_CUDA=0`.Other potentially useful environment variables may be found in
        `setup.py`.If you are building for NVIDIA's Jetson platforms (Jetson Nano,
        TX1, TX2, AGX Xavier), Instructions to install PyTorch for Jetson Nano are
        [available here](https://devtalk.nvidia.com/default/topic/1049071/jetson-nano/pytorch-for-jetson-nano/)If
        you want to compile with ROCm support, install- [AMD ROCm](https://rocm.docs.amd.com/en/latest/deploy/linux/quick_start.html)
        4.0 and above installation- ROCm is currently supported only for Linux systems.If
        you want to disable ROCm support, export the environment variable `USE_ROCM=0`.Other
        potentially useful environment variables may be found in `setup.py`.#### Install
        Dependencies**Common**```bashconda install cmake ninja# Run this command from
        the PyTorch directory after cloning the source code using the \u201CGet the
        PyTorch Source\u201C section belowpip install -r requirements.txt```**On Linux**```bashconda
        install intel::mkl-static intel::mkl-include# CUDA only: Add LAPACK support
        for the GPU if neededconda install -c pytorch magma-cuda110  # or the magma-cuda*
        that matches your CUDA version from https://anaconda.org/pytorch/repo# (optional)
        If using torch.compile with inductor/triton, install the matching version
        of triton# Run from the pytorch directory after cloningmake triton```**On
        MacOS**```bash# Add this package on intel x86 processor machines onlyconda
        install intel::mkl-static intel::mkl-include# Add these packages if torch.distributed
        is neededconda install pkg-config libuv```**On Windows**```bashconda install
        intel::mkl-static intel::mkl-include# Add these packages if torch.distributed
        is needed.# Distributed package support on Windows is a prototype feature
        and is subject to changes.conda install -c conda-forge libuv=1.39```#### Get
        the PyTorch Source```bashgit clone --recursive https://github.com/pytorch/pytorchcd
        pytorch# if you are updating an existing checkoutgit submodule syncgit submodule
        update --init --recursive```#### Install PyTorch**On Linux**If you would like
        to compile PyTorch with [new C++ ABI](https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html)
        enabled, then first run this command:```bashexport _GLIBCXX_USE_CXX11_ABI=1```If
        you're compiling for AMD ROCm then first run this command:```bash# Only run
        this if you're compiling for ROCmpython tools/amd_build/build_amd.py```Install
        PyTorch```bashexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname $(which
        conda))/../\"}python setup.py develop```> _Aside:_ If you are using [Anaconda](https://www.anaconda.com/distribution/#download-section),
        you may experience an error caused by the linker:>> ```plaintext> build/temp.linux-x86_64-3.7/torch/csrc/stub.o:
        file not recognized: file format not recognized> collect2: error: ld returned
        1 exit status> error: command 'g++' failed with exit status 1> ```>> This
        is caused by `ld` from the Conda environment shadowing the system `ld`. You
        should use a newer version of Python that fixes this issue. The recommended
        Python version is 3.8.1+.**On macOS**```bashpython3 setup.py develop```**On
        Windows**Choose Correct Visual Studio Version.PyTorch CI uses Visual C++ BuildTools,
        which come with Visual Studio Enterprise,Professional, or Community Editions.
        You can also install the build tools fromhttps://visualstudio.microsoft.com/visual-cpp-build-tools/.
        The build tools *do not*come with Visual Studio Code by default.If you want
        to build legacy python code, please refer to [Building on legacy code and
        CUDA](https://github.com/pytorch/pytorch/blob/main/CONTRIBUTING.md#building-on-legacy-code-and-cuda)**CPU-only
        builds**In this mode PyTorch computations will run on your CPU, not your GPU```cmdconda
        activatepython setup.py develop```Note on OpenMP: The desired OpenMP implementation
        is Intel OpenMP (iomp). In order to link against iomp, you'll need to manually
        download the library and set up the building environment by tweaking `CMAKE_INCLUDE_PATH`
        and `LIB`. The instruction [here](https://github.com/pytorch/pytorch/blob/main/docs/source/notes/windows.rst#building-from-source)
        is an example for setting up both MKL and Intel OpenMP. Without these configurations
        for CMake, Microsoft Visual C OpenMP runtime (vcomp) will be used.**CUDA based
        build**In this mode PyTorch computations will leverage your GPU via CUDA for
        faster number crunching[NVTX](https://docs.nvidia.com/gameworks/content/gameworkslibrary/nvtx/nvidia_tools_extension_library_nvtx.htm)
        is needed to build Pytorch with CUDA.NVTX is a part of CUDA distributive,
        where it is called \"Nsight Compute\". To install it onto an already installed
        CUDA run CUDA installation once again and check the corresponding checkbox.Make
        sure that CUDA with Nsight Compute is installed after Visual Studio.Currently,
        VS 2017 / 2019, and Ninja are supported as the generator of CMake. If `ninja.exe`
        is detected in `PATH`, then Ninja will be used as the default generator, otherwise,
        it will use VS 2017 / 2019.<br/> If Ninja is selected as the generator, the
        latest MSVC will get selected as the underlying toolchain.Additional libraries
        such as[Magma](https://developer.nvidia.com/magma), [oneDNN, a.k.a. MKLDNN
        or DNNL](https://github.com/oneapi-src/oneDNN), and [Sccache](https://github.com/mozilla/sccache)
        are often needed. Please refer to the [installation-helper](https://github.com/pytorch/pytorch/tree/main/.ci/pytorch/win-test-helpers/installation-helpers)
        to install them.You can refer to the [build_pytorch.bat](https://github.com/pytorch/pytorch/blob/main/.ci/pytorch/win-test-helpers/build_pytorch.bat)
        script for some other environment variables configurations```cmdcmd:: Set
        the environment variables after you have downloaded and unzipped the mkl package,::
        else CMake would throw an error as `Could NOT find OpenMP`.set CMAKE_INCLUDE_PATH={Your
        directory}\\mkl\\includeset LIB={Your directory}\\mkl\\lib;%LIB%:: Read the
        content in the previous section carefully before you proceed.:: [Optional]
        If you want to override the underlying toolset used by Ninja and Visual Studio
        with CUDA, please run the following script block.:: \"Visual Studio 2019 Developer
        Command Prompt\" will be run automatically.:: Make sure you have CMake >=
        3.12 before you do this when you use the Visual Studio generator.set CMAKE_GENERATOR_TOOLSET_VERSION=14.27set
        DISTUTILS_USE_SDK=1for /f \"usebackq tokens=*\" %i in (`\"%ProgramFiles(x86)%\\Microsoft
        Visual Studio\\Installer\\vswhere.exe\" -version [15^,17^) -products * -latest
        -property installationPath`) do call \"%i\\VC\\Auxiliary\\Build\\vcvarsall.bat\"
        x64 -vcvars_ver=%CMAKE_GENERATOR_TOOLSET_VERSION%:: [Optional] If you want
        to override the CUDA host compilerset CUDAHOSTCXX=C:\\Program Files (x86)\\Microsoft
        Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\bin\\HostX64\\x64\\cl.exepython
        setup.py develop```##### Adjust Build Options (Optional)You can adjust the
        configuration of cmake variables optionally (without building first), by doingthe
        following. For example, adjusting the pre-detected directories for CuDNN or
        BLAS can be donewith such a step.On Linux```bashexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname
        $(which conda))/../\"}python setup.py build --cmake-onlyccmake build  # or
        cmake-gui build```On macOS```bashexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname
        $(which conda))/../\"}MACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python
        setup.py build --cmake-onlyccmake build  # or cmake-gui build```### Docker
        Image#### Using pre-built imagesYou can also pull a pre-built docker image
        from Docker Hub and run with docker v19.03+```bashdocker run --gpus all --rm
        -ti --ipc=host pytorch/pytorch:latest```Please note that PyTorch uses shared
        memory to share data between processes, so if torch multiprocessing is used
        (e.g.for multithreaded data loaders) the default shared memory segment size
        that container runs with is not enough, and youshould increase shared memory
        size either with `--ipc=host` or `--shm-size` command line options to `nvidia-docker
        run`.#### Building the image yourself**NOTE:** Must be built with a docker
        version > 18.06The `Dockerfile` is supplied to build images with CUDA 11.1
        support and cuDNN v8.You can pass `PYTHON_VERSION=x.y` make variable to specify
        which Python version is to be used by Miniconda, or leave itunset to use the
        default.```bashmake -f docker.Makefile# images are tagged as docker.io/${your_docker_username}/pytorch```You
        can also pass the `CMAKE_VARS=\"...\"` environment variable to specify additional
        CMake variables to be passed to CMake during the build.See [setup.py](./setup.py)
        for the list of available variables.```bashCMAKE_VARS=\"BUILD_CAFFE2=ON BUILD_CAFFE2_OPS=ON\"
        make -f docker.Makefile```### Building the DocumentationTo build documentation
        in various formats, you will need [Sphinx](http://www.sphinx-doc.org) and
        thereadthedocs theme.```bashcd docs/pip install -r requirements.txt```You
        can then build the documentation by running `make <format>` from the`docs/`
        folder. Run `make` to get a list of all available output formats.If you get
        a katex error run `npm install katex`.  If it persists, try`npm install -g
        katex`> Note: if you installed `nodejs` with a different package manager (e.g.,`conda`)
        then `npm` will probably install a version of `katex` that is notcompatible
        with your version of `nodejs` and doc builds will fail.A combination of versions
        that is known to work is `node@6.13.1` and`katex@0.13.18`. To install the
        latter with `npm` you can run```npm install -g katex@0.13.18```### Previous
        VersionsInstallation instructions and binaries for previous PyTorch versions
        may be foundon [our website](https://pytorch.org/previous-versions).## Getting
        StartedThree-pointers to get you started:- [Tutorials: get you started with
        understanding and using PyTorch](https://pytorch.org/tutorials/)- [Examples:
        easy to understand PyTorch code across all domains](https://github.com/pytorch/examples)-
        [The API Reference](https://pytorch.org/docs/)- [Glossary](https://github.com/pytorch/pytorch/blob/main/GLOSSARY.md)##
        Resources* [PyTorch.org](https://pytorch.org/)* [PyTorch Tutorials](https://pytorch.org/tutorials/)*
        [PyTorch Examples](https://github.com/pytorch/examples)* [PyTorch Models](https://pytorch.org/hub/)*
        [Intro to Deep Learning with PyTorch from Udacity](https://www.udacity.com/course/deep-learning-pytorch--ud188)*
        [Intro to Machine Learning with PyTorch from Udacity](https://www.udacity.com/course/intro-to-machine-learning-nanodegree--nd229)*
        [Deep Neural Networks with PyTorch from Coursera](https://www.coursera.org/learn/deep-neural-networks-with-pytorch)*
        [PyTorch Twitter](https://twitter.com/PyTorch)* [PyTorch Blog](https://pytorch.org/blog/)*
        [PyTorch YouTube](https://www.youtube.com/channel/UCWXI5YeOsh03QvJ59PMaXFw)##
        Communication* Forums: Discuss implementations, research, etc. https://discuss.pytorch.org*
        GitHub Issues: Bug reports, feature requests, install issues, RFCs, thoughts,
        etc.* Slack: The [PyTorch Slack](https://pytorch.slack.com/) hosts a primary
        audience of moderate to experienced PyTorch users and developers for general
        chat, online discussions, collaboration, etc. If you are a beginner looking
        for help, the primary medium is [PyTorch Forums](https://discuss.pytorch.org).
        If you need a slack invite, please fill this form: https://goo.gl/forms/PP1AGvNHpSaJP8to1*
        Newsletter: No-noise, a one-way email newsletter with important announcements
        about PyTorch. You can sign-up here: https://eepurl.com/cbG0rv* Facebook Page:
        Important announcements about PyTorch. https://www.facebook.com/pytorch* For
        brand guidelines, please visit our website at [pytorch.org](https://pytorch.org/)##
        Releases and ContributingTypically, PyTorch has three minor releases a year.
        Please let us know if you encounter a bug by [filing an issue](https://github.com/pytorch/pytorch/issues).We
        appreciate all contributions. If you are planning to contribute back bug-fixes,
        please do so without any further discussion.If you plan to contribute new
        features, utility functions, or extensions to the core, please first open
        an issue and discuss the feature with us.Sending a PR without discussion might
        end up resulting in a rejected PR because we might be taking the core in a
        different direction than you might be aware of.To learn more about making
        a contribution to Pytorch, please see our [Contribution page](CONTRIBUTING.md).
        For more information about PyTorch releases, see [Release page](RELEASE.md).##
        The TeamPyTorch is a community-driven project with several skillful engineers
        and researchers contributing to it.PyTorch is currently maintained by [Soumith
        Chintala](http://soumith.ch), [Gregory Chanan](https://github.com/gchanan),
        [Dmytro Dzhulgakov](https://github.com/dzhulgakov), [Edward Yang](https://github.com/ezyang),
        and [Nikita Shulga](https://github.com/malfet) with major contributions coming
        from hundreds of talented individuals in various forms and means.A non-exhaustive
        but growing list needs to mention: Trevor Killeen, Sasank Chilamkurthy, Sergey
        Zagoruyko, Adam Lerer, Francisco Massa, Alykhan Tejani, Luca Antiga, Alban
        Desmaison, Andreas Koepf, James Bradbury, Zeming Lin, Yuandong Tian, Guillaume
        Lample, Marat Dukhan, Natalia Gimelshein, Christian Sarofeen, Martin Raison,
        Edward Yang, Zachary Devito.Note: This project is unrelated to [hughperkins/pytorch](https://github.com/hughperkins/pytorch)
        with the same name. Hugh is a valuable contributor to the Torch community
        and has helped with many things Torch and PyTorch.## LicensePyTorch has a
        BSD-style license, as found in the [LICENSE](LICENSE) file."
      Package: torch
      Source: pip
      Version: 2.2.2
      Hash: ''
      licenses:
      - 0BSD
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - BSL-1.0
      - GPL-3.0-only
      - MIT
      - NCSA
      - PIL
      - Protobuf
      - Zlib
      - apache-2.0 WITH llvm-exception
      - bsd-3-clause-no-trademark
      - bzip2-1.0.6
      Title: torch
      DownloadURL: https://files.pythonhosted.org/packages/33/b3/1fcc3bccfddadfd6845dcbfe26eb4b099f1dfea5aa0e5cfb92b3c98dba5b/torch-2.2.2-cp310-cp310-manylinux1_x86_64.whl
  bazaar:
    register: 'yes'
    prim: SCAS-642776
    community_link: https://github.com/pytorch/pytorch
    community_name: https://github.com/pytorch/pytorch
    community_url: https://github.com/pytorch/pytorch
    component_comment: ''
    component_highlevel_description: ''
    component_name: torch
    component_platform: linux
    component_programing_language: ''
    component_version: v2.2.2
    licenses: []
    src_download_link: https://github.com/pytorch/pytorch/archive/refs/tags/v2.2.2.tar.gz
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: torch
    target_sw: linux
    vendor: pip
    version: 2.2.2
    web_url: https://pytorch.org/
  licenses:
  - 0BSD
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - BSL-1.0
  - GPL-3.0-only
  - MIT
  - NCSA
  - PIL
  - Protobuf
  - Zlib
  - apache-2.0 WITH llvm-exception
  - bsd-3-clause-no-trademark
  - bzip2-1.0.6
  name: torch
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.2
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 2.2.2
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: tritonclient+2.42.0
  additional_info:
    fossa-attribution:
      Description: See [download-using-python-package-installer-pip](https://github.com/triton-inference-server/client/tree/main#download-using-python-package-installer-pip)
        for package details.The [client examples](https://github.com/triton-inference-server/client/tree/main/src/python/examples)
        demonstrate how to use the package to issue request to [triton inference server](https://github.com/triton-inference-server/server).
      Package: tritonclient
      Source: pip
      Version: 2.42.0
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: tritonclient
      DownloadURL: https://files.pythonhosted.org/packages/36/27/e5ed10834fb04a20bf4a36aac03f1395085ef6a0dd5250a30236525a2ddd/tritonclient-2.42.0-py3-none-any.whl
  bazaar:
    register: 'yes'
    prim: SCAS-642717
    community_link: https://developer.nvidia.com/nvidia-triton-inference-server
    community_name: https://developer.nvidia.com/nvidia-triton-inference-server
    community_url: https://developer.nvidia.com/nvidia-triton-inference-server
    component_comment: ''
    component_highlevel_description: ''
    component_name: tritonclient
    component_platform: linux
    component_programing_language: ''
    component_version: 2.42.0
    licenses: []
    src_download_link: https://files.pythonhosted.org/packages/36/27/e5ed10834fb04a20bf4a36aac03f1395085ef6a0dd5250a30236525a2ddd/tritonclient-2.42.0-py3-none-any.whl
    stako_decision_reason: automatic
    stako: DO_NOT_EDIT_MANUALLY
    stako_comment: ''
    bazaarurl: ''
    recode: ''
    retext: ''
    country: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: tritonclient
    target_sw: linux
    vendor: pip
    version: 2.42.0
    web_url: https://developer.nvidia.com/nvidia-triton-inference-server
  licenses:
  - BSD-3-Clause
  name: tritonclient
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2.42.0
  mimer:
    linking: MANDATORY_FOR_MIMER
    product_number: ''
    product_version_label: 2.42.0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: tzdata+2024.1
  additional_info:
    fossa-attribution:
      Description: 'tzdata: Python package providing IANA time zone data====================================================This
        is a Python package containing ``zic``-compiled binaries for the IANA timezone
        database. It is intended to be a fallback for systems that do not havesystem
        time zone data installed (or don''t have it installed in a standardlocation),
        as a part of `PEP 615 <https://www.python.org/dev/peps/pep-0615/>`_This repository
        generates a ``pip``-installable package, published on PyPI as`tzdata <https://pypi.org/project/tzdata>`_.For
        more information, see `the documentation <https://tzdata.readthedocs.io>`_.'
      Package: tzdata
      Source: pip
      Version: '2024.1'
      Hash: ''
      licenses:
      - Apache-2.0
      - public-domain
      Title: tzdata
      DownloadURL: https://files.pythonhosted.org/packages/74/5b/e025d02cb3b66b7b76093404392d4b44343c69101cc85f4d180dd5784717/tzdata-2024.1.tar.gz
  bazaar:
    register: 'no'
    prim: 35/CAX1057935
    community_link: https://github.com/python/tzdata
    community_name: https://github.com/python/tzdata
    community_url: https://github.com/python/tzdata
    component_comment: ''
    component_highlevel_description: Python package wrapping the IANA time zone database
    component_name: tzdata
    component_platform: linux
    component_programing_language: Python
    component_version: '2024.1'
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/python/tzdata/archive/2024.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1082232&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: tzdata
    target_sw: linux
    vendor: pip
    version: '2024.1'
    web_url: https://github.com/python/tzdata
  licenses:
  - Apache-2.0
  - public-domain
  name: tzdata
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '2024.1'
  mimer:
    linking: Static
    product_number: CAX1057935
    product_version_label: '2024.1'
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: urllib3+2.2.1
  additional_info:
    fossa-attribution:
      Description: "<h1 align=\"center\">![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)</h1><p
        align=\"center\">  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"PyPI
        Version\" src=\"https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400\" /></a>
        \ <a href=\"https://pypi.org/project/urllib3\"><img alt=\"Python Versions\"
        src=\"https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400\" /></a>
        \ <a href=\"https://discord.gg/urllib3\"><img alt=\"Join our Discord\" src=\"https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord\"
        /></a>  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img
        alt=\"Coverage Status\" src=\"https://img.shields.io/badge/coverage-100%25-success\"
        /></a>  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img
        alt=\"Build Status on GitHub\" src=\"https://github.com/urllib3/urllib3/workflows/CI/badge.svg\"
        /></a>  <a href=\"https://urllib3.readthedocs.io\"><img alt=\"Documentation
        Status\" src=\"https://readthedocs.org/projects/urllib3/badge/?version=latest\"
        /></a><br>  <a href=\"https://deps.dev/pypi/urllib3\"><img alt=\"OpenSSF Scorecard\"
        src=\"https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge\"
        /></a>  <a href=\"https://slsa.dev\"><img alt=\"SLSA 3\" src=\"https://slsa.dev/images/gh-badge-level3.svg\"
        /></a>  <a href=\"https://bestpractices.coreinfrastructure.org/projects/6227\"><img
        alt=\"CII Best Practices\" src=\"https://bestpractices.coreinfrastructure.org/projects/6227/badge\"
        /></a></p>urllib3 is a powerful, *user-friendly* HTTP client for Python. Much
        of thePython ecosystem already uses urllib3 and you should too.urllib3 brings
        many critical features that are missing from the Pythonstandard libraries:-
        Thread safety.- Connection pooling.- Client-side SSL/TLS verification.- File
        uploads with multipart encoding.- Helpers for retrying requests and dealing
        with HTTP redirects.- Support for gzip, deflate, brotli, and zstd encoding.-
        Proxy support for HTTP and SOCKS.- 100% test coverage.urllib3 is powerful
        and easy to use:```python3>>> import urllib3>>> resp = urllib3.request(\"GET\",
        \"http://httpbin.org/robots.txt\")>>> resp.status200>>> resp.datab\"User-agent:
        *\\nDisallow: /deny\\n\"```## Installingurllib3 can be installed with [pip](https://pip.pypa.io):```bash$
        python -m pip install urllib3```Alternatively, you can grab the latest source
        code from [GitHub](https://github.com/urllib3/urllib3):```bash$ git clone
        https://github.com/urllib3/urllib3.git$ cd urllib3$ pip install .```## Documentationurllib3
        has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).##
        Communityurllib3 has a [community Discord channel](https://discord.gg/urllib3)
        for asking questions andcollaborating with other contributors. Drop by and
        say hello \U0001F44B## Contributingurllib3 happily accepts contributions.
        Please see our[contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)for
        some tips on getting started.## Security DisclosuresTo report a security vulnerability,
        please use the[Tidelift security contact](https://tidelift.com/security).Tidelift
        will coordinate the fix and disclosure with maintainers.## Maintainers- [@sethmlarson](https://github.com/sethmlarson)
        (Seth M. Larson)- [@pquentin](https://github.com/pquentin) (Quentin Pradet)-
        [@illia-v](https://github.com/illia-v) (Illia Volochii)- [@theacodes](https://github.com/theacodes)
        (Thea Flowers)- [@haikuginger](https://github.com/haikuginger) (Jess Shapiro)-
        [@lukasa](https://github.com/lukasa) (Cory Benfield)- [@sigmavirus24](https://github.com/sigmavirus24)
        (Ian Stapleton Cordasco)- [@shazow](https://github.com/shazow) (Andrey Petrov)\U0001F44B##
        SponsorshipIf your company benefits from this library, please consider [sponsoring
        itsdevelopment](https://urllib3.readthedocs.io/en/latest/sponsors.html).##
        For EnterpriseProfessional support for urllib3 is available as part of the
        [TideliftSubscription][1].  Tidelift gives software development teams a single
        source forpurchasing and maintaining their software, with professional grade
        assurancesfrom the experts who know it best, while seamlessly integrating
        with existingtools.[1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme"
      Package: urllib3
      Source: pip
      Version: 2.2.1
      Hash: ''
      licenses:
      - MIT
      - MPL-2.0
      - PSF-2.0
      Title: urllib3
      DownloadURL: https://files.pythonhosted.org/packages/7a/50/7fd50a27caa0652cd4caf224aa87741ea41d3265ad13f010886167cfcc79/urllib3-2.2.1.tar.gz
  bazaar:
    register: 'no'
    prim: 53/CAX1057288
    community_link: https://pypi.org/project/urllib3/
    community_name: https://pypi.org/project/urllib3/
    community_url: https://pypi.org/project/urllib3/
    component_comment: ''
    component_highlevel_description: Python HTTP library with thread-safe connection
      pooling, file post support, sanity friendly, and more.
    component_name: urllib3
    component_platform: linux
    component_programing_language: Python
    component_version: 2.2.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/7a/50/7fd50a27caa0652cd4caf224aa87741ea41d3265ad13f010886167cfcc79/urllib3-2.2.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1079620&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Canada
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: urllib3
    target_sw: linux
    vendor: pip
    version: 2.2.1
    web_url: https://pypi.org/project/urllib3/2.2.1/
  licenses:
  - MIT
  - MPL-2.0
  - PSF-2.0
  name: urllib3
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.1
  mimer:
    linking: Static
    product_number: CAX1057288
    product_version_label: 2.2.1
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: uvicorn+0.27.1
  additional_info:
    fossa-attribution:
      Description: "<p align=\"center\">  <img width=\"320\" height=\"320\" src=\"https://raw.githubusercontent.com/tomchristie/uvicorn/master/docs/uvicorn.png\"
        alt='uvicorn'></p><p align=\"center\"><em>An ASGI web server, for Python.</em></p>---[![Build
        Status](https://github.com/encode/uvicorn/workflows/Test%20Suite/badge.svg)](https://github.com/encode/uvicorn/actions)[![Package
        version](https://badge.fury.io/py/uvicorn.svg)](https://pypi.python.org/pypi/uvicorn)[![Supported
        Python Version](https://img.shields.io/pypi/pyversions/uvicorn.svg?color=%2334D058)](https://pypi.org/project/uvicorn)**Documentation**:
        [https://www.uvicorn.org](https://www.uvicorn.org)---Uvicorn is an ASGI web
        server implementation for Python.Until recently Python has lacked a minimal
        low-level server/application interface forasync frameworks. The [ASGI specification][asgi]
        fills this gap, and means we're now able tostart building a common set of
        tooling usable across all async frameworks.Uvicorn supports HTTP/1.1 and WebSockets.##
        QuickstartInstall using `pip`:```shell$ pip install uvicorn```This will install
        uvicorn with minimal (pure Python) dependencies.```shell$ pip install 'uvicorn[standard]'```This
        will install uvicorn with \"Cython-based\" dependencies (where possible) and
        other \"optional extras\".In this context, \"Cython-based\" means the following:-
        the event loop `uvloop` will be installed and used if possible.- the http
        protocol will be handled by `httptools` if possible.Moreover, \"optional extras\"
        means that:- the websocket protocol will be handled by `websockets` (should
        you want to use `wsproto` you'd need to install it manually) if possible.-
        the `--reload` flag in development mode will use `watchfiles`.- windows users
        will have `colorama` installed for the colored logs.- `python-dotenv` will
        be installed should you want to use the `--env-file` option.- `PyYAML` will
        be installed to allow you to provide a `.yaml` file to `--log-config`, if
        desired.Create an application, in `example.py`:```pythonasync def app(scope,
        receive, send):    assert scope['type'] == 'http'    await send({        'type':
        'http.response.start',        'status': 200,        'headers': [            (b'content-type',
        b'text/plain'),        ],    })    await send({        'type': 'http.response.body',
        \       'body': b'Hello, world!',    })```Run the server:```shell$ uvicorn
        example:app```---## Why ASGI?Most well established Python Web frameworks started
        out as WSGI-based frameworks.WSGI applications are a single, synchronous callable
        that takes a request and returns a response.This doesn\u2019t allow for long-lived
        connections, like you get with long-poll HTTP or WebSocket connections,which
        WSGI doesn't support well.Having an async concurrency model also allows for
        options such as lightweight background tasks,and can be less of a limiting
        factor for endpoints that have long periods being blocked on networkI/O such
        as dealing with slow HTTP requests.---## Alternative ASGI serversA strength
        of the ASGI protocol is that it decouples the server implementationfrom the
        application framework. This allows for an ecosystem of interoperatingwebservers
        and application frameworks.### DaphneThe first ASGI server implementation,
        originally developed to power Django Channels, is [the Daphne webserver][daphne].It
        is run widely in production, and supports HTTP/1.1, HTTP/2, and WebSockets.Any
        of the example applications given here can equally well be run using `daphne`
        instead.```$ pip install daphne$ daphne app:App```### Hypercorn[Hypercorn][hypercorn]
        was initially part of the Quart web framework, beforebeing separated out into
        a standalone ASGI server.Hypercorn supports HTTP/1.1, HTTP/2, and WebSockets.It
        also supports [the excellent `trio` async framework][trio], as an alternative
        to `asyncio`.```$ pip install hypercorn$ hypercorn app:App```### Mangum[Mangum][mangum]
        is an adapter for using ASGI applications with AWS Lambda & API Gateway.---<p
        align=\"center\"><i>Uvicorn is <a href=\"https://github.com/encode/uvicorn/blob/master/LICENSE.md\">BSD
        licensed</a> code.<br/>Designed & crafted with care.</i><br/>&mdash; \U0001F984
        \ &mdash;</p>[asgi]: https://asgi.readthedocs.io/en/latest/[daphne]: https://github.com/django/daphne[hypercorn]:
        https://github.com/pgjones/hypercorn[mangum]: https://mangum.io[trio]: https://trio.readthedocs.io"
      Package: uvicorn
      Source: pip
      Version: 0.27.1
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: uvicorn
      DownloadURL: https://files.pythonhosted.org/packages/09/d8/8aa69c76585035ca81851d99c3b00fd6be050aefd478a5376ff9fc5feb69/uvicorn-0.27.1.tar.gz
  bazaar:
    register: 'no'
    prim: 1/CTX1040425
    community_link: https://github.com/encode/uvicorn
    community_name: https://github.com/encode/uvicorn
    community_url: https://github.com/encode/uvicorn
    component_comment: ''
    component_highlevel_description: "An ASGI web server, for Python. \n\nwww.uvicorn.org/"
    component_name: uvicorn
    component_platform: linux
    component_programing_language: Python
    component_version: 0.27.1
    licenses:
    - FAL1159003/2 (BSD 3-Clause "New" or "Revised" License (BSD-3-Cla)
    src_download_link: https://github.com/encode/uvicorn/archive/0.27.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1085380&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: uvicorn
    target_sw: linux
    vendor: pip
    version: 0.27.1
    web_url: https://pypi.org/project/uvicorn/0.29.0/
  licenses:
  - BSD-3-Clause
  name: uvicorn
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.27.1
  mimer:
    linking: Static
    product_number: CTX1040425
    product_version_label: 0.27.1
    selected_licenses:
    - BSD 3-Clause "New" or "Revised" License (BSD-3-Cla
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: uvloop+0.19.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/github/actions/workflow/status/MagicStack/uvloop/tests.yml?branch=master    :target:
        https://github.com/MagicStack/uvloop/actions/workflows/tests.yml?query=branch%3Amaster..
        image:: https://img.shields.io/pypi/v/uvloop.svg    :target: https://pypi.python.org/pypi/uvloop..
        image:: https://pepy.tech/badge/uvloop    :target: https://pepy.tech/project/uvloop    :alt:
        PyPI - Downloadsuvloop is a fast, drop-in replacement of the built-in asyncioevent
        loop.  uvloop is implemented in Cython and uses libuvunder the hood.The project
        documentation can be found`here <http://uvloop.readthedocs.org/>`_.  Please
        also check out the`wiki <https://github.com/MagicStack/uvloop/wiki>`_.Performance-----------uvloop
        makes asyncio 2-4x faster... image:: https://raw.githubusercontent.com/MagicStack/uvloop/master/performance.png    :target:
        http://magic.io/blog/uvloop-blazing-fast-python-networking/The above chart
        shows the performance of an echo server with differentmessage sizes.  The
        *sockets* benchmark uses ``loop.sock_recv()`` and``loop.sock_sendall()`` methods;
        the *streams* benchmark uses asynciohigh-level streams, created by the ``asyncio.start_server()``
        function;and the *protocol* benchmark uses ``loop.create_server()`` with a
        simpleecho protocol.  Read more about uvloop in a`blog post <http://magic.io/blog/uvloop-blazing-fast-python-networking/>`_about
        it.Installation------------uvloop requires Python 3.8 or greater and is available
        on PyPI.Use pip to install it::    $ pip install uvloopNote that it is highly
        recommended to **upgrade pip before** installinguvloop with::    $ pip install
        -U pipUsing uvloop------------As of uvloop 0.18, the preferred way of using
        it is via the``uvloop.run()`` helper function:.. code:: python    import uvloop    async
        def main():        # Main entry-point.        ...    uvloop.run(main())``uvloop.run()``
        works by simply configuring ``asyncio.run()``to use uvloop, passing all of
        the arguments to it, such as ``debug``,e.g. ``uvloop.run(main(), debug=True)``.With
        Python 3.11 and earlier the following alternativesnippet can be used:.. code::
        python    import asyncio    import sys    import uvloop    async def main():        #
        Main entry-point.        ...    if sys.version_info >= (3, 11):        with
        asyncio.Runner(loop_factory=uvloop.new_event_loop) as runner:            runner.run(main())    else:        uvloop.install()        asyncio.run(main())Building
        From Source--------------------To build uvloop, you''ll need Python 3.8 or
        greater:1. Clone the repository:   .. code::    $ git clone --recursive git@github.com:MagicStack/uvloop.git    $
        cd uvloop2. Create a virtual environment and activate it:   .. code::    $
        python3.7 -m venv uvloop-dev    $ source uvloop-dev/bin/activate3. Install
        development dependencies:   ..  code::    $ pip install -e .[dev]4. Build
        and run tests:   .. code::    $ make    $ make testLicense-------uvloop is
        dual-licensed under MIT and Apache 2.0 licenses.'
      Package: uvloop
      Source: pip
      Version: 0.19.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - CC-BY-4.0
      - FSFUL
      - FSFULLR
      - GPL-2.0-with-autoconf-exception
      - GPL-2.0-with-libtool-exception
      - GPL-3.0-or-later
      - ISC
      - MIT
      - X11
      - gpl-3.0-plus WITH autoconf-macro-exception
      - gpl-3.0-plus WITH autoconf-simple-exception
      - gpl-3.0-plus WITH libtool-exception-2.0
      Title: uvloop
      DownloadURL: https://files.pythonhosted.org/packages/9c/16/728cc5dde368e6eddb299c5aec4d10eaf25335a5af04e8c0abd68e2e9d32/uvloop-0.19.0.tar.gz
  bazaar:
    register: 'no'
    prim: 1/CTX1040434
    community_link: https://github.com/MagicStack/uvloop
    community_name: https://github.com/MagicStack/uvloop
    community_url: https://github.com/MagicStack/uvloop
    component_comment: ''
    component_highlevel_description: Ultra fast asyncio event loop.
    component_name: uvloop
    component_platform: linux
    component_programing_language: Cython
    component_version: V0.19.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159008 (MIT License (MIT))
    - FAL1159998 (Dual License)
    src_download_link: https://github.com/MagicStack/uvloop/archive/v0.19.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1074253&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Cython
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: uvloop
    target_sw: linux
    vendor: pip
    version: 0.19.0
    web_url: https://pypi.org/project/uvloop/0.19.0/
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - CC-BY-4.0
  - FSFUL
  - FSFULLR
  - GPL-2.0-with-autoconf-exception
  - GPL-2.0-with-libtool-exception
  - GPL-3.0-or-later
  - ISC
  - MIT
  - X11
  - gpl-3.0-plus WITH autoconf-macro-exception
  - gpl-3.0-plus WITH autoconf-simple-exception
  - gpl-3.0-plus WITH libtool-exception-2.0
  name: uvloop
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.19.0
  mimer:
    linking: Static
    product_number: CTX1040434
    product_version_label: V0.19.0
    selected_licenses:
    - SELECT_FROM_LICENSES
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: wrapt+1.14.1
  additional_info:
    fossa-attribution:
      Description: 'wrapt=====|Actions| |PyPI|The aim of the **wrapt** module is to
        provide a transparent object proxyfor Python, which can be used as the basis
        for the construction of functionwrappers and decorator functions.The **wrapt**
        module focuses very much on correctness. It therefore goesway beyond existing
        mechanisms such as ``functools.wraps()`` to ensure thatdecorators preserve
        introspectability, signatures, type checking abilitiesetc. The decorators
        that can be constructed using this module will work infar more scenarios than
        typical decorators and provide more predictable andconsistent behaviour.To
        ensure that the overhead is as minimal as possible, a C extension moduleis
        used for performance critical components. An automatic fallback to apure Python
        implementation is also provided where a target system does nothave a compiler
        to allow the C extension to be compiled.Documentation-------------For further
        information on the **wrapt** module see:* http://wrapt.readthedocs.org/Quick
        Start-----------To implement your decorator you need to first define a wrapper
        function.This will be called each time a decorated function is called. The
        wrapperfunction needs to take four positional arguments:* ``wrapped`` - The
        wrapped function which in turns needs to be called by your wrapper function.*
        ``instance`` - The object to which the wrapped function was bound when it
        was called.* ``args`` - The list of positional arguments supplied when the
        decorated function was called.* ``kwargs`` - The dictionary of keyword arguments
        supplied when the decorated function was called.The wrapper function would
        do whatever it needs to, but would usually inturn call the wrapped function
        that is passed in via the ``wrapped``argument.The decorator ``@wrapt.decorator``
        then needs to be applied to the wrapperfunction to convert it into a decorator
        which can in turn be applied toother functions... code-block:: python    import
        wrapt        @wrapt.decorator    def pass_through(wrapped, instance, args,
        kwargs):        return wrapped(*args, **kwargs)    @pass_through    def function():        passIf
        you wish to implement a decorator which accepts arguments, then wrap thedefinition
        of the decorator in a function closure. Any arguments suppliedto the outer
        function when the decorator is applied, will be available tothe inner wrapper
        when the wrapped function is called... code-block:: python    import wrapt    def
        with_arguments(myarg1, myarg2):        @wrapt.decorator        def wrapper(wrapped,
        instance, args, kwargs):            return wrapped(*args, **kwargs)        return
        wrapper    @with_arguments(1, 2)    def function():        passWhen applied
        to a normal function or static method, the wrapper functionwhen called will
        be passed ``None`` as the ``instance`` argument.When applied to an instance
        method, the wrapper function when called willbe passed the instance of the
        class the method is being called on as the``instance`` argument. This will
        be the case even when the instance methodwas called explicitly via the class
        and the instance passed as the firstargument. That is, the instance will never
        be passed as part of ``args``.When applied to a class method, the wrapper
        function when called will bepassed the class type as the ``instance`` argument.When
        applied to a class, the wrapper function when called will be passed``None``
        as the ``instance`` argument. The ``wrapped`` argument in thiscase will be
        the class.The above rules can be summarised with the following example...
        code-block:: python    import inspect        @wrapt.decorator    def universal(wrapped,
        instance, args, kwargs):        if instance is None:            if inspect.isclass(wrapped):                #
        Decorator was applied to a class.                return wrapped(*args, **kwargs)            else:                #
        Decorator was applied to a function or staticmethod.                return
        wrapped(*args, **kwargs)        else:            if inspect.isclass(instance):                #
        Decorator was applied to a classmethod.                return wrapped(*args,
        **kwargs)            else:                # Decorator was applied to an instancemethod.                return
        wrapped(*args, **kwargs)Using these checks it is therefore possible to create
        a universal decoratorthat can be applied in all situations. It is no longer
        necessary to createdifferent variants of decorators for normal functions and
        instance methods,or use additional wrappers to convert a function decorator
        into one thatwill work for instance methods.In all cases, the wrapped function
        passed to the wrapper function is calledin the same way, with ``args`` and
        ``kwargs`` being passed. The``instance`` argument doesn''t need to be used
        in calling the wrappedfunction.Repository----------Full source code for the
        **wrapt** module, including documentation filesand unit tests, can be obtained
        from github.* https://github.com/GrahamDumpleton/wrapt.. |Actions| image::
        https://img.shields.io/github/workflow/status/GrahamDumpleton/wrapt/Test/develop?logo=github&cacheSeconds=600   :target:
        https://github.com/GrahamDumpleton/wrapt/actions.. |PyPI| image:: https://img.shields.io/pypi/v/wrapt.svg?logo=python&cacheSeconds=3600   :target:
        https://pypi.python.org/pypi/wrapt'
      Package: wrapt
      Source: pip
      Version: 1.14.1
      Hash: ''
      licenses:
      - BSD-2-Clause
      Title: wrapt
      DownloadURL: https://files.pythonhosted.org/packages/11/eb/e06e77394d6cf09977d92bff310cb0392930c08a338f99af6066a5a98f92/wrapt-1.14.1.tar.gz
  bazaar:
    register: 'no'
    prim: 14/CAX1058303
    community_link: https://github.com/GrahamDumpleton/wrapt
    community_name: https://github.com/GrahamDumpleton/wrapt
    community_url: https://github.com/GrahamDumpleton/wrapt
    component_comment: ''
    component_highlevel_description: A Python module for decorators, wrappers and
      monkey patching. The aim of the wrapt module is to provide a transparent object
      proxy for Python, which can be used as the basis for the construction of function
      wrappers and decorator functions.
    component_name: wrapt, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 1.14.1
    licenses:
    - FAL1159003/1 (BSD 2-Clause "Simplified" License (BSD-2-Clause))
    src_download_link: https://github.com/GrahamDumpleton/wrapt/archive/refs/tags/1.14.1.zip
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1029427&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Australia
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: wrapt
    target_sw: linux
    vendor: pip
    version: 1.14.1
    web_url: https://github.com/GrahamDumpleton/wrapt
  licenses:
  - BSD-2-Clause
  name: wrapt
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.14.1
  mimer:
    linking: Static
    product_number: CAX1058303
    product_version_label: 1.14.1
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: zipp+3.17.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/zipp.svg   :target: https://pypi.org/project/zipp..
        image:: https://img.shields.io/pypi/pyversions/zipp.svg.. image:: https://github.com/jaraco/zipp/actions/workflows/main.yml/badge.svg   :target:
        https://github.com/jaraco/zipp/actions?query=workflow%3A%22tests%22   :alt:
        tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target:
        https://github.com/astral-sh/ruff    :alt: Ruff.. .. image:: https://readthedocs.org/projects/PROJECT_RTD/badge/?version=latest..    :target:
        https://PROJECT_RTD.readthedocs.io/en/latest/?badge=latest.. image:: https://img.shields.io/badge/skeleton-2024-informational   :target:
        https://blog.jaraco.com/skeleton.. image:: https://tidelift.com/badges/package/pypi/zipp   :target:
        https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=readmeA
        pathlib-compatible Zipfile object wrapper. Official backport of the standard
        library`Path object <https://docs.python.org/3.8/library/zipfile.html#path-objects>`_.Compatibility=============New
        features are introduced in this third-party library and later mergedinto CPython.
        The following table indicates which versions of this librarywere contributed
        to different versions in the standard library:.. list-table::   :header-rows:
        1   * - zipp     - stdlib   * - 3.15     - 3.12   * - 3.5     - 3.11   * -
        3.2     - 3.10   * - 3.3 ??     - 3.9   * - 1.0     - 3.8Usage=====Use ``zipp.Path``
        in place of ``zipfile.Path`` on any Python.For Enterprise==============Available
        as part of the Tidelift Subscription.This project and the maintainers of thousands
        of other packages are working with Tidelift to deliver one enterprise subscription
        that covers all of the open source you use.`Learn more <https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=referral&utm_campaign=github>`_.'
      Package: zipp
      Source: pip
      Version: 3.17.0
      Hash: ''
      licenses:
      - MIT
      Title: zipp
      DownloadURL: https://files.pythonhosted.org/packages/58/03/dd5ccf4e06dec9537ecba8fcc67bbd4ea48a2791773e469e73f94c3ba9a6/zipp-3.17.0.tar.gz
  bazaar:
    register: 'no'
    prim: 23/CTX1026317
    community_link: https://github.com/jaraco/zipp
    community_name: https://github.com/jaraco/zipp
    community_url: https://github.com/jaraco/zipp
    component_comment: ''
    component_highlevel_description: 'A pathlib-compatible Zipfile object wrapper.
      A backport of the Path object.

      functionality.'
    component_name: zipp
    component_platform: linux
    component_programing_language: Python
    component_version: V3.17.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/jaraco/zipp/archive/v3.17.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1065059&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: zipp
    target_sw: linux
    vendor: pip
    version: 3.17.0
    web_url: https://github.com/jaraco/zipp
  licenses:
  - MIT
  name: zipp
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - 3.17.0
  mimer:
    linking: Static
    product_number: CTX1026317
    product_version_label: V3.17.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: zope.event+5.0
  additional_info:
    fossa-attribution:
      Description: '======================= ``zope.event`` README=======================..
        image:: https://img.shields.io/pypi/v/zope.event.svg        :target: https://pypi.python.org/pypi/zope.event/        :alt:
        Latest Version.. image:: https://github.com/zopefoundation/zope.event/actions/workflows/tests.yml/badge.svg        :target:
        https://github.com/zopefoundation/zope.event/actions/workflows/tests.yml..
        image:: https://readthedocs.org/projects/zopeevent/badge/?version=latest        :target:
        http://zopeevent.readthedocs.org/en/latest/        :alt: Documentation StatusThe
        ``zope.event`` package provides a simple event system, including:- An event
        publishing API, intended for use by applications which are  unaware of any
        subscribers to their events.- A very simple synchronous event-dispatching
        system, on which more sophisticated  event dispatching systems can be built.
        For example, a type-based  event dispatching system that builds on ``zope.event``
        can be found in  ``zope.component``.Please see http://zopeevent.readthedocs.io/
        for the documentation.========================== ``zope.event`` Changelog==========================5.0
        (2023-06-23)================- Drop support for Python 2.7, 3.5, 3.6.4.6 (2022-12-15)================-
        Port documentation to Python 3.- Add support for Python 3.10, 3.11.4.5.0 (2020-09-18)==================-
        Add support for Python 3.8 and 3.9.- Remove support for Python 3.4.4.4 (2018-10-05)================-
        Add support for Python 3.74.3.0 (2017-07-25)==================- Add support
        for Python 3.6.- Drop support for Python 3.3.4.2.0 (2016-02-17)==================-
        Add support for Python 3.5.- Drop support for Python 2.6 and 3.2.4.1.0 (2015-10-18)==================-
        Require 100% branch (as well as statement) coverage.- Add a simple class-based
        handler implementation.4.0.3 (2014-03-19)==================- Add support for
        Python 3.4.- Update ``boostrap.py`` to version 2.2.4.0.2 (2012-12-31)==================-
        Flesh out PyPI Trove classifiers.- Add support for jython 2.7.4.0.1 (2012-11-21)==================-
        Add support for Python 3.3.4.0.0 (2012-05-16)==================- Automate
        build of Sphinx HTML docs and running doctest snippets via tox.- Drop explicit
        support for Python 2.4 / 2.5 / 3.1.- Add support for PyPy.3.5.2 (2012-03-30)==================-
        This release is the last which will maintain support for Python 2.4 /  Python
        2.5.- Add support for continuous integration using ``tox`` and ``jenkins``.-
        Add ''setup.py dev'' alias (runs ``setup.py develop`` plus installs  ``nose``
        and ``coverage``).- Add ''setup.py docs'' alias (installs ``Sphinx`` and dependencies).3.5.1
        (2011-08-04)==================- Add Sphinx documentation.3.5.0 (2010-05-01)==================-
        Add change log to ``long-description``.- Add support for Python 3.x.3.4.1
        (2009-03-03)==================- A few minor cleanups.3.4.0 (2007-07-14)==================-
        Initial release as a separate project.'
      Package: zope.event
      Source: pip
      Version: '5.0'
      Hash: ''
      licenses:
      - ZPL-2.1
      Title: zope.event
      DownloadURL: https://files.pythonhosted.org/packages/46/c2/427f1867bb96555d1d34342f1dd97f8c420966ab564d58d18469a1db8736/zope.event-5.0.tar.gz
  bazaar:
    register: 'no'
    prim: 5/CTX1027570
    community_link: https://github.com/zopefoundation/zope.event
    community_name: https://github.com/zopefoundation/zope.event
    community_url: https://github.com/zopefoundation/zope.event
    component_comment: ''
    component_highlevel_description: Event publishing / dispatch, used by Zope Component
      Architecture.
    component_name: zope.event
    component_platform: linux
    component_programing_language: Python
    component_version: '5.0'
    licenses:
    - FAL1159237/21 (Zope Public License 2.1 (ZPL-2.1))
    src_download_link: https://github.com/zopefoundation/zope.event/archive/refs/tags/5.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Low community activity
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1064921&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: zope.event
    target_sw: linux
    vendor: pip
    version: '5.0'
    web_url: https://github.com/zopefoundation/zope.event
  licenses:
  - ZPL-2.1
  name: zope.event
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '5.0'
  mimer:
    linking: Static
    product_number: CTX1027570
    product_version_label: '5.0'
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: zope.interface+6.2
  additional_info:
    fossa-attribution:
      Description: '==================== ``zope.interface``====================..
        image:: https://img.shields.io/pypi/v/zope.interface.svg    :target: https://pypi.python.org/pypi/zope.interface/    :alt:
        Latest Version.. image:: https://img.shields.io/pypi/pyversions/zope.interface.svg        :target:
        https://pypi.org/project/zope.interface/        :alt: Supported Python versions..
        image:: https://github.com/zopefoundation/zope.interface/actions/workflows/tests.yml/badge.svg        :target:
        https://github.com/zopefoundation/zope.interface/actions/workflows/tests.yml..
        image:: https://readthedocs.org/projects/zopeinterface/badge/?version=latest        :target:
        https://zopeinterface.readthedocs.io/en/latest/        :alt: Documentation
        StatusThis package is intended to be independently reusable in any Pythonproject.
        It is maintained by the `Zope Toolkit project<https://zopetoolkit.readthedocs.io/>`_.This
        package provides an implementation of "object interfaces" for Python.Interfaces
        are a mechanism for labeling objects as conforming to a givenAPI or contract.
        So, this package can be considered as implementation ofthe `Design By Contract`_
        methodology support in Python... _Design By Contract: http://en.wikipedia.org/wiki/Design_by_contractFor
        detailed documentation, please see https://zopeinterface.readthedocs.io/en/latest/=========
        Changes=========6.2 (2024-02-16)================- Add preliminary support
        for Python 3.13 as of 3.13a3.- Add support to use the pipe (``|``) syntax
        for ``typing.Union``.  (`#280 <https://github.com/zopefoundation/zope.interface/issues/280>`_)6.1
        (2023-10-05)================- Build Linux binary wheels for Python 3.12.-
        Add support for Python 3.12.- Fix building of the docs for non-final versions.6.0
        (2023-03-17)================- Build Linux binary wheels for Python 3.11.-
        Drop support for Python 2.7, 3.5, 3.6.- Fix test deprecation warning on Python
        3.11.- Add preliminary support for Python 3.12 as of 3.12a5.- Drop:    + `zope.interface.implements`    +
        `zope.interface.implementsOnly`    + `zope.interface.classProvides`5.5.2 (2022-11-17)==================-
        Add support for building arm64 wheels on macOS.5.5.1 (2022-11-03)==================-
        Add support for final Python 3.11 release.5.5.0 (2022-10-10)==================-
        Add support for Python 3.10 and 3.11 (as of 3.11.0rc2).- Add missing Trove
        classifier showing support for Python 3.9.- Add some more entries to ``zope.interface.interfaces.__all__``.-
        Disable unsafe math optimizations in C code.  See `pull request 262  <https://github.com/zopefoundation/zope.interface/pull/262>`_.5.4.0
        (2021-04-15)==================- Make the C implementation of the ``__providedBy__``
        descriptor stop  ignoring all errors raised when accessing the instance''s  ``__provides__``.
        Now it behaves like the Python version and only  catches ``AttributeError``.
        The previous behaviour could lead to  crashing the interpreter in cases of
        recursion and errors. See  `issue 239 <https://github.com/zopefoundation/zope.interface/issues>`_.-
        Update the ``repr()`` and ``str()`` of various objects to be shorter  and
        more informative. In many cases, the ``repr()`` is now something  that can
        be evaluated to produce an equal object. For example, what  was previously
        printed as ``<implementedBy builtins.list>`` is now  shown as ``classImplements(list,
        IMutableSequence, IIterable)``. See  `issue 236 <https://github.com/zopefoundation/zope.interface/issues/236>`_.-
        Make ``Declaration.__add__`` (as in ``implementedBy(Cls) +  ISomething``)
        try harder to preserve a consistent resolution order  when the two arguments
        share overlapping pieces of the interface  inheritance hierarchy. Previously,
        the right hand side was always  put at the end of the resolution order, which
        could easily produce  invalid orders. See `issue 193  <https://github.com/zopefoundation/zope.interface/issues/193>`_.5.3.0
        (2020-03-21)==================- No changes from 5.3.0a15.3.0a1 (2021-03-18)====================-
        Improve the repr of ``zope.interface.Provides`` to remove ambiguity  about
        what is being provided. This is especially helpful diagnosing  IRO issues.-
        Allow subclasses of ``BaseAdapterRegistry`` (including  ``AdapterRegistry``
        and ``VerifyingAdapterRegistry``) to have  control over the data structures.
        This allows persistent  implementations such as those based on ZODB to choose
        more scalable  options (e.g., BTrees instead of dicts). See `issue 224  <https://github.com/zopefoundation/zope.interface/issues/224>`_.-
        Fix a reference counting issue in ``BaseAdapterRegistry`` that could  lead
        to references to interfaces being kept around even when all  utilities/adapters/subscribers
        providing that interface have been  removed. This is mostly an issue for persistent
        implementations.  Note that this only corrects the issue moving forward, it
        does not  solve any already corrupted reference counts. See `issue 227  <https://github.com/zopefoundation/zope.interface/issues/227>`_.-
        Add the method ``BaseAdapterRegistry.rebuild()``. This can be used  to fix
        the reference counting issue mentioned above, as well as to  update the data
        structures when custom data types have changed.- Add the interface method
        ``IAdapterRegistry.subscribed()`` and  implementation ``BaseAdapterRegistry.subscribed()``
        for querying  directly registered subscribers. See `issue 230  <https://github.com/zopefoundation/zope.interface/issues/230>`_.-
        Add the maintenance method  ``Components.rebuildUtilityRegistryFromLocalCache()``.
        Most users  will not need this, but it can be useful if the ``Components.utilities``  registry
        is suspected to be out of sync with the ``Components``  object itself (this
        might happen to persistent ``Components``  implementations in the face of
        bugs).- Fix the ``Provides`` and ``ClassProvides`` descriptors to stop  allowing
        redundant interfaces (those already implemented by the  underlying class or
        meta class) to produce an inconsistent  resolution order. This is similar
        to the change in ``@implementer``  in 5.1.0, and resolves inconsistent resolution
        orders with  ``zope.proxy`` and ``zope.location``. See `issue 207  <https://github.com/zopefoundation/zope.interface/issues/207>`_.5.2.0
        (2020-11-05)==================- Add documentation section ``Persistency and
        Equality``  (`#218 <https://github.com/zopefoundation/zope.interface/issues/218>`_).-
        Create arm64 wheels.- Add support for Python 3.9.5.1.2 (2020-10-01)==================-
        Make sure to call each invariant only once when validating invariants.  Previously,
        invariants could be called multiple times because when an  invariant is defined
        in an interface, it''s found by in all interfaces  inheriting from that interface.  See
        `pull request 215  <https://github.com/zopefoundation/zope.interface/pull/215/>`_.5.1.1
        (2020-09-30)==================- Fix the method definitions of ``IAdapterRegistry.subscribe``,  ``subscriptions``
        and ``subscribers``. Previously, they all were  defined to accept a ``name``
        keyword argument, but subscribers have  no names and the implementation of
        that interface did not accept  that argument. See `issue 208  <https://github.com/zopefoundation/zope.interface/issues/208>`_.-
        Fix a potential reference leak in the C optimizations. Previously,  applications
        that dynamically created unique ``Specification``  objects (e.g., used ``@implementer``
        on dynamic classes) could  notice a growth of small objects over time leading
        to increased  garbage collection times. See `issue 216  <https://github.com/zopefoundation/zope.interface/issues/216>`_.  ..
        caution::     This leak could prevent interfaces used as the bases of     other
        interfaces from being garbage collected. Those interfaces     will now be
        collected.     One way in which this would manifest was that ``weakref.ref``     objects
        (and things built upon them, like     ``Weak[Key|Value]Dictionary``) would
        continue to have access to     the original object even if there were no other
        visible     references to Python and the original object *should* have been     collected.
        This could be especially problematic for the     ``WeakKeyDictionary`` when
        combined with dynamic or local     (created in the scope of a function) interfaces,
        since interfaces     are hashed based just on their name and module name.
        See the     linked issue for an example of a resulting ``KeyError``.     Note
        that such potential errors are not new, they are just once     again a possibility.5.1.0
        (2020-04-08)==================- Make ``@implementer(*iface)`` and ``classImplements(cls,
        *iface)``  ignore redundant interfaces. If the class already implements an  interface
        through inheritance, it is no longer redeclared  specifically for *cls*. This
        solves many instances of inconsistent  resolution orders, while still allowing
        the interface to be declared  for readability and maintenance purposes. See
        `issue 199  <https://github.com/zopefoundation/zope.interface/issues/199>`_.-
        Remove all bare ``except:`` statements. Previously, when accessing  special
        attributes such as ``__provides__``, ``__providedBy__``,  ``__class__`` and
        ``__conform__``, this package wrapped such access  in a bare ``except:`` statement,
        meaning that many errors could pass  silently; typically this would result
        in a fallback path being taken  and sometimes (like with ``providedBy()``)
        the result would be  non-sensical. This is especially true when those attributes
        are  implemented with descriptors. Now, only ``AttributeError`` is  caught.
        This makes errors more obvious.  Obviously, this means that some exceptions
        will be propagated  differently than before. In particular, ``RuntimeError``
        raised by  Acquisition in the case of circular containment will now be  propagated.
        Previously, when adapting such a broken object, a  ``TypeError`` would be
        the common result, but now it will be a more  informative ``RuntimeError``.  In
        addition, ZODB errors like ``POSKeyError`` could now be  propagated where
        previously they would ignored by this package.  See `issue 200 <https://github.com/zopefoundation/zope.interface/issues/200>`_.-
        Require that the second argument (*bases*) to ``InterfaceClass`` is  a tuple.
        This only matters when directly using ``InterfaceClass`` to  create new interfaces
        dynamically. Previously, an individual  interface was allowed, but did not
        work correctly. Now it is  consistent with ``type`` and requires a tuple.-
        Let interfaces define custom ``__adapt__`` methods. This implements  the other
        side of the :pep:`246` adaptation protocol: objects being  adapted could already
        implement ``__conform__`` if they know about  the interface, and now interfaces
        can implement ``__adapt__`` if  they know about particular objects. There
        is no performance penalty  for interfaces that do not supply custom ``__adapt__``
        methods.  This includes the ability to add new methods, or override existing  interface
        methods using the new ``@interfacemethod`` decorator.  See `issue 3 <https://github.com/zopefoundation/zope.interface/issues/3>`_.-
        Make the internal singleton object returned by APIs like  ``implementedBy``
        and ``directlyProvidedBy`` for objects that  implement or provide no interfaces
        more immutable. Previously an  internal cache could be mutated. See `issue
        204  <https://github.com/zopefoundation/zope.interface/issues/204>`_.5.0.2
        (2020-03-30)==================- Ensure that objects that implement no interfaces
        (such as direct  subclasses of ``object``) still include ``Interface`` itself
        in  their ``__iro___`` and ``__sro___``. This fixes adapter registry  lookups
        for such objects when the adapter is registered for  ``Interface``. See `issue
        197  <https://github.com/zopefoundation/zope.interface/issues/197>`_.5.0.1
        (2020-03-21)==================- Ensure the resolution order for ``InterfaceClass``
        is consistent.  See `issue 192 <https://github.com/zopefoundation/zope.interface/issues/192>`_.-
        Ensure the resolution order for ``collections.OrderedDict`` is  consistent
        on CPython 2. (It was already consistent on Python 3 and PyPy).- Fix the handling
        of the ``ZOPE_INTERFACE_STRICT_IRO`` environment  variable. Previously, ``ZOPE_INTERFACE_STRICT_RO``
        was read, in  contrast with the documentation. See `issue 194  <https://github.com/zopefoundation/zope.interface/issues/194>`_.5.0.0
        (2020-03-19)==================- Make an internal singleton object returned
        by APIs like  ``implementedBy`` and ``directlyProvidedBy`` immutable. Previously,  it
        was fully mutable and allowed changing its ``__bases___``. That  could potentially
        lead to wrong results in pathological corner  cases. See `issue 158  <https://github.com/zopefoundation/zope.interface/issues/158>`_.-
        Support the ``PURE_PYTHON`` environment variable at runtime instead  of just
        at wheel build time. A value of 0 forces the C extensions to  be used (even
        on PyPy) failing if they aren''t present. Any other  value forces the Python
        implementation to be used, ignoring the C  extensions. See `PR 151 <https://github.com/zopefoundation/zope.interface/pull/151>`_.-
        Cache the result of ``__hash__`` method in ``InterfaceClass`` as a  speed
        optimization. The method is called very often (i.e several  hundred thousand
        times during Plone 5.2 startup). Because the hash value never  changes it
        can be cached. This improves test performance from 0.614s  down to 0.575s
        (1.07x faster). In a real world Plone case a reindex  index came down from
        402s to 320s (1.26x faster). See `PR 156  <https://github.com/zopefoundation/zope.interface/pull/156>`_.-
        Change the C classes ``SpecificationBase`` and its subclass  ``ClassProvidesBase``
        to store implementation attributes in their structures  instead of their instance
        dictionaries. This eliminates the use of  an undocumented private C API function,
        and helps make some  instances require less memory. See `PR 154 <https://github.com/zopefoundation/zope.interface/pull/154>`_.-
        Reduce memory usage in other ways based on observations of usage  patterns
        in Zope (3) and Plone code bases.  - Specifications with no dependents are
        common (more than 50%) so    avoid allocating a ``WeakKeyDictionary`` unless
        we need it.  - Likewise, tagged values are relatively rare, so don''t allocate
        a    dictionary to hold them until they are used.  - Use ``__slots___`` or
        the C equivalent ``tp_members`` in more    common places. Note that this removes
        the ability to set arbitrary    instance variables on certain objects.    See
        `PR 155 <https://github.com/zopefoundation/zope.interface/pull/155>`_.  The
        changes in this release resulted in a 7% memory reduction after  loading about
        6,000 modules that define about 2,200 interfaces.  .. caution::     Details
        of many private attributes have changed, and external use     of those private
        attributes may break. In particular, the     lifetime and default value of
        ``_v_attrs`` has changed.- Remove support for hashing uninitialized interfaces.
        This could only  be done by subclassing ``InterfaceClass``. This has generated
        a  warning since it was first added in 2011 (3.6.5). Please call the  ``InterfaceClass``
        constructor or otherwise set the appropriate  fields in your subclass before
        attempting to hash or sort it. See  `issue 157 <https://github.com/zopefoundation/zope.interface/issues/157>`_.-
        Remove unneeded override of the ``__hash__`` method from  ``zope.interface.declarations.Implements``.
        Watching a reindex index  process in ZCatalog with on a Py-Spy after 10k samples
        the time for  ``.adapter._lookup`` was reduced from 27.5s to 18.8s (~1.5x
        faster).  Overall reindex index time shrunk from 369s to 293s (1.26x faster).  See
        `PR 161  <https://github.com/zopefoundation/zope.interface/pull/161>`_.- Make
        the Python implementation closer to the C implementation by  ignoring all
        exceptions, not just ``AttributeError``, during (parts  of) interface adaptation.
        See `issue 163  <https://github.com/zopefoundation/zope.interface/issues/163>`_.-
        Micro-optimization in ``.adapter._lookup`` , ``.adapter._lookupAll``  and
        ``.adapter._subscriptions``: By loading ``components.get`` into  a local variable
        before entering the loop a bytcode "LOAD_FAST 0  (components)" in the loop
        can be eliminated. In Plone, while running  all tests, average speedup of
        the "owntime" of ``_lookup`` is ~5x.  See `PR 167  <https://github.com/zopefoundation/zope.interface/pull/167>`_.-
        Add ``__all__`` declarations to all modules. This helps tools that  do auto-completion
        and documentation and results in less cluttered  results. Wildcard ("*") are
        not recommended and may be affected. See  `issue 153  <https://github.com/zopefoundation/zope.interface/issues/153>`_.-
        Fix ``verifyClass`` and ``verifyObject`` for builtin types like  ``dict``
        that have methods taking an optional, unnamed argument with  no default value
        like ``dict.pop``. On PyPy3, the verification is  strict, but on PyPy2 (as
        on all versions of CPython) those methods  cannot be verified and are ignored.
        See `issue 118  <https://github.com/zopefoundation/zope.interface/issues/118>`_.-
        Update the common interfaces ``IEnumerableMapping``,  ``IExtendedReadMapping``,
        ``IExtendedWriteMapping``,  ``IReadSequence`` and ``IUniqueMemberWriteSequence``
        to no longer  require methods that were removed from Python 3 on Python 3,
        such as  ``__setslice___``. Now, ``dict``, ``list`` and ``tuple`` properly  verify
        as ``IFullMapping``, ``ISequence`` and ``IReadSequence,``  respectively on
        all versions of Python.- Add human-readable ``__str___`` and ``__repr___``
        to ``Attribute``  and ``Method``. These contain the name of the defining interface  and
        the attribute. For methods, it also includes the signature.- Change the error
        strings raised by ``verifyObject`` and  ``verifyClass``. They now include
        more human-readable information  and exclude extraneous lines and spaces.
        See `issue 170  <https://github.com/zopefoundation/zope.interface/issues/170>`_.  ..
        caution:: This will break consumers (such as doctests) that               depended
        on the exact error messages.- Make ``verifyObject`` and ``verifyClass`` report
        all errors, if the  candidate object has multiple detectable violations. Previously
        they  reported only the first error. See `issue  <https://github.com/zopefoundation/zope.interface/issues/171>`_.  Like
        the above, this will break consumers depending on the exact  output of error
        messages if more than one error is present.- Add ``zope.interface.common.collections``,  ``zope.interface.common.numbers``,
        and ``zope.interface.common.io``.  These modules define interfaces based on
        the ABCs defined in the  standard library ``collections.abc``, ``numbers``
        and ``io``  modules, respectively. Importing these modules will make the  standard
        library concrete classes that are registered with those  ABCs declare the
        appropriate interface. See `issue 138  <https://github.com/zopefoundation/zope.interface/issues/138>`_.-
        Add ``zope.interface.common.builtins``. This module defines  interfaces of
        common builtin types, such as ``ITextString`` and  ``IByteString``, ``IDict``,
        etc. These interfaces extend the  appropriate interfaces from ``collections``
        and ``numbers``, and the  standard library classes implement them after importing
        this module.  This is intended as a replacement for third-party packages like  `dolmen.builtins
        <https://pypi.org/project/dolmen.builtins/>`_.  See `issue 138 <https://github.com/zopefoundation/zope.interface/issues/138>`_.-
        Make ``providedBy()`` and ``implementedBy()`` respect ``super``  objects.
        For instance, if class ``Derived`` implements ``IDerived``  and extends ``Base``
        which in turn implements ``IBase``, then  ``providedBy(super(Derived, derived))``
        will return ``[IBase]``.  Previously it would have returned ``[IDerived]``
        (in general, it  would previously have returned whatever would have been returned  without
        ``super``).  Along with this change, adapter registries will unpack ``super``  objects
        into their ``__self___`` before passing it to the factory.  Together, this
        means that ``component.getAdapter(super(Derived,  self), ITarget)`` is now
        meaningful.  See `issue 11 <https://github.com/zopefoundation/zope.interface/issues/11>`_.-
        Fix a potential interpreter crash in the low-level adapter  registry lookup
        functions. See issue 11.- Adopt Python''s standard `C3 resolution order  <https://www.python.org/download/releases/2.3/mro/>`_
        to compute the  ``__iro__`` and ``__sro__`` of interfaces, with tweaks to
        support  additional cases that are common in interfaces but disallowed for  Python
        classes. Previously, an ad-hoc ordering that made no  particular guarantees
        was used.  This has many beneficial properties, including the fact that base  interface
        and base classes tend to appear near the end of the  resolution order instead
        of the beginning. The resolution order in  general should be more predictable
        and consistent.  .. caution::     In some cases, especially with complex interface
        inheritance     trees or when manually providing or implementing interfaces,
        the     resulting IRO may be quite different. This may affect adapter     lookup.  The
        C3 order enforces some constraints in order to be able to  guarantee a sensible
        ordering. Older versions of zope.interface did  not impose similar constraints,
        so it was possible to create  interfaces and declarations that are inconsistent
        with the C3  constraints. In that event, zope.interface will still produce
        a  resolution order equal to the old order, but it won''t be guaranteed  to
        be fully C3 compliant. In the future, strict enforcement of C3  order may
        be the default.  A set of environment variables and module constants allows  controlling
        several aspects of this new behaviour. It is possible to  request warnings
        about inconsistent resolution orders encountered,  and even to forbid them.
        Differences between the C3 resolution order  and the previous order can be
        logged, and, in extreme cases, the  previous order can still be used (this
        ability will be removed in  the future). For details, see the documentation
        for  ``zope.interface.ro``.- Make inherited tagged values in interfaces respect
        the resolution  order (``__iro__``), as method and attribute lookup does.
        Previously  tagged values could give inconsistent results. See `issue 190  <https://github.com/zopefoundation/zope.interface/issues/190>`_.-
        Add ``getDirectTaggedValue`` (and related methods) to interfaces to  allow
        accessing tagged values irrespective of inheritance. See  `issue 190  <https://github.com/zopefoundation/zope.interface/issues/190>`_.-
        Ensure that ``Interface`` is always the last item in the ``__iro__``  and
        ``__sro__``. This is usually the case, but if classes that do  not implement
        any interfaces are part of a class inheritance  hierarchy, ``Interface`` could
        be assigned too high a priority.  See `issue 8 <https://github.com/zopefoundation/zope.interface/issues/8>`_.-
        Implement sorting, equality, and hashing in C for ``Interface``  objects.
        In micro benchmarks, this makes those operations 40% to 80%  faster. This
        translates to a 20% speed up in querying adapters.  Note that this changes
        certain implementation details. In  particular, ``InterfaceClass`` now has
        a non-default metaclass, and  it is enforced that ``__module__`` in instances
        of  ``InterfaceClass`` is read-only.  See `PR 183 <https://github.com/zopefoundation/zope.interface/pull/183>`_.4.7.2
        (2020-03-10)==================- Remove deprecated use of setuptools features.  See
        `issue 30  <https://github.com/zopefoundation/zope.interface/issues/30>`_.4.7.1
        (2019-11-11)==================- Use Python 3 syntax in the documentation.  See
        `issue 119  <https://github.com/zopefoundation/zope.interface/issues/119>`_.4.7.0
        (2019-11-11)==================- Drop support for Python 3.4.- Change ``queryTaggedValue``,
        ``getTaggedValue``,  ``getTaggedValueTags`` in interfaces. They now include
        inherited  values by following ``__bases__``. See `PR 144  <https://github.com/zopefoundation/zope.interface/pull/144>`_.  ..
        caution:: This may be a breaking change.- Add support for Python 3.8.4.6.0
        (2018-10-23)==================- Add support for Python 3.7- Fix ``verifyObject``
        for class objects with staticmethods on  Python 3. See `issue 126  <https://github.com/zopefoundation/zope.interface/issues/126>`_.4.5.0
        (2018-04-19)==================- Drop support for 3.3, avoid accidental dependence
        breakage via setup.py.  See `PR 110 <https://github.com/zopefoundation/zope.interface/pull/110>`_.-
        Allow registering and unregistering instance methods as listeners.  See `issue
        12 <https://github.com/zopefoundation/zope.interface/issues/12>`_  and `PR
        102 <https://github.com/zopefoundation/zope.interface/pull/102>`_.- Synchronize
        and simplify zope/__init__.py. See `issue 114  <https://github.com/zopefoundation/zope.interface/issues/114>`_4.4.3
        (2017-09-22)==================- Avoid exceptions when the ``__annotations__``
        attribute is added to  interface definitions with Python 3.x type hints. See
        `issue 98  <https://github.com/zopefoundation/zope.interface/issues/98>`_.-
        Fix the possibility of a rare crash in the C extension when  deallocating
        items. See `issue 100  <https://github.com/zopefoundation/zope.interface/issues/100>`_.4.4.2
        (2017-06-14)==================- Fix a regression storing  ``zope.component.persistentregistry.PersistentRegistry``
        instances.  See `issue 85 <https://github.com/zopefoundation/zope.interface/issues/85>`_.-
        Fix a regression that could lead to the utility registration cache  of ``Components``
        getting out of sync. See `issue 93  <https://github.com/zopefoundation/zope.interface/issues/93>`_.4.4.1
        (2017-05-13)==================- Simplify the caching of utility-registration
        data. In addition to  simplification, avoids spurious test failures when checking
        for  leaks in tests with persistent registries. See `pull 84  <https://github.com/zopefoundation/zope.interface/pull/84>`_.-
        Raise ``ValueError`` when non-text names are passed to adapter registry  methods:  prevents
        corruption of lookup caches.4.4.0 (2017-04-21)==================- Avoid a
        warning from the C compiler.  (https://github.com/zopefoundation/zope.interface/issues/71)-
        Add support for Python 3.6.4.3.3 (2016-12-13)==================- Correct typos
        and ReST formatting errors in documentation.- Add API documentation for the
        adapter registry.- Ensure that the ``LICENSE.txt`` file is included in built
        wheels.- Fix C optimizations broken on Py3k.  See the Python bug at:  http://bugs.python.org/issue15657  (https://github.com/zopefoundation/zope.interface/issues/60)4.3.2
        (2016-09-05)==================- Fix equality testing of ``implementedBy``
        objects and proxies.  (https://github.com/zopefoundation/zope.interface/issues/55)4.3.1
        (2016-08-31)==================- Support Components subclasses that are not
        hashable.  (https://github.com/zopefoundation/zope.interface/issues/53)4.3.0
        (2016-08-31)==================- Add the ability to sort the objects returned
        by ``implementedBy``.  This is compatible with the way interface classes sort
        so they can  be used together in ordered containers like BTrees.  (https://github.com/zopefoundation/zope.interface/issues/42)-
        Make ``setuptools`` a hard dependency of ``setup.py``.  (https://github.com/zopefoundation/zope.interface/issues/13)-
        Change a linear algorithm (O(n)) in ``Components.registerUtility`` and  ``Components.unregisterUtility``
        into a dictionary lookup (O(1)) for  hashable components. This substantially
        improves the time taken to  manipulate utilities in large registries at the
        cost of some  additional memory usage. (https://github.com/zopefoundation/zope.interface/issues/46)4.2.0
        (2016-06-10)==================- Add support for Python 3.5- Drop support for
        Python 2.6 and 3.2.4.1.3 (2015-10-05)==================- Fix installation
        without a C compiler on Python 3.5  (https://github.com/zopefoundation/zope.interface/issues/24).4.1.2
        (2014-12-27)==================- Add support for PyPy3.- Remove unittest assertions
        deprecated in Python3.x.- Add ``zope.interface.document.asReStructuredText``,
        which formats the  generated text for an interface using ReST double-backtick
        markers.4.1.1 (2014-03-19)==================- Add support for Python 3.4.4.1.0
        (2014-02-05)==================- Update ``boostrap.py`` to version 2.2.- Add
        ``@named(name)`` declaration, that specifies the component name, so it  does
        not have to be passed in during registration.4.0.5 (2013-02-28)==================-
        Fix a bug where a decorated method caused false positive failures on  ``verifyClass()``.4.0.4
        (2013-02-21)==================- Fix a bug that was revealed by porting zope.traversing.
        During a loop, the  loop body modified a weakref dict causing a ``RuntimeError``
        error.4.0.3 (2012-12-31)==================- Fleshed out PyPI Trove classifiers.4.0.2
        (2012-11-21)==================- Add support for Python 3.3.- Restored ability
        to install the package in the absence of ``setuptools``.- LP #1055223:  Fix
        test which depended on dictionary order and failed randomly  in Python 3.3.4.0.1
        (2012-05-22)==================- Drop explicit ``DeprecationWarnings`` for
        "class advice" APIS (these  APIs are still deprecated under Python 2.x, and
        still raise an exception  under Python 3.x, but no longer cause a warning
        to be emitted under  Python 2.x).4.0.0 (2012-05-16)==================- Automated
        build of Sphinx HTML docs and running doctest snippets via tox.- Deprecate
        the "class advice" APIs from ``zope.interface.declarations``:  ``implements``,
        ``implementsOnly``, and ``classProvides``.  In their place,  prefer the equivalent
        class decorators: ``@implementer``,  ``@implementer_only``, and ``@provider``.  Code
        which uses the deprecated  APIs will not work as expected under Py3k.- Remove
        use of ''2to3'' and associated fixers when installing under Py3k.  The code
        is now in a "compatible subset" which supports Python 2.6, 2.7,  and 3.2,
        including PyPy 1.8 (the version compatible with the 2.7 language  spec).-
        Drop explicit support for Python 2.4 / 2.5 / 3.1.- Add support for PyPy.-
        Add support for continuous integration using ``tox`` and ``jenkins``.- Add
        ''setup.py dev'' alias (runs ``setup.py develop`` plus installs  ``nose``
        and ``coverage``).- Add ''setup.py docs'' alias (installs ``Sphinx`` and dependencies).-
        Replace all unittest coverage previously accomplished via doctests with  unittests.  The
        doctests have been moved into a ``docs`` section, managed  as a Sphinx collection.-
        LP #910987:  Ensure that the semantics of the ``lookup`` method of  ``zope.interface.adapter.LookupBase``
        are the same in both the C and  Python implementations.- LP #900906:  Avoid
        exceptions due to tne new ``__qualname__`` attribute  added in Python 3.3
        (see PEP 3155 for rationale).  Thanks to Antoine  Pitrou for the patch.3.8.0
        (2011-09-22)==================- New module ``zope.interface.registry``.  This
        is code moved from  ``zope.component.registry`` which implements a basic nonperistent
        component  registry as ``zope.interface.registry.Components``.  This class
        was moved  from ``zope.component`` to make porting systems (such as Pyramid)
        that rely  only on a basic component registry to Python 3 possible without
        needing to  port the entirety of the ``zope.component`` package.  Backwards  compatibility
        import shims have been left behind in ``zope.component``, so  this change
        will not break any existing code.- New ``tests_require`` dependency: ``zope.event``
        to test events sent by  Components implementation.  The ``zope.interface``
        package does not have a  hard dependency on ``zope.event``, but if ``zope.event``
        is importable, it  will send component registration events when methods of
        an instance of  ``zope.interface.registry.Components`` are called.- New interfaces
        added to support ``zope.interface.registry.Components``  addition: ``ComponentLookupError``,
        ``Invalid``, ``IObjectEvent``,  ``ObjectEvent``, ``IComponentLookup``, ``IRegistration``,  ``IUtilityRegistration``,
        ``IAdapterRegistration``,  ``ISubscriptionAdapterRegistration``, ``IHandlerRegistration``,  ``IRegistrationEvent``,
        ``RegistrationEvent``, ``IRegistered``,  ``Registered``, ``IUnregistered``,
        ``Unregistered``,  ``IComponentRegistry``, and ``IComponents``.- No longer
        Python 2.4 compatible (tested under 2.5, 2.6, 2.7, and 3.2).3.7.0 (2011-08-13)==================-
        Move changes from 3.6.2 - 3.6.5 to a new 3.7.x release line.3.6.7 (2011-08-20)==================-
        Fix sporadic failures on x86-64 platforms in tests of rich comparisons  of
        interfaces.3.6.6 (2011-08-13)==================- LP #570942:  Now correctly
        compare interfaces  from different modules but  with the same names.  N.B.:
        This is a less intrusive / destabilizing fix than the one applied in  3.6.3:  we
        only fix the underlying cmp-alike function, rather than adding  the other
        "rich comparison" functions.- Revert to software as released with 3.6.1 for
        "stable" 3.6 release branch.3.6.5 (2011-08-11)==================- LP #811792:  work
        around buggy behavior in some subclasses of  ``zope.interface.interface.InterfaceClass``,
        which invoke ``__hash__``  before initializing ``__module__`` and ``__name__``.  The
        workaround  returns a fixed constant hash in such cases, and issues a ``UserWarning``.-
        LP #804832:  Under PyPy, ``zope.interface`` should not build its C  extension.  Also,
        prevent attempting to build it under Jython.- Add a tox.ini for easier xplatform
        testing.- Fix testing deprecation warnings issued when tested under Py3K.3.6.4
        (2011-07-04)==================- LP 804951:  InterfaceClass instances were
        unhashable under Python 3.x.3.6.3 (2011-05-26)==================- LP #570942:  Now
        correctly compare interfaces  from different modules but  with the same names.3.6.2
        (2011-05-17)==================- Moved detailed documentation out-of-line from
        PyPI page, linking instead to  http://docs.zope.org/zope.interface .- Fixes
        for small issues when running tests under Python 3.2 using  ``zope.testrunner``.-
        LP # 675064:  Specify return value type for C optimizations module init  under
        Python 3:  undeclared value caused warnings, and segfaults on some  64 bit
        architectures.- setup.py now raises RuntimeError if you don''t have Distutils
        installed when  running under Python 3.3.6.1 (2010-05-03)==================-
        A non-ASCII character in the changelog made 3.6.0 uninstallable on  Python
        3 systems with another default encoding than UTF-8.- Fix compiler warnings
        under GCC 4.3.3.3.6.0 (2010-04-29)==================- LP #185974:  Clear the
        cache used by ``Specificaton.get`` inside  ``Specification.changed``.  Thanks
        to Jacob Holm for the patch.- Add support for Python 3.1. Contributors:    Lennart
        Regebro    Martin v Loewis    Thomas Lotze    Wolfgang Schnerring  The 3.1
        support is completely backwards compatible. However, the implements  syntax
        used under Python 2.X does not work under 3.X, since it depends on  how metaclasses
        are implemented and this has changed. Instead it now supports  a decorator
        syntax (also under Python 2.X)::    class Foo:        implements(IFoo)        ...  can
        now also be written::    @implementer(IFoo):    class Foo:        ...  There
        are 2to3 fixers available to do this change automatically in the  zope.fixers
        package.- Python 2.3 is no longer supported.3.5.4 (2009-12-23)==================-
        Use the standard Python doctest module instead of zope.testing.doctest, which  has
        been deprecated.3.5.3 (2009-12-08)==================- Fix an edge case: make
        providedBy() work when a class has ''__provides__'' in  its __slots__ (see
        http://thread.gmane.org/gmane.comp.web.zope.devel/22490)3.5.2 (2009-07-01)==================-
        BaseAdapterRegistry.unregister, unsubscribe: Remove empty portions of  the
        data structures when something is removed.  This avoids leaving  references
        to global objects (interfaces) that may be slated for  removal from the calling
        application.3.5.1 (2009-03-18)==================- verifyObject: use getattr
        instead of hasattr to test for object attributes  in order to let exceptions
        other than AttributeError raised by properties  propagate to the caller- Add
        Sphinx-based documentation building to the package buildout  configuration.
        Use the ``bin/docs`` command after buildout.- Improve package description
        a bit. Unify changelog entries formatting.- Change package''s mailing list
        address to zope-dev at zope.org as  zope3-dev at zope.org is now retired.3.5.0
        (2008-10-26)==================- Fix declaration of _zope_interface_coptimizations,
        it''s not a top level  package.- Add a DocTestSuite for odd.py module, so
        their tests are run.- Allow to bootstrap on Jython.- Fix https://bugs.launchpad.net/zope3/3.3/+bug/98388:
        ISpecification  was missing a declaration for __iro__.- Add optional code
        optimizations support, which allows the building  of C code optimizations
        to fail (Jython).- Replace `_flatten` with a non-recursive implementation,
        effectively making  it 3x faster.3.4.1 (2007-10-02)==================- Fix
        a setup bug that prevented installation from source on systems  without setuptools.3.4.0
        (2007-07-19)==================- Final release for 3.4.0.3.4.0b3 (2007-05-22)====================-
        When checking whether an object is already registered, use identity  comparison,
        to allow adding registering with picky custom comparison methods.3.3.0.1 (2007-01-03)====================-
        Made a reference to OverflowWarning, which disappeared in Python  2.5, conditional.3.3.0
        (2007/01/03)==================New Features------------- Refactor the adapter-lookup
        algorithim to make it much simpler and faster.  Also, implement more of the
        adapter-lookup logic in C, making  debugging of application code easier, since
        there is less  infrastructre code to step through.- Treat objects without
        interface declarations as if they  declared that they provide ``zope.interface.Interface``.-
        Add a number of richer new adapter-registration interfaces  that provide greater
        control and introspection.- Add a new interface decorator to zope.interface
        that allows the  setting of tagged values on an interface at definition time
        (see  zope.interface.taggedValue).Bug Fixes---------- A bug in multi-adapter
        lookup sometimes caused incorrect adapters to  be returned.3.2.0.2 (2006-04-15)====================-
        Fix packaging bug:  ''package_dir'' must be a *relative* path.3.2.0.1 (2006-04-14)====================-
        Packaging change:  suppress inclusion of ''setup.cfg'' in ''sdist'' builds.3.2.0
        (2006-01-05)==================- Corresponds to the version of the zope.interface
        package shipped as part of  the Zope 3.2.0 release.3.1.0 (2005-10-03)==================-
        Corresponds to the version of the zope.interface package shipped as part of  the
        Zope 3.1.0 release.- Made attribute resolution order consistent with component
        lookup order,  i.e. new-style class MRO semantics.- Deprecate ''isImplementedBy''
        and ''isImplementedByInstancesOf'' APIs in  favor of ''implementedBy'' and
        ''providedBy''.3.0.1 (2005-07-27)==================- Corresponds to the version
        of the zope.interface package shipped as part of  the Zope X3.0.1 release.-
        Fix a bug reported by James Knight, which caused adapter registries  to fail
        occasionally to reflect declaration changes.3.0.0 (2004-11-07)==================-
        Corresponds to the version of the zope.interface package shipped as part of  the
        Zope X3.0.0 release.'
      Package: zope.interface
      Source: pip
      Version: '6.2'
      Hash: ''
      licenses:
      - ZPL-2.1
      Title: zope.interface
      DownloadURL: https://files.pythonhosted.org/packages/cd/37/1b003190ba7148226a8212d98ff8074e212fef30c82e616bdb818ae1f838/zope.interface-6.2.tar.gz
  bazaar:
    register: 'no'
    prim: 17/CAX1058540
    community_link: https://github.com/zopefoundation/zope.interface
    community_name: https://github.com/zopefoundation/zope.interface
    community_url: https://github.com/zopefoundation/zope.interface
    component_comment: ''
    component_highlevel_description: Interfaces for Python
    component_name: zope.interface
    component_platform: linux
    component_programing_language: Python
    component_version: '6.2'
    licenses:
    - FAL1159237/21 (Zope Public License 2.1 (ZPL-2.1))
    src_download_link: https://github.com/zopefoundation/zope.interface/archive/6.2.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1083890&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: zope.interface
    target_sw: linux
    vendor: pip
    version: '6.2'
    web_url: https://github.com/zopefoundation/zope.interface
  licenses:
  - ZPL-2.1
  name: zope.interface
  primary:
  - mlserver+1.5.0
  subcomponent: false
  type: FOSS
  versions:
  - '6.2'
  mimer:
    linking: Static
    product_number: CAX1058540
    product_version_label: '6.2'
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
