#
# COPYRIGHT Ericsson 2024
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: '3.0'
dependencies:
- ID: lightgbm+4.3.0
  additional_info:
    fossa-attribution:
      Description: 'LightGBM Python-package=======================|License| |Python
        Versions| |PyPI Version| |Downloads| |API Docs|Installation------------Preparation''''''''''''''''''''''32-bit
        Python is not supported. Please install 64-bit version. If you have a strong
        need to install with 32-bit Python, refer to `Build 32-bit Version with 32-bit
        Python section <#build-32-bit-version-with-32-bit-python>`__.`setuptools <https://pypi.org/project/setuptools>`_
        is needed.Install from `PyPI <https://pypi.org/project/lightgbm>`_''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..
        code:: sh    pip install lightgbmCompiled library that is included in the
        wheel file supports both **GPU** and **CPU** versions out of the box. This
        feature is experimental and available only for **Windows** and **Linux** currently.
        To use **GPU** version you only need to install OpenCL Runtime libraries.
        For NVIDIA and AMD GPU they are included in the ordinary drivers for your
        graphics card, so no action is required. If you would like your AMD or Intel
        CPU to act like a GPU (for testing and debugging) you can install `AMD APP
        SDK <https://github.com/microsoft/LightGBM/releases/download/v2.0.12/AMD-APP-SDKInstaller-v3.0.130.135-GA-windows-F-x64.exe>`_
        on **Windows** and `PoCL <http://portablecl.org>`_ on **Linux**. Many modern
        Linux distributions provide packages for PoCL, look for ``pocl-opencl-icd``
        on Debian-based distributions and ``pocl`` on RedHat-based distributions.For
        **Windows** users, `VC runtime <https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads>`_
        is needed if **Visual Studio** (2015 or newer) is not installed.For **Linux**
        users, **glibc** >= 2.14 is required for LightGBM ``<=3.3.3`` and **glibc**
        >= 2.28 is required for newer versions. Also, in some rare cases, when you
        hit ``OSError: libgomp.so.1: cannot open shared object file: No such file
        or directory`` error during importing LightGBM, you need to install OpenMP
        runtime library separately (use your package manager and search for ``lib[g|i]omp``
        for doing this).For **macOS** (we provide wheels for 3 newest macOS versions)
        users:- Starting from version 2.2.1, the library file in distribution wheels
        is built by the **Apple Clang** (Xcode_8.3.3 for versions 2.2.1 - 2.3.1, Xcode_9.4.1
        for versions 2.3.2 - 3.3.2 and Xcode_11.7 from version 4.0.0) compiler. This
        means that you don''t need to install the **gcc** compiler anymore. Instead
        of that you need to install the **OpenMP** library, which is required for
        running LightGBM on the system with the **Apple Clang** compiler. You can
        install the **OpenMP** library by the following command: ``brew install libomp``.-
        For version smaller than 2.2.1 and not smaller than 2.1.2, **gcc-8** with
        **OpenMP** support must be installed first. Refer to `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#gcc>`__
        for installation of **gcc-8** with **OpenMP** support.- For version smaller
        than 2.1.2, **gcc-7** with **OpenMP** is required.Use LightGBM with Dask**********************..
        warning::    Dask-package is only tested on Linux.To install all dependencies
        needed to use ``lightgbm.dask``, append ``[dask]``... code:: sh    pip install
        ''lightgbm[dask]''Use LightGBM with pandas************************To install
        all dependencies needed to use ``pandas`` in LightGBM, append ``[pandas]``...
        code:: sh    pip install ''lightgbm[pandas]''Use LightGBM with scikit-learn******************************To
        install all dependencies needed to use ``scikit-learn`` in LightGBM, append
        ``[scikit-learn]``... code:: sh    pip install ''lightgbm[scikit-learn]''Build
        from Sources******************.. code:: sh    pip install --no-binary lightgbm
        lightgbmFor **Linux** and **macOS** users, installation from sources requires
        installed `CMake`_.For **Linux** users, **glibc** >= 2.28 is required. Also,
        in some rare cases you may need to install OpenMP runtime library separately
        (use your package manager and search for ``lib[g|i]omp`` for doing this).For
        **macOS** users, you can perform installation either with **Apple Clang**
        or **gcc**.- In case you prefer **Apple Clang**, you should install **OpenMP**
        (details for installation can be found in `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#apple-clang>`__)
        first and **CMake** version 3.16 or higher is required.- In case you prefer
        **gcc**, you need to install it (details for installation can be found in
        `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#gcc>`__)
        and specify compilers by running ``export CXX=g++-7 CC=gcc-7`` (replace "7"
        with version of **gcc** installed on your machine) first.For **Windows** users,
        **Visual Studio** (or `VS Build Tools <https://visualstudio.microsoft.com/downloads/>`_)
        is needed. If you get any errors during installation, you may need to install
        `CMake`_ (version 3.8 or higher).Build Threadless Version~~~~~~~~~~~~~~~~~~~~~~~~..
        code:: sh    pip install lightgbm --config-settings=cmake.define.USE_OPENMP=OFFAll
        requirements, except the **OpenMP** requirement, from `Build from Sources
        section <#build-from-sources>`__ apply for this installation option as well.It
        is **strongly not recommended** to use this version of LightGBM!Build MPI
        Version~~~~~~~~~~~~~~~~~.. code:: sh    pip install lightgbm --config-settings=cmake.define.USE_MPI=ONAll
        requirements from `Build from Sources section <#build-from-sources>`__ apply
        for this installation option as well.For **Windows** users, compilation with
        **MinGW-w64** is not supported and `CMake`_ (version 3.8 or higher) is strongly
        required.**MPI** libraries are needed: details for installation can be found
        in `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-mpi-version>`__.Build
        GPU Version~~~~~~~~~~~~~~~~~.. code:: sh    pip install lightgbm --config-settings=cmake.define.USE_GPU=ONAll
        requirements from `Build from Sources section <#build-from-sources>`__ apply
        for this installation option as well.For **Windows** users, `CMake`_ (version
        3.8 or higher) is strongly required.**Boost** and **OpenCL** are needed: details
        for installation can be found in `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-gpu-version>`__.
        Almost always you also need to pass ``OpenCL_INCLUDE_DIR``, ``OpenCL_LIBRARY``
        options for **Linux** and ``BOOST_ROOT``, ``BOOST_LIBRARYDIR`` options for
        **Windows** to **CMake** via ``pip`` options, like.. code:: sh    pip install
        lightgbm \      --config-settings=cmake.define.USE_GPU=ON \      --config-settings=cmake.define.OpenCL_INCLUDE_DIR="/usr/local/cuda/include/"
        \      --config-settings=cmake.define.OpenCL_LIBRARY="/usr/local/cuda/lib64/libOpenCL.so"All
        available options that can be passed via ``cmake.define.{option}``.- Boost_ROOT-
        Boost_DIR- Boost_INCLUDE_DIR- BOOST_LIBRARYDIR- OpenCL_INCLUDE_DIR- OpenCL_LIBRARYFor
        more details see `FindBoost <https://cmake.org/cmake/help/latest/module/FindBoost.html>`__
        and `FindOpenCL <https://cmake.org/cmake/help/latest/module/FindOpenCL.html>`__.Build
        CUDA Version~~~~~~~~~~~~~~~~~~.. code:: sh    pip install lightgbm --config-settings=cmake.define.USE_CUDA=ONAll
        requirements from `Build from Sources section <#build-from-sources>`__ apply
        for this installation option as well, and `CMake`_ (version 3.16 or higher)
        is strongly required.**CUDA** library (version 10.0 or higher) is needed:
        details for installation can be found in `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-cuda-version-experimental>`__.To
        use the CUDA version within Python, pass ``{"device": "cuda"}`` respectively
        in parameters.Build HDFS Version~~~~~~~~~~~~~~~~~~.. code:: sh    pip install
        lightgbm --config-settings=cmake.define.USE_HDFS=ONAll requirements from `Build
        from Sources section <#build-from-sources>`__ apply for this installation
        option as well.**HDFS** library is needed: details for installation can be
        found in `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-hdfs-version>`__.Note
        that the installation process of HDFS version was tested only on **Linux**.Build
        with MinGW-w64 on Windows~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: sh    #
        in sh.exe, git bash, or other Unix-like shell    export CMAKE_GENERATOR=''MinGW
        Makefiles''    pip install lightgbm --config-settings=cmake.define.CMAKE_SH=CMAKE_SH-NOTFOUND`CMake`_
        and `MinGW-w64 <https://www.mingw-w64.org/>`_ should be installed first.It
        is recommended to use **Visual Studio** for its better multithreading efficiency
        in **Windows** for many-core systems(see `Question 4 <https://github.com/microsoft/LightGBM/blob/master/docs/FAQ.rst#4-i-am-using-windows-should-i-use-visual-studio-or-mingw-for-compiling-lightgbm>`__
        and `Question 8 <https://github.com/microsoft/LightGBM/blob/master/docs/FAQ.rst#8-cpu-usage-is-low-like-10-in-windows-when-using-lightgbm-on-very-large-datasets-with-many-core-systems>`__).Build
        32-bit Version with 32-bit Python~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~..
        code:: sh    # in sh.exe, git bash, or other Unix-like shell    export CMAKE_GENERATOR=''Visual
        Studio 17 2022''    export CMAKE_GENERATOR_PLATFORM=''Win32''    pip install
        --no-binary lightgbm lightgbmBy default, installation in environment with
        32-bit Python is prohibited. However, you can remove this prohibition on your
        own risk by passing ``bit32`` option.It is **strongly not recommended** to
        use this version of LightGBM!Build with Time Costs Output~~~~~~~~~~~~~~~~~~~~~~~~~~~~..
        code:: sh    pip install lightgbm --config-settings=cmake.define.USE_TIMETAG=ONUse
        this option to make LightGBM output time costs for different internal routines,
        to investigate and benchmark its performance.Install from `conda-forge channel
        <https://anaconda.org/conda-forge/lightgbm>`_''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''If
        you use ``conda`` to manage Python dependencies, you can install LightGBM
        using ``conda install``.We strongly recommend installation from the ``conda-forge``
        channel and not from the ``default`` one due to many reasons. The main ones
        are less time delay for new releases, greater number of supported architectures
        and better handling of dependency conflicts, especially workaround for OpenMP
        is crucial for LightGBM. More details can be found in `this comment <https://github.com/microsoft/LightGBM/issues/4948#issuecomment-1013766397>`_.**Note**:
        The `lightgbm conda-forge feedstock <https://github.com/conda-forge/lightgbm-feedstock>`_
        is not maintained by LightGBM maintainers... code:: sh    conda install -c
        conda-forge lightgbmInstall from GitHub''''''''''''''''''''''''''''''''''''''All
        requirements from `Build from Sources section <#build-from-sources>`__ apply
        for this installation option as well.For **Windows** users, if you get any
        errors during installation and there is the warning ``WARNING:LightGBM:Compilation
        with MSBuild from existing solution file failed.`` in the log, you should
        install `CMake`_ (version 3.8 or higher)... code:: sh    git clone --recursive
        https://github.com/microsoft/LightGBM.git    # export CXX=g++-7 CC=gcc-7  #
        macOS users, if you decided to compile with gcc, don''t forget to specify
        compilers (replace "7" with version of gcc installed on your machine)    sh
        ./build-python.sh installNote: ``sudo`` (or administrator rights in **Windows**)
        may be needed to perform the command.Run ``sh ./build-python.sh install --nomp``
        to disable **OpenMP** support. All requirements from `Build Threadless Version
        section <#build-threadless-version>`__ apply for this installation option
        as well.Run ``sh ./build-python.sh install --mpi`` to enable **MPI** support.
        All requirements from `Build MPI Version section <#build-mpi-version>`__ apply
        for this installation option as well.Run ``sh ./build-python.sh install --mingw``,
        if you want to use **MinGW-w64** on **Windows** instead of **Visual Studio**.
        All requirements from `Build with MinGW-w64 on Windows section <#build-with-mingw-w64-on-windows>`__
        apply for this installation option as well.Run ``sh ./build-python.sh install
        --gpu`` to enable GPU support. All requirements from `Build GPU Version section
        <#build-gpu-version>`__ apply for this installation option as well. To pass
        additional options to **CMake** use the following syntax: ``sh ./build-python.sh
        install --gpu --opencl-include-dir="/usr/local/cuda/include/"``, see `Build
        GPU Version section <#build-gpu-version>`__ for the complete list of them.Run
        ``sh ./build-python.sh install --cuda`` to enable CUDA support. All requirements
        from `Build CUDA Version section <#build-cuda-version>`__ apply for this installation
        option as well.Run ``sh ./build-python.sh install --hdfs`` to enable HDFS
        support. All requirements from `Build HDFS Version section <#build-hdfs-version>`__
        apply for this installation option as well.Run ``sh ./build-python.sh install
        --bit32``, if you want to use 32-bit version. All requirements from `Build
        32-bit Version with 32-bit Python section <#build-32-bit-version-with-32-bit-python>`__
        apply for this installation option as well.Run ``sh ./build-python.sh install
        --time-costs``, if you want to output time costs for different internal routines.
        All requirements from `Build with Time Costs Output section <#build-with-time-costs-output>`__
        apply for this installation option as well.If you get any errors during installation
        or due to any other reasons, you may want to build dynamic library from sources
        by any method you prefer (see `Installation Guide <https://github.com/microsoft/LightGBM/blob/master/docs/Installation-Guide.rst>`__)
        and then just run ``sh ./build-python.sh install --precompile``.Build Wheel
        File****************You can use ``sh ./build-python.sh install bdist_wheel``
        to build a wheel file but not install it.That script requires some dependencies
        like ``build``, ``scikit-build-core``, and ``wheel``.In environments with
        restricted or no internt access, install those tools and then pass ``--no-isolation``...
        code:: sh  sh ./build-python.sh bdist_wheel --no-isolationBuild With MSBuild******************To
        use ``MSBuild`` (Windows-only), first build ``lib_lightgbm.dll`` by running
        the following from the root of the repo... code:: sh  MSBuild.exe windows/LightGBM.sln
        /p:Configuration=DLL /p:Platform=x64 /p:PlatformToolset=v143Then install the
        Python package using that library... code:: sh  sh ./build-python.sh install
        --precompileTroubleshooting---------------In case you are facing any errors
        during the installation process, you can examine ``$HOME/LightGBM_compilation.log``
        file, in which all operations are logged, to get more details about occurred
        problem. Also, please attach this file to the issue on GitHub to help faster
        indicate the cause of the error.Refer to `FAQ <https://github.com/microsoft/LightGBM/tree/master/docs/FAQ.rst>`_.Examples--------Refer
        to the walk through examples in `Python guide folder <https://github.com/microsoft/LightGBM/tree/master/examples/python-guide>`_.Development
        Guide-----------------The code style of Python-package follows `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_.The
        package''s documentation strings (docstrings) are written in the `numpydoc
        style <https://numpydoc.readthedocs.io/en/latest/format.html>`_.To check that
        a contribution to the package matches its style expectations, run the following
        from the root of the repo... code:: sh    sh .ci/lint-python.sh.. |License|
        image:: https://img.shields.io/github/license/microsoft/lightgbm.svg   :target:
        https://github.com/microsoft/LightGBM/blob/master/LICENSE.. |Python Versions|
        image:: https://img.shields.io/pypi/pyversions/lightgbm.svg?logo=python&logoColor=white   :target:
        https://pypi.org/project/lightgbm.. |PyPI Version| image:: https://img.shields.io/pypi/v/lightgbm.svg?logo=pypi&logoColor=white   :target:
        https://pypi.org/project/lightgbm.. |Downloads| image:: https://pepy.tech/badge/lightgbm   :target:
        https://pepy.tech/project/lightgbm.. |API Docs| image:: https://readthedocs.org/projects/lightgbm/badge/?version=latest   :target:
        https://lightgbm.readthedocs.io/en/latest/Python-API.html.. _CMake: https://cmake.org/'
      Package: lightgbm
      Source: pip
      Version: 4.3.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      - BSL-1.0
      - MIT
      - MPL-2.0
      - proprietary-license
      Title: lightgbm
      DownloadURL: https://files.pythonhosted.org/packages/74/d1/2e4b02e4611ab36647639c4eea8c4520bb90f948563e00a3bec583a9f9f5/lightgbm-4.3.0.tar.gz
  bazaar:
    register: 'no'
    prim: 7/CTX1020978
    community_link: https://github.com/microsoft/LightGBM
    community_name: https://github.com/microsoft/LightGBM
    community_url: https://github.com/microsoft/LightGBM
    component_comment: ''
    component_highlevel_description: A fast, distributed, high performance gradient
      boosting (GBT, GBDT, GBRT, GBM or MART) framework based on decision tree algorithms,
      used for ranking, classification and many other machine learning tasks.
    component_name: LightGBM
    component_platform: linux
    component_programing_language: C++
    component_version: V4.3.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/microsoft/LightGBM/archive/v4.3.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1085659&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: C++
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: lightgbm
    target_sw: linux
    vendor: pip
    version: 4.3.0
    web_url: https://github.com/microsoft/LightGBM
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  - BSL-1.0
  - MIT
  - MPL-2.0
  - proprietary-license
  name: lightgbm
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 4.3.0
  mimer:
    linking: Static
    product_number: CTX1020978
    product_version_label: V4.3.0
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: numpy+1.26.4
  additional_info:
    fossa-attribution:
      Description: "<h1 align=\"center\"><img src=\"https://raw.githubusercontent.com/numpy/numpy/main/branding/logo/primary/numpylogo.svg\"
        width=\"300\"></h1><br>[![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)[![PyPI
        Downloads](https://img.shields.io/pypi/dm/numpy.svg?label=PyPI%20downloads)](https://pypi.org/project/numpy/)[![Conda
        Downloads](https://img.shields.io/conda/dn/conda-forge/numpy.svg?label=Conda%20downloads)](https://anaconda.org/conda-forge/numpy)[![Stack
        Overflow](https://img.shields.io/badge/stackoverflow-Ask%20questions-blue.svg)](https://stackoverflow.com/questions/tagged/numpy)[![Nature
        Paper](https://img.shields.io/badge/DOI-10.1038%2Fs41592--019--0686--2-blue)](https://doi.org/10.1038/s41586-020-2649-2)[![OpenSSF
        Scorecard](https://api.securityscorecards.dev/projects/github.com/numpy/numpy/badge)](https://api.securityscorecards.dev/projects/github.com/numpy/numpy)NumPy
        is the fundamental package for scientific computing with Python.- **Website:**
        https://www.numpy.org- **Documentation:** https://numpy.org/doc- **Mailing
        list:** https://mail.python.org/mailman/listinfo/numpy-discussion- **Source
        code:** https://github.com/numpy/numpy- **Contributing:** https://www.numpy.org/devdocs/dev/index.html-
        **Bug reports:** https://github.com/numpy/numpy/issues- **Report a security
        vulnerability:** https://tidelift.com/docs/securityIt provides:- a powerful
        N-dimensional array object- sophisticated (broadcasting) functions- tools
        for integrating C/C++ and Fortran code- useful linear algebra, Fourier transform,
        and random number capabilitiesTesting:NumPy requires `pytest` and `hypothesis`.
        \ Tests can then be run after installation with:    python -c \"import numpy,
        sys; sys.exit(numpy.test() is False)\"Code of Conduct----------------------NumPy
        is a community-driven open source project developed by a diverse group of[contributors](https://numpy.org/teams/).
        The NumPy leadership has made a strongcommitment to creating an open, inclusive,
        and positive community. Please read the[NumPy Code of Conduct](https://numpy.org/code-of-conduct/)
        for guidance on how to interactwith others in a way that makes our community
        thrive.Call for Contributions----------------------The NumPy project welcomes
        your expertise and enthusiasm!Small improvements or fixes are always appreciated.
        If you are considering larger contributionsto the source code, please contact
        us through the [mailinglist](https://mail.python.org/mailman/listinfo/numpy-discussion)
        first.Writing code isn\u2019t the only way to contribute to NumPy. You can
        also:- review pull requests- help us stay on top of new and old issues- develop
        tutorials, presentations, and other educational materials- maintain and improve
        [our website](https://github.com/numpy/numpy.org)- develop graphic design
        for our brand assets and promotional materials- translate website content-
        help with outreach and onboard new contributors- write grant proposals and
        help with other fundraising effortsFor more information about the ways you
        can contribute to NumPy, visit [our website](https://numpy.org/contribute/).
        If you\u2019re unsure where to start or how your skills fit in, reach out!
        You canask on the mailing list or here, on GitHub, by opening a new issue
        or leaving acomment on a relevant issue that is already open.Our preferred
        channels of communication are all public, but if you\u2019d like tospeak to
        us in private first, contact our community coordinators atnumpy-team@googlegroups.com
        or on Slack (write numpy-team@googlegroups.com foran invitation).We also have
        a biweekly community call, details of which are announced on themailing list.
        You are very welcome to join.If you are new to contributing to open source,
        [thisguide](https://opensource.guide/how-to-contribute/) helps explain why,
        what,and how to successfully get involved."
      Package: numpy
      Source: pip
      Version: 1.26.4
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - BSL-1.0
      - CC-BY-4.0
      - CC-BY-SA-3.0
      - CC-BY-SA-4.0
      - CC0-1.0
      - FSFAP
      - GPL-1.0-or-later
      - GPL-3.0-only
      - GPL-3.0-or-later
      - GPL-3.0-with-GCC-exception
      - LGPL-2.0-or-later
      - MIT
      - NCSA
      - OPL-1.0
      - SunPro
      - Zlib
      - bsd-3-clause-open-mpi
      - lgpl-2.1-nokia-qt
      - openpub
      - public-domain
      - unknown
      - zsh
      Title: numpy
      DownloadURL: https://files.pythonhosted.org/packages/65/6e/09db70a523a96d25e115e71cc56a6f9031e7b8cd166c1ac8438307c14058/numpy-1.26.4.tar.gz
  bazaar:
    register: 'no'
    prim: 73/CAX1057111
    community_link: https://pypi.org/project/numpy/
    community_name: https://pypi.org/project/numpy/
    community_url: https://pypi.org/project/numpy/
    component_comment: ''
    component_highlevel_description: The fundamental package for scientific computing
      with Python.
    component_name: numpy
    component_platform: linux
    component_programing_language: Python
    component_version: 1.26.4
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://files.pythonhosted.org/packages/65/6e/09db70a523a96d25e115e71cc56a6f9031e7b8cd166c1ac8438307c14058/numpy-1.26.4.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1077793&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: numpy
    target_sw: linux
    vendor: pip
    version: 1.26.4
    web_url: https://numpy.org
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - BSL-1.0
  - CC-BY-4.0
  - CC-BY-SA-3.0
  - CC-BY-SA-4.0
  - CC0-1.0
  - FSFAP
  - GPL-1.0-or-later
  - GPL-3.0-only
  - GPL-3.0-or-later
  - GPL-3.0-with-GCC-exception
  - LGPL-2.0-or-later
  - MIT
  - NCSA
  - OPL-1.0
  - SunPro
  - Zlib
  - bsd-3-clause-open-mpi
  - lgpl-2.1-nokia-qt
  - openpub
  - public-domain
  - unknown
  - zsh
  name: numpy
  primary:
  - lightgbm+4.3.0
  - pandas+2.2.1
  subcomponent: false
  type: FOSS
  versions:
  - 1.26.4
  mimer:
    linking: Static
    product_number: CAX1057111
    product_version_label: v1.26.4
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pandas+2.2.1
  additional_info:
    fossa-attribution:
      Description: "<div align=\"center\">  <img src=\"https://pandas.pydata.org/static/img/pandas.svg\"><br></div>-----------------#
        pandas: powerful Python data analysis toolkit[![PyPI Latest Release](https://img.shields.io/pypi/v/pandas.svg)](https://pypi.org/project/pandas/)[![Conda
        Latest Release](https://anaconda.org/conda-forge/pandas/badges/version.svg)](https://anaconda.org/anaconda/pandas/)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3509134.svg)](https://doi.org/10.5281/zenodo.3509134)[![Package
        Status](https://img.shields.io/pypi/status/pandas.svg)](https://pypi.org/project/pandas/)[![License](https://img.shields.io/pypi/l/pandas.svg)](https://github.com/pandas-dev/pandas/blob/master/LICENSE)[![Azure
        Build Status](https://dev.azure.com/pandas-dev/pandas/_apis/build/status/pandas-dev.pandas?branch=master)](https://dev.azure.com/pandas-dev/pandas/_build/latest?definitionId=1&branch=master)[![Coverage](https://codecov.io/github/pandas-dev/pandas/coverage.svg?branch=master)](https://codecov.io/gh/pandas-dev/pandas)[![Downloads](https://static.pepy.tech/personalized-badge/pandas?period=month&units=international_system&left_color=black&right_color=orange&left_text=PyPI%20downloads%20per%20month)](https://pepy.tech/project/pandas)[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pydata/pandas)[![Powered
        by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org)[![Code
        style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports:
        isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)##
        What is it?**pandas** is a Python package that provides fast, flexible, and
        expressive datastructures designed to make working with \"relational\" or
        \"labeled\" data botheasy and intuitive. It aims to be the fundamental high-level
        building block fordoing practical, **real world** data analysis in Python.
        Additionally, it hasthe broader goal of becoming **the most powerful and flexible
        open source dataanalysis / manipulation tool available in any language**.
        It is already well onits way towards this goal.## Main FeaturesHere are just
        a few of the things that pandas does well:  - Easy handling of [**missing
        data**][missing-data] (represented as    `NaN`, `NA`, or `NaT`) in floating
        point as well as non-floating point data  - Size mutability: columns can be
        [**inserted and    deleted**][insertion-deletion] from DataFrame and higher
        dimensional    objects  - Automatic and explicit [**data alignment**][alignment]:
        objects can    be explicitly aligned to a set of labels, or the user can simply
        \   ignore the labels and let `Series`, `DataFrame`, etc. automatically    align
        the data for you in computations  - Powerful, flexible [**group by**][groupby]
        functionality to perform    split-apply-combine operations on data sets, for
        both aggregating    and transforming data  - Make it [**easy to convert**][conversion]
        ragged,    differently-indexed data in other Python and NumPy data structures
        \   into DataFrame objects  - Intelligent label-based [**slicing**][slicing],
        [**fancy    indexing**][fancy-indexing], and [**subsetting**][subsetting]
        of    large data sets  - Intuitive [**merging**][merging] and [**joining**][joining]
        data    sets  - Flexible [**reshaping**][reshape] and [**pivoting**][pivot-table]
        of    data sets  - [**Hierarchical**][mi] labeling of axes (possible to have
        multiple    labels per tick)  - Robust IO tools for loading data from [**flat
        files**][flat-files]    (CSV and delimited), [**Excel files**][excel], [**databases**][db],
        \   and saving/loading data from the ultrafast [**HDF5 format**][hdfstore]
        \ - [**Time series**][timeseries]-specific functionality: date range    generation
        and frequency conversion, moving window statistics,    date shifting and lagging
        \  [missing-data]: https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html
        \  [insertion-deletion]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#column-selection-addition-deletion
        \  [alignment]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html?highlight=alignment#intro-to-data-structures
        \  [groupby]: https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#group-by-split-apply-combine
        \  [conversion]: https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe
        \  [slicing]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#slicing-ranges
        \  [fancy-indexing]: https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced
        \  [subsetting]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#boolean-indexing
        \  [merging]: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#database-style-dataframe-or-named-series-joining-merging
        \  [joining]: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#joining-on-index
        \  [reshape]: https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html
        \  [pivot-table]: https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html
        \  [mi]: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#hierarchical-indexing-multiindex
        \  [flat-files]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#csv-text-files
        \  [excel]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#excel-files
        \  [db]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#sql-queries
        \  [hdfstore]: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#hdf5-pytables
        \  [timeseries]: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-series-date-functionality##
        Where to get itThe source code is currently hosted on GitHub at:https://github.com/pandas-dev/pandasBinary
        installers for the latest released version are available at the [PythonPackage
        Index (PyPI)](https://pypi.org/project/pandas) and on [Conda](https://docs.conda.io/en/latest/).```sh#
        condaconda install pandas``````sh# or PyPIpip install pandas```## Dependencies-
        [NumPy - Adds support for large, multi-dimensional arrays, matrices and high-level
        mathematical functions to operate on these arrays](https://www.numpy.org)-
        [python-dateutil - Provides powerful extensions to the standard datetime module](https://dateutil.readthedocs.io/en/stable/index.html)-
        [pytz - Brings the Olson tz database into Python which allows accurate and
        cross platform timezone calculations](https://github.com/stub42/pytz)See the
        [full installation instructions](https://pandas.pydata.org/pandas-docs/stable/install.html#dependencies)
        for minimum supported versions of required, recommended and optional dependencies.##
        Installation from sourcesTo install pandas from source you need [Cython](https://cython.org/)
        in addition to the normaldependencies above. Cython can be installed from
        PyPI:```shpip install cython```In the `pandas` directory (same one where you
        found this file aftercloning the git repo), execute:```shpython setup.py install```or
        for installing in [development mode](https://pip.pypa.io/en/latest/cli/pip_install/#install-editable):```shpython
        -m pip install -e . --no-build-isolation --no-use-pep517```If you have `make`,
        you can also use `make develop` to run the same command.or alternatively```shpython
        setup.py develop```See the full instructions for [installing from source](https://pandas.pydata.org/pandas-docs/stable/install.html#installing-from-source).##
        License[BSD 3](LICENSE)## DocumentationThe official documentation is hosted
        on PyData.org: https://pandas.pydata.org/pandas-docs/stable## BackgroundWork
        on ``pandas`` started at [AQR](https://www.aqr.com/) (a quantitative hedge
        fund) in 2008 andhas been under active development since then.## Getting HelpFor
        usage questions, the best place to go to is [StackOverflow](https://stackoverflow.com/questions/tagged/pandas).Further,
        general questions and discussions can also take place on the [pydata mailing
        list](https://groups.google.com/forum/?fromgroups#!forum/pydata).## Discussion
        and DevelopmentMost development discussions take place on GitHub in this repo.
        Further, the [pandas-dev mailing list](https://mail.python.org/mailman/listinfo/pandas-dev)
        can also be used for specialized discussions or design issues, and a [Gitter
        channel](https://gitter.im/pydata/pandas) is available for quick development
        related questions.## Contributing to pandas [![Open Source Helpers](https://www.codetriage.com/pandas-dev/pandas/badges/users.svg)](https://www.codetriage.com/pandas-dev/pandas)All
        contributions, bug reports, bug fixes, documentation improvements, enhancements,
        and ideas are welcome.A detailed overview on how to contribute can be found
        in the **[contributing guide](https://pandas.pydata.org/docs/dev/development/contributing.html)**.If
        you are simply looking to start working with the pandas codebase, navigate
        to the [GitHub \"issues\" tab](https://github.com/pandas-dev/pandas/issues)
        and start looking through interesting issues. There are a number of issues
        listed under [Docs](https://github.com/pandas-dev/pandas/issues?labels=Docs&sort=updated&state=open)
        and [good first issue](https://github.com/pandas-dev/pandas/issues?labels=good+first+issue&sort=updated&state=open)
        where you could start out.You can also triage issues which may include reproducing
        bug reports, or asking for vital information such as version numbers or reproduction
        instructions. If you would like to start triaging issues, one easy way to
        get started is to [subscribe to pandas on CodeTriage](https://www.codetriage.com/pandas-dev/pandas).Or
        maybe through using pandas you have an idea of your own or are looking for
        something in the documentation and thinking \u2018this can be improved\u2019...you
        can do something about it!Feel free to ask questions on the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/pydata)
        or on [Gitter](https://gitter.im/pydata/pandas).As contributors and maintainers
        to this project, you are expected to abide by pandas' code of conduct. More
        information can be found at: [Contributor Code of Conduct](https://github.com/pandas-dev/pandas/blob/master/.github/CODE_OF_CONDUCT.md)"
      Package: pandas
      Source: pip
      Version: 2.2.1
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: pandas
      DownloadURL: https://files.pythonhosted.org/packages/3d/59/2afa81b9fb300c90531803c0fd43ff4548074fa3e8d0f747ef63b3b5e77a/pandas-2.2.1.tar.gz
  bazaar:
    register: 'no'
    prim: 53/CAX1057900
    community_link: https://github.com/pandas-dev/pandas
    community_name: https://github.com/pandas-dev/pandas
    community_url: https://github.com/pandas-dev/pandas
    component_comment: ''
    component_highlevel_description: Flexible and powerful data analysis / manipulation
      library for Python, providing labeled data structures similar to R data.frame
      objects, statistical functions, and much more.
    component_name: pandas
    component_platform: linux
    component_programing_language: Python
    component_version: V2.2.1
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pandas-dev/pandas/archive/v2.2.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080444&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pandas
    target_sw: linux
    vendor: pip
    version: 2.2.1
    web_url: https://pandas.pydata.org
  licenses:
  - BSD-3-Clause
  name: pandas
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.1
  mimer:
    linking: Static
    product_number: CAX1057900
    product_version_label: V2.2.1
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: pydantic+1.10.14
  additional_info:
    fossa-attribution:
      Description: "# Pydantic[![CI](https://img.shields.io/github/actions/workflow/status/pydantic/pydantic/ci.yml?branch=main&logo=github&label=CI)](https://github.com/pydantic/pydantic/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[![Coverage](https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic.svg)](https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic)[![pypi](https://img.shields.io/pypi/v/pydantic.svg)](https://pypi.python.org/pypi/pydantic)[![CondaForge](https://img.shields.io/conda/v/conda-forge/pydantic.svg)](https://anaconda.org/conda-forge/pydantic)[![downloads](https://static.pepy.tech/badge/pydantic/month)](https://pepy.tech/project/pydantic)[![versions](https://img.shields.io/pypi/pyversions/pydantic.svg)](https://github.com/pydantic/pydantic)[![license](https://img.shields.io/github/license/pydantic/pydantic.svg)](https://github.com/pydantic/pydantic/blob/main/LICENSE)[![Pydantic
        v2](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json)](https://docs.pydantic.dev/latest/contributing/#badges)Data
        validation using Python type hints.Fast and extensible, Pydantic plays nicely
        with your linters/IDE/brain.Define how data should be in pure, canonical Python
        3.8+; validate it with Pydantic.## Pydantic Company :rocket:We've started
        a company based on the principles that I believe have led to Pydantic's success.Learning
        more from the [Company Announcement](https://blog.pydantic.dev/blog/2023/02/16/company-announcement--pydantic/).##
        Pydantic V1.10 vs. V2Pydantic V2 is a ground-up rewrite that offers many new
        features, performance improvements, and some breaking changes compared to
        Pydantic V1.If you're using Pydantic V1 you may want to look at the[pydantic
        V1.10 Documentation](https://docs.pydantic.dev/) or,[`1.10.X-fixes` git branch](https://github.com/pydantic/pydantic/tree/1.10.X-fixes).
        Pydantic V2 also ships with the latest version of Pydantic V1 built in so
        that you can incrementally upgrade your code base and projects: `from pydantic
        import v1 as pydantic_v1`.## HelpSee [documentation](https://docs.pydantic.dev/)
        for more details.## InstallationInstall using `pip install -U pydantic` or
        `conda install pydantic -c conda-forge`.For more installation options to make
        Pydantic even faster,see the [Install](https://docs.pydantic.dev/install/)
        section in the documentation.## A Simple Example```pyfrom datetime import
        datetimefrom typing import List, Optionalfrom pydantic import BaseModelclass
        User(BaseModel):    id: int    name: str = 'John Doe'    signup_ts: Optional[datetime]
        = None    friends: List[int] = []external_data = {'id': '123', 'signup_ts':
        '2017-06-01 12:22', 'friends': [1, '2', b'3']}user = User(**external_data)print(user)#>
        User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22)
        friends=[1, 2, 3]print(user.id)#> 123```## ContributingFor guidance on setting
        up a development environment and how to make acontribution to Pydantic, see[Contributing
        to Pydantic](https://docs.pydantic.dev/contributing/).## Reporting a Security
        VulnerabilitySee our [security policy](https://github.com/pydantic/pydantic/security/policy).##
        Changelog## v2.7.0 (2024-04-11)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0)The
        code released in v2.7.0 is practically identical to that of v2.7.0b1.### What's
        Changed#### Packaging* Reorganize `pyproject.toml` sections by [@Viicos](https://github.com/Viicos)
        in [#8899](https://github.com/pydantic/pydantic/pull/8899)* Bump `pydantic-core`
        to `v2.18.1` by [@sydney-runkle](https://github.com/sydney-runkle) in [#9211](https://github.com/pydantic/pydantic/pull/9211)*
        Adopt `jiter` `v0.2.0` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1250](https://github.com/pydantic/pydantic-core/pull/1250)####
        New Features* Extract attribute docstrings from `FieldInfo.description` by
        [@Viicos](https://github.com/Viicos) in [#6563](https://github.com/pydantic/pydantic/pull/6563)*
        Add a `with_config` decorator to comply with typing spec by [@Viicos](https://github.com/Viicos)
        in [#8611](https://github.com/pydantic/pydantic/pull/8611)* Allow an optional
        separator splitting the value and unit of the result of `ByteSize.human_readable`
        by [@jks15satoshi](https://github.com/jks15satoshi) in [#8706](https://github.com/pydantic/pydantic/pull/8706)*
        Add generic `Secret` base type by [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        in [#8519](https://github.com/pydantic/pydantic/pull/8519)* Make use of `Sphinx`
        inventories for cross references in docs by [@Viicos](https://github.com/Viicos)
        in [#8682](https://github.com/pydantic/pydantic/pull/8682)* Add environment
        variable to disable plugins by [@geospackle](https://github.com/geospackle)
        in [#8767](https://github.com/pydantic/pydantic/pull/8767)* Add support for
        `deprecated` fields by [@Viicos](https://github.com/Viicos) in [#8237](https://github.com/pydantic/pydantic/pull/8237)*
        Allow `field_serializer('*')` by [@ornariece](https://github.com/ornariece)
        in [#9001](https://github.com/pydantic/pydantic/pull/9001)* Handle a case
        when `model_config` is defined as a model property by [@alexeyt101](https://github.com/alexeyt101)
        in [#9004](https://github.com/pydantic/pydantic/pull/9004)* Update `create_model()`
        to support `typing.Annotated` as input by [@wannieman98](https://github.com/wannieman98)
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* Add `ClickhouseDsn`
        support by [@solidguy7](https://github.com/solidguy7) in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        Add support for `re.Pattern[str]` to `pattern` field by [@jag-k](https://github.com/jag-k)
        in [#9053](https://github.com/pydantic/pydantic/pull/9053)* Support for `serialize_as_any`
        runtime setting by [@sydney-runkle](https://github.com/sydney-runkle) in [#8830](https://github.com/pydantic/pydantic/pull/8830)*
        Add support for `typing.Self` by [@Youssefares](https://github.com/Youssefares)
        in [#9023](https://github.com/pydantic/pydantic/pull/9023)* Ability to pass
        `context` to serialization by [@ornariece](https://github.com/ornariece) in
        [#8965](https://github.com/pydantic/pydantic/pull/8965)* Add feedback widget
        to docs with flarelytics integration by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9129](https://github.com/pydantic/pydantic/pull/9129)* Support for parsing
        partial JSON strings in Python by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/jiter#66](https://github.com/pydantic/jiter/pull/66)**Finalized
        in v2.7.0, rather than v2.7.0b1:*** Add support for field level number to
        str coercion option by [@NeevCohen](https://github.com/NeevCohen) in [#9137](https://github.com/pydantic/pydantic/pull/9137)*
        Update `warnings` parameter for serialization utilities to allow raising a
        warning by [@Lance-Drane](https://github.com/Lance-Drane) in [#9166](https://github.com/pydantic/pydantic/pull/9166)####
        Changes* Correct docs, logic for `model_construct` behavior with `extra` by
        [@sydney-runkle](https://github.com/sydney-runkle) in [#8807](https://github.com/pydantic/pydantic/pull/8807)*
        Improve error message for improper `RootModel` subclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8857](https://github.com/pydantic/pydantic/pull/8857)* Use `PEP570` syntax
        by [@Viicos](https://github.com/Viicos) in [#8940](https://github.com/pydantic/pydantic/pull/8940)*
        Add `enum` and `type` to the JSON schema for single item literals by [@dmontagu](https://github.com/dmontagu)
        in [#8944](https://github.com/pydantic/pydantic/pull/8944)* Deprecate `update_json_schema`
        internal function by [@sydney-runkle](https://github.com/sydney-runkle) in
        [#9125](https://github.com/pydantic/pydantic/pull/9125)* Serialize duration
        to hour minute second, instead of just seconds by [@kakilangit](https://github.com/kakilangit)
        in [pydantic/speedate#50](https://github.com/pydantic/speedate/pull/50)* Trimming
        str before parsing to int and float by [@hungtsetse](https://github.com/hungtsetse)
        in [pydantic/pydantic-core#1203](https://github.com/pydantic/pydantic-core/pull/1203)####
        Performance* `enum` validator improvements by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9045](https://github.com/pydantic/pydantic/pull/9045)* Move `enum` validation
        and serialization to Rust by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#9064](https://github.com/pydantic/pydantic/pull/9064)* Improve schema
        generation for nested dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9114](https://github.com/pydantic/pydantic/pull/9114)* Fast path for
        ASCII python string creation in JSON by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#72](https://github.com/pydantic/jiter/pull/72)* SIMD
        integer and string JSON parsing on `aarch64`(**Note:** SIMD on x86 will be
        implemented in a future release) by [@samuelcolvin](https://github.com/samuelcolvin)
        in in [pydantic/jiter#65](https://github.com/pydantic/jiter/pull/65)* Support
        JSON `Cow<str>` from `jiter` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1231](https://github.com/pydantic/pydantic-core/pull/1231)*
        MAJOR performance improvement: update to PyO3 0.21 final by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1248](https://github.com/pydantic/pydantic-core/pull/1248)*
        cache Python strings by [@samuelcolvin](https://github.com/samuelcolvin) in
        [pydantic/pydantic-core#1240](https://github.com/pydantic/pydantic-core/pull/1240)####
        Fixes* Fix strict parsing for some `Sequence`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8614](https://github.com/pydantic/pydantic/pull/8614)* Add a check on
        the existence of `__qualname__` by [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        in [#8642](https://github.com/pydantic/pydantic/pull/8642)* Handle `__pydantic_extra__`
        annotation being a string or inherited by [@alexmojaki](https://github.com/alexmojaki)
        in [#8659](https://github.com/pydantic/pydantic/pull/8659)* Fix json validation
        for `NameEmail` by [@Holi0317](https://github.com/Holi0317) in [#8650](https://github.com/pydantic/pydantic/pull/8650)*
        Fix type-safety of attribute access in `BaseModel` by [@bluenote10](https://github.com/bluenote10)
        in [#8651](https://github.com/pydantic/pydantic/pull/8651)* Fix bug with `mypy`
        plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with plain validator by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* fixes `__pydantic_config__`
        ignored for TypeDict by [@13sin](https://github.com/13sin) in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        Fix test failures with `pytest v8.0.0` due to `pytest.warns()` starting to
        work inside `pytest.raises()` by [@mgorny](https://github.com/mgorny) in [#8678](https://github.com/pydantic/pydantic/pull/8678)*
        Use `is_valid_field` from 1.x for `mypy` plugin by [@DanielNoord](https://github.com/DanielNoord)
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* Better-support
        `mypy` strict equality flag by [@dmontagu](https://github.com/dmontagu) in
        [#8799](https://github.com/pydantic/pydantic/pull/8799)* model_json_schema
        export with Annotated types misses 'required' parameters by [@LouisGobert](https://github.com/LouisGobert)
        in [#8793](https://github.com/pydantic/pydantic/pull/8793)* Fix default inclusion
        in `FieldInfo.__repr_args__` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8801](https://github.com/pydantic/pydantic/pull/8801)* Fix resolution
        of forward refs in dataclass base classes that are not present in the subclass
        module namespace by [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn)
        in [#8751](https://github.com/pydantic/pydantic/pull/8751)* Fix `BaseModel`
        type annotations to be resolvable by `typing.get_type_hints` by [@devmonkey22](https://github.com/devmonkey22)
        in [#7680](https://github.com/pydantic/pydantic/pull/7680)* Fix: allow empty
        string aliases with `AliasGenerator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8810](https://github.com/pydantic/pydantic/pull/8810)* Fix test along
        with `date` -> `datetime` timezone assumption fix by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8823](https://github.com/pydantic/pydantic/pull/8823)* Fix deprecation
        warning with usage of `ast.Str` by [@Viicos](https://github.com/Viicos) in
        [#8837](https://github.com/pydantic/pydantic/pull/8837)* Add missing `deprecated`
        decorators by [@Viicos](https://github.com/Viicos) in [#8877](https://github.com/pydantic/pydantic/pull/8877)*
        Fix serialization of `NameEmail` if name includes an email address by [@NeevCohen](https://github.com/NeevCohen)
        in [#8860](https://github.com/pydantic/pydantic/pull/8860)* Add information
        about class in error message of schema generation by [@Czaki](https://github.com/Czaki)
        in [#8917](https://github.com/pydantic/pydantic/pull/8917)* Make `TypeAdapter`'s
        typing compatible with special forms by [@adriangb](https://github.com/adriangb)
        in [#8923](https://github.com/pydantic/pydantic/pull/8923)* Fix issue with
        config behavior being baked into the ref schema for `enum`s by [@dmontagu](https://github.com/dmontagu)
        in [#8920](https://github.com/pydantic/pydantic/pull/8920)* More helpful error
        re wrong `model_json_schema` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8928](https://github.com/pydantic/pydantic/pull/8928)* Fix nested discriminated
        union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix schema build
        for nested dataclasses / TypedDicts with discriminators by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8950](https://github.com/pydantic/pydantic/pull/8950)* Remove unnecessary
        logic for definitions schema gen with discriminated unions by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8951](https://github.com/pydantic/pydantic/pull/8951)* Fix handling of
        optionals in `mypy` plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9008](https://github.com/pydantic/pydantic/pull/9008)* Fix `PlainSerializer`
        usage with std type constructor by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9031](https://github.com/pydantic/pydantic/pull/9031)* Remove unnecessary
        warning for config in plugin by [@dmontagu](https://github.com/dmontagu) in
        [#9039](https://github.com/pydantic/pydantic/pull/9039)* Fix default value
        serializing by [@NeevCohen](https://github.com/NeevCohen) in [#9066](https://github.com/pydantic/pydantic/pull/9066)*
        Fix extra fields check in `Model.__getattr__()` by [@NeevCohen](https://github.com/NeevCohen)
        in [#9082](https://github.com/pydantic/pydantic/pull/9082)* Fix `ClassVar`
        forward ref inherited from parent class by [@alexmojaki](https://github.com/alexmojaki)
        in [#9097](https://github.com/pydantic/pydantic/pull/9097)* fix sequence like
        validator with strict `True` by [@andresliszt](https://github.com/andresliszt)
        in [#8977](https://github.com/pydantic/pydantic/pull/8977)* Improve warning
        message when a field name shadows a field in a parent model by [@chan-vince](https://github.com/chan-vince)
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* Do not warn about
        shadowed fields if they are not redefined in a child class by [@chan-vince](https://github.com/chan-vince)
        in [#9111](https://github.com/pydantic/pydantic/pull/9111)* Fix discriminated
        union bug with unsubstituted type var by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9124](https://github.com/pydantic/pydantic/pull/9124)* Support serialization
        of `deque` when passed to `Sequence[blah blah blah]` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#9128](https://github.com/pydantic/pydantic/pull/9128)* Init private attributes
        from super-types in `model_post_init` by [@Viicos](https://github.com/Viicos)
        in [#9134](https://github.com/pydantic/pydantic/pull/9134)* fix `model_construct`
        with `validation_alias` by [@ornariece](https://github.com/ornariece) in [#9144](https://github.com/pydantic/pydantic/pull/9144)*
        Ensure json-schema generator handles `Literal` `null` types by [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        in [#9135](https://github.com/pydantic/pydantic/pull/9135)* **Fixed in v2.7.0**:
        Fix allow extra generic by [@dmontagu](https://github.com/dmontagu) in [#9193](https://github.com/pydantic/pydantic/pull/9193)###
        New Contributors* [@hungtsetse](https://github.com/hungtsetse) made their
        first contribution in [#8546](https://github.com/pydantic/pydantic/pull/8546)*
        [@StrawHatDrag0n](https://github.com/StrawHatDrag0n) made their first contribution
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)* [@anci3ntr0ck](https://github.com/anci3ntr0ck)
        made their first contribution in [#8642](https://github.com/pydantic/pydantic/pull/8642)*
        [@Holi0317](https://github.com/Holi0317) made their first contribution in
        [#8650](https://github.com/pydantic/pydantic/pull/8650)* [@bluenote10](https://github.com/bluenote10)
        made their first contribution in [#8651](https://github.com/pydantic/pydantic/pull/8651)*
        [@ADSteele916](https://github.com/ADSteele916) made their first contribution
        in [#8703](https://github.com/pydantic/pydantic/pull/8703)* [@musicinmybrain](https://github.com/musicinmybrain)
        made their first contribution in [#8731](https://github.com/pydantic/pydantic/pull/8731)*
        [@jks15satoshi](https://github.com/jks15satoshi) made their first contribution
        in [#8706](https://github.com/pydantic/pydantic/pull/8706)* [@13sin](https://github.com/13sin)
        made their first contribution in [#8734](https://github.com/pydantic/pydantic/pull/8734)*
        [@DanielNoord](https://github.com/DanielNoord) made their first contribution
        in [#8738](https://github.com/pydantic/pydantic/pull/8738)* [@conradogarciaberrotaran](https://github.com/conradogarciaberrotaran)
        made their first contribution in [#8519](https://github.com/pydantic/pydantic/pull/8519)*
        [@chris-griffin](https://github.com/chris-griffin) made their first contribution
        in [#8775](https://github.com/pydantic/pydantic/pull/8775)* [@LouisGobert](https://github.com/LouisGobert)
        made their first contribution in [#8793](https://github.com/pydantic/pydantic/pull/8793)*
        [@matsjoyce-refeyn](https://github.com/matsjoyce-refeyn) made their first
        contribution in [#8751](https://github.com/pydantic/pydantic/pull/8751)* [@devmonkey22](https://github.com/devmonkey22)
        made their first contribution in [#7680](https://github.com/pydantic/pydantic/pull/7680)*
        [@adamency](https://github.com/adamency) made their first contribution in
        [#8847](https://github.com/pydantic/pydantic/pull/8847)* [@MamfTheKramf](https://github.com/MamfTheKramf)
        made their first contribution in [#8851](https://github.com/pydantic/pydantic/pull/8851)*
        [@ornariece](https://github.com/ornariece) made their first contribution in
        [#9001](https://github.com/pydantic/pydantic/pull/9001)* [@alexeyt101](https://github.com/alexeyt101)
        made their first contribution in [#9004](https://github.com/pydantic/pydantic/pull/9004)*
        [@wannieman98](https://github.com/wannieman98) made their first contribution
        in [#8947](https://github.com/pydantic/pydantic/pull/8947)* [@solidguy7](https://github.com/solidguy7)
        made their first contribution in [#9062](https://github.com/pydantic/pydantic/pull/9062)*
        [@kloczek](https://github.com/kloczek) made their first contribution in [#9047](https://github.com/pydantic/pydantic/pull/9047)*
        [@jag-k](https://github.com/jag-k) made their first contribution in [#9053](https://github.com/pydantic/pydantic/pull/9053)*
        [@priya-gitTest](https://github.com/priya-gitTest) made their first contribution
        in [#9088](https://github.com/pydantic/pydantic/pull/9088)* [@Youssefares](https://github.com/Youssefares)
        made their first contribution in [#9023](https://github.com/pydantic/pydantic/pull/9023)*
        [@chan-vince](https://github.com/chan-vince) made their first contribution
        in [#9105](https://github.com/pydantic/pydantic/pull/9105)* [@bruno-f-cruz](https://github.com/bruno-f-cruz)
        made their first contribution in [#9135](https://github.com/pydantic/pydantic/pull/9135)*
        [@Lance-Drane](https://github.com/Lance-Drane) made their first contribution
        in [#9166](https://github.com/pydantic/pydantic/pull/9166)## v2.7.0b1 (2024-04-03)Pre-release,
        see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.7.0b1)
        for details.## v2.6.4 (2024-03-12)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.4)###
        What's Changed#### Fixes* Fix usage of `AliasGenerator` with `computed_field`
        decorator by [@sydney-runkle](https://github.com/sydney-runkle) in [#8806](https://github.com/pydantic/pydantic/pull/8806)*
        Fix nested discriminated union schema gen, pt 2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8932](https://github.com/pydantic/pydantic/pull/8932)* Fix bug with no_strict_optional=True
        caused by API deferral by [@dmontagu](https://github.com/dmontagu) in [#8826](https://github.com/pydantic/pydantic/pull/8826)##
        v2.6.3 (2024-02-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.3)###
        What's Changed#### Packaging* Update `pydantic-settings` version in the docs
        by [@hramezani](https://github.com/hramezani) in [#8906](https://github.com/pydantic/pydantic/pull/8906)####
        Fixes* Fix discriminated union schema gen bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8904](https://github.com/pydantic/pydantic/pull/8904)## v2.6.2 (2024-02-23)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.6.2)### What's
        Changed#### Packaging* Upgrade to `pydantic-core` 2.16.3 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8879](https://github.com/pydantic/pydantic/pull/8879)#### Fixes* 'YYYY-MM-DD'
        date string coerced to datetime shouldn't infer timezone by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1193](https://github.com/pydantic/pydantic-core/pull/1193)##
        v2.6.1 (2024-02-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.1)###
        What's Changed#### Packaging* Upgrade to `pydantic-core` 2.16.2 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8717](https://github.com/pydantic/pydantic/pull/8717)#### Fixes* Fix
        bug with `mypy` plugin and `no_strict_optional = True` by [@dmontagu](https://github.com/dmontagu)
        in [#8666](https://github.com/pydantic/pydantic/pull/8666)* Fix `ByteSize`
        error `type` change by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8681](https://github.com/pydantic/pydantic/pull/8681)* Fix inheriting
        `Field` annotations in dataclasses by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8679](https://github.com/pydantic/pydantic/pull/8679)* Fix regression
        in core schema generation for indirect definition references by [@dmontagu](https://github.com/dmontagu)
        in [#8702](https://github.com/pydantic/pydantic/pull/8702)* Fix unsupported
        types bug with `PlainValidator` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8710](https://github.com/pydantic/pydantic/pull/8710)* Reverting problematic
        fix from 2.6 release, fixing schema building bug by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8718](https://github.com/pydantic/pydantic/pull/8718)* Fix warning for
        tuple of wrong size in `Union` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1174](https://github.com/pydantic/pydantic-core/pull/1174)*
        Fix `computed_field` JSON serializer `exclude_none` behavior by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1187](https://github.com/pydantic/pydantic-core/pull/1187)##
        v2.6.0 (2024-01-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0)The
        code released in v2.6.0 is practically identical to that of v2.6.0b1.### What's
        Changed#### Packaging* Check for `email-validator` version >= 2.0 by [@commonism](https://github.com/commonism)
        in [#6033](https://github.com/pydantic/pydantic/pull/6033)* Upgrade `ruff``
        target version to Python 3.8 by [@Elkiwa](https://github.com/Elkiwa) in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        Update to `pydantic-extra-types==2.4.1` by [@yezz123](https://github.com/yezz123)
        in [#8478](https://github.com/pydantic/pydantic/pull/8478)* Update to `pyright==1.1.345`
        by [@Viicos](https://github.com/Viicos) in [#8453](https://github.com/pydantic/pydantic/pull/8453)*
        Update pydantic-core from 2.14.6 to 2.16.1, significant changes from these
        updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.14.6...v2.16.1)####
        New Features* Add `NatsDsn` by [@ekeew](https://github.com/ekeew) in [#6874](https://github.com/pydantic/pydantic/pull/6874)*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)* Add `types.OnErrorOmit`
        by [@adriangb](https://github.com/adriangb) in [#8222](https://github.com/pydantic/pydantic/pull/8222)*
        Support `AliasGenerator` usage by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8282](https://github.com/pydantic/pydantic/pull/8282)* Add Pydantic People
        Page to docs by [@sydney-runkle](https://github.com/sydney-runkle) in [#8345](https://github.com/pydantic/pydantic/pull/8345)*
        Support `yyyy-MM-DD` datetime parsing by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8404](https://github.com/pydantic/pydantic/pull/8404)* Added bits conversions
        to the `ByteSize` class [#8415](https://github.com/pydantic/pydantic/issues/8415)
        by [@luca-matei](https://github.com/luca-matei) in [#8507](https://github.com/pydantic/pydantic/pull/8507)*
        Enable json schema creation with type `ByteSize` by [@geospackle](https://github.com/geospackle)
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* Add `eval_type_backport`
        to handle union operator and builtin generic subscripting in older Pythons
        by [@alexmojaki](https://github.com/alexmojaki) in [#8209](https://github.com/pydantic/pydantic/pull/8209)*
        Add support for `dataclass` fields `init` by [@dmontagu](https://github.com/dmontagu)
        in [#8552](https://github.com/pydantic/pydantic/pull/8552)* Implement pickling
        for `ValidationError` by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1119](https://github.com/pydantic/pydantic-core/pull/1119)*
        Add unified tuple validator that can handle \"variadic\" tuples via PEP-646
        by [@dmontagu](https://github.com/dmontagu) in [pydantic/pydantic-core#865](https://github.com/pydantic/pydantic-core/pull/865)####
        Changes* Drop Python3.7 support by [@hramezani](https://github.com/hramezani)
        in [#7188](https://github.com/pydantic/pydantic/pull/7188)* Drop Python 3.7,
        and PyPy 3.7 and 3.8 by [@davidhewitt](https://github.com/davidhewitt) in
        [pydantic/pydantic-core#1129](https://github.com/pydantic/pydantic-core/pull/1129)*
        Use positional-only `self` in `BaseModel` constructor, so no field name can
        ever conflict with it by [@ariebovenberg](https://github.com/ariebovenberg)
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* Make `@validate_call`
        return a function instead of a custom descriptor - fixes binding issue with
        inheritance and adds `self/cls` argument to validation errors by [@alexmojaki](https://github.com/alexmojaki)
        in [#8268](https://github.com/pydantic/pydantic/pull/8268)* Exclude `BaseModel`
        docstring from JSON schema description by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8352](https://github.com/pydantic/pydantic/pull/8352)* Introducing `classproperty`
        decorator for `model_computed_fields` by [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        in [#8437](https://github.com/pydantic/pydantic/pull/8437)* Explicitly raise
        an error if field names clashes with types by [@Viicos](https://github.com/Viicos)
        in [#8243](https://github.com/pydantic/pydantic/pull/8243)* Use stricter serializer
        for unions of simple types by [@alexdrydew](https://github.com/alexdrydew)
        [pydantic/pydantic-core#1132](https://github.com/pydantic/pydantic-core/pull/1132)####
        Performance* Add Codspeed profiling Actions workflow  by [@lambertsbennett](https://github.com/lambertsbennett)
        in [#8054](https://github.com/pydantic/pydantic/pull/8054)* Improve `int`
        extraction by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/pydantic-core#1155](https://github.com/pydantic/pydantic-core/pull/1155)*
        Improve performance of recursion guard by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1156](https://github.com/pydantic/pydantic-core/pull/1156)*
        `dataclass` serialization speedups by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1162](https://github.com/pydantic/pydantic-core/pull/1162)*
        Avoid `HashMap` creation when looking up small JSON objects in `LazyIndexMaps`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [pydantic/jiter#55](https://github.com/pydantic/jiter/pull/55)*
        use hashbrown to speedup python string caching by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#51](https://github.com/pydantic/jiter/pull/51)* Replace
        `Peak` with more efficient `Peek` by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/jiter#48](https://github.com/pydantic/jiter/pull/48)#### Fixes*
        Move `getattr` warning in deprecated `BaseConfig` by [@tlambert03](https://github.com/tlambert03)
        in [#7183](https://github.com/pydantic/pydantic/pull/7183)* Only hash `model_fields`,
        not whole `__dict__` by [@alexmojaki](https://github.com/alexmojaki) in [#7786](https://github.com/pydantic/pydantic/pull/7786)*
        Fix mishandling of unions while freezing types in the `mypy` plugin by [@dmontagu](https://github.com/dmontagu)
        in [#7411](https://github.com/pydantic/pydantic/pull/7411)* Fix `mypy` error
        on untyped `ClassVar` by [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx)
        in [#8138](https://github.com/pydantic/pydantic/pull/8138)* Only compare pydantic
        fields in `BaseModel.__eq__` instead of whole `__dict__` by [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        in [#7825](https://github.com/pydantic/pydantic/pull/7825)* Update `strict`
        docstring in `model_validate` method. by [@LukeTonin](https://github.com/LukeTonin)
        in [#8223](https://github.com/pydantic/pydantic/pull/8223)* Fix overload position
        of `computed_field` by [@Viicos](https://github.com/Viicos) in [#8227](https://github.com/pydantic/pydantic/pull/8227)*
        Fix custom type type casting used in multiple attributes by [@ianhfc](https://github.com/ianhfc)
        in [#8066](https://github.com/pydantic/pydantic/pull/8066)* Fix issue not
        allowing `validate_call` decorator to be dynamically assigned to a class method
        by [@jusexton](https://github.com/jusexton) in [#8249](https://github.com/pydantic/pydantic/pull/8249)*
        Fix issue `unittest.mock` deprecation warnings  by [@ibleedicare](https://github.com/ibleedicare)
        in [#8262](https://github.com/pydantic/pydantic/pull/8262)* Added tests for
        the case `JsonValue` contains subclassed primitive values by [@jusexton](https://github.com/jusexton)
        in [#8286](https://github.com/pydantic/pydantic/pull/8286)* Fix `mypy` error
        on free before validator (classmethod) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8285](https://github.com/pydantic/pydantic/pull/8285)* Fix `to_snake`
        conversion by [@jevins09](https://github.com/jevins09) in [#8316](https://github.com/pydantic/pydantic/pull/8316)*
        Fix type annotation of `ModelMetaclass.__prepare__` by [@slanzmich](https://github.com/slanzmich)
        in [#8305](https://github.com/pydantic/pydantic/pull/8305)* Disallow `config`
        specification when initializing a `TypeAdapter` when the annotated type has
        config already by [@sydney-runkle](https://github.com/sydney-runkle) in [#8365](https://github.com/pydantic/pydantic/pull/8365)*
        Fix a naming issue with JSON schema for generics parametrized by recursive
        type aliases by [@dmontagu](https://github.com/dmontagu) in [#8389](https://github.com/pydantic/pydantic/pull/8389)*
        Fix type annotation in pydantic people script by [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        in [#8402](https://github.com/pydantic/pydantic/pull/8402)* Add support for
        field `alias` in `dataclass` signature by [@NeevCohen](https://github.com/NeevCohen)
        in [#8387](https://github.com/pydantic/pydantic/pull/8387)* Fix bug with schema
        generation with `Field(...)` in a forward ref by [@dmontagu](https://github.com/dmontagu)
        in [#8494](https://github.com/pydantic/pydantic/pull/8494)* Fix ordering of
        keys in `__dict__` with `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8500](https://github.com/pydantic/pydantic/pull/8500)* Fix module `path_type`
        creation when globals does not contain `__name__` by [@hramezani](https://github.com/hramezani)
        in [#8470](https://github.com/pydantic/pydantic/pull/8470)* Fix for namespace
        issue with dataclasses with `from __future__ import annotations` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8513](https://github.com/pydantic/pydantic/pull/8513)* Fix: make function
        validator types positional-only by [@pmmmwh](https://github.com/pmmmwh) in
        [#8479](https://github.com/pydantic/pydantic/pull/8479)* Fix usage of `@deprecated`
        by [@Viicos](https://github.com/Viicos) in [#8294](https://github.com/pydantic/pydantic/pull/8294)*
        Add more support for private attributes in `model_construct` call by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8525](https://github.com/pydantic/pydantic/pull/8525)* Use a stack for
        the types namespace by [@dmontagu](https://github.com/dmontagu) in [#8378](https://github.com/pydantic/pydantic/pull/8378)*
        Fix schema-building bug with `TypeAliasType` for types with refs by [@dmontagu](https://github.com/dmontagu)
        in [#8526](https://github.com/pydantic/pydantic/pull/8526)* Support `pydantic.Field(repr=False)`
        in dataclasses by [@tigeryy2](https://github.com/tigeryy2) in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        Override `dataclass_transform` behavior for `RootModel` by [@Viicos](https://github.com/Viicos)
        in [#8163](https://github.com/pydantic/pydantic/pull/8163)* Refactor signature
        generation for simplicity by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8572](https://github.com/pydantic/pydantic/pull/8572)* Fix ordering bug
        of PlainValidator annotation by [@Anvil](https://github.com/Anvil) in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        Fix `exclude_none` for json serialization of `computed_field`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1098](https://github.com/pydantic/pydantic-core/pull/1098)*
        Support yyyy-MM-DD string for datetimes by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1124](https://github.com/pydantic/pydantic-core/pull/1124)*
        Tweak ordering of definitions in generated schemas by [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        in [#8583](https://github.com/pydantic/pydantic/pull/8583)### New Contributors####
        `pydantic`* [@ekeew](https://github.com/ekeew) made their first contribution
        in [#6874](https://github.com/pydantic/pydantic/pull/6874)* [@lambertsbennett](https://github.com/lambertsbennett)
        made their first contribution in [#8054](https://github.com/pydantic/pydantic/pull/8054)*
        [@vincent-hachin-wmx](https://github.com/vincent-hachin-wmx) made their first
        contribution in [#8138](https://github.com/pydantic/pydantic/pull/8138)* [@QuentinSoubeyranAqemia](https://github.com/QuentinSoubeyranAqemia)
        made their first contribution in [#7825](https://github.com/pydantic/pydantic/pull/7825)*
        [@ariebovenberg](https://github.com/ariebovenberg) made their first contribution
        in [#8072](https://github.com/pydantic/pydantic/pull/8072)* [@LukeTonin](https://github.com/LukeTonin)
        made their first contribution in [#8223](https://github.com/pydantic/pydantic/pull/8223)*
        [@denisart](https://github.com/denisart) made their first contribution in
        [#8231](https://github.com/pydantic/pydantic/pull/8231)* [@ianhfc](https://github.com/ianhfc)
        made their first contribution in [#8066](https://github.com/pydantic/pydantic/pull/8066)*
        [@eonu](https://github.com/eonu) made their first contribution in [#8255](https://github.com/pydantic/pydantic/pull/8255)*
        [@amandahla](https://github.com/amandahla) made their first contribution in
        [#8263](https://github.com/pydantic/pydantic/pull/8263)* [@ibleedicare](https://github.com/ibleedicare)
        made their first contribution in [#8262](https://github.com/pydantic/pydantic/pull/8262)*
        [@jevins09](https://github.com/jevins09) made their first contribution in
        [#8316](https://github.com/pydantic/pydantic/pull/8316)* [@cuu508](https://github.com/cuu508)
        made their first contribution in [#8322](https://github.com/pydantic/pydantic/pull/8322)*
        [@slanzmich](https://github.com/slanzmich) made their first contribution in
        [#8305](https://github.com/pydantic/pydantic/pull/8305)* [@jensenbox](https://github.com/jensenbox)
        made their first contribution in [#8331](https://github.com/pydantic/pydantic/pull/8331)*
        [@szepeviktor](https://github.com/szepeviktor) made their first contribution
        in [#8356](https://github.com/pydantic/pydantic/pull/8356)* [@Elkiwa](https://github.com/Elkiwa)
        made their first contribution in [#8341](https://github.com/pydantic/pydantic/pull/8341)*
        [@parhamfh](https://github.com/parhamfh) made their first contribution in
        [#8395](https://github.com/pydantic/pydantic/pull/8395)* [@shenxiangzhuang](https://github.com/shenxiangzhuang)
        made their first contribution in [#8402](https://github.com/pydantic/pydantic/pull/8402)*
        [@NeevCohen](https://github.com/NeevCohen) made their first contribution in
        [#8387](https://github.com/pydantic/pydantic/pull/8387)* [@zby](https://github.com/zby)
        made their first contribution in [#8497](https://github.com/pydantic/pydantic/pull/8497)*
        [@patelnets](https://github.com/patelnets) made their first contribution in
        [#8491](https://github.com/pydantic/pydantic/pull/8491)* [@edwardwli](https://github.com/edwardwli)
        made their first contribution in [#8503](https://github.com/pydantic/pydantic/pull/8503)*
        [@luca-matei](https://github.com/luca-matei) made their first contribution
        in [#8507](https://github.com/pydantic/pydantic/pull/8507)* [@Jocelyn-Gas](https://github.com/Jocelyn-Gas)
        made their first contribution in [#8437](https://github.com/pydantic/pydantic/pull/8437)*
        [@bL34cHig0](https://github.com/bL34cHig0) made their first contribution in
        [#8501](https://github.com/pydantic/pydantic/pull/8501)* [@tigeryy2](https://github.com/tigeryy2)
        made their first contribution in [#8511](https://github.com/pydantic/pydantic/pull/8511)*
        [@geospackle](https://github.com/geospackle) made their first contribution
        in [#8537](https://github.com/pydantic/pydantic/pull/8537)* [@Anvil](https://github.com/Anvil)
        made their first contribution in [#8567](https://github.com/pydantic/pydantic/pull/8567)*
        [@hungtsetse](https://github.com/hungtsetse) made their first contribution
        in [#8546](https://github.com/pydantic/pydantic/pull/8546)* [@StrawHatDrag0n](https://github.com/StrawHatDrag0n)
        made their first contribution in [#8583](https://github.com/pydantic/pydantic/pull/8583)####
        `pydantic-core`* [@mariuswinger](https://github.com/mariuswinger) made their
        first contribution in [pydantic/pydantic-core#1087](https://github.com/pydantic/pydantic-core/pull/1087)*
        [@adamchainz](https://github.com/adamchainz) made their first contribution
        in [pydantic/pydantic-core#1090](https://github.com/pydantic/pydantic-core/pull/1090)*
        [@akx](https://github.com/akx) made their first contribution in [pydantic/pydantic-core#1123](https://github.com/pydantic/pydantic-core/pull/1123)##
        v2.6.0b1 (2024-01-19)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.6.0b1)
        for details.## v2.5.3 (2023-12-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.3)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.6#### Fixes* Fix
        memory leak with recursive definitions creating reference cycles by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1125](https://github.com/pydantic/pydantic-core/pull/1125)##
        v2.5.2 (2023-11-22)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.2)###
        What's Changed#### Packaging* uprev `pydantic-core` to 2.14.5#### New Features*
        Add `ConfigDict.ser_json_inf_nan` by [@davidhewitt](https://github.com/davidhewitt)
        in [#8159](https://github.com/pydantic/pydantic/pull/8159)#### Fixes* Fix
        validation of `Literal` from JSON keys when used as `dict` key by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1075](https://github.com/pydantic/pydantic-core/pull/1075)*
        Fix bug re `custom_init` on members of `Union` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1076](https://github.com/pydantic/pydantic-core/pull/1076)*
        Fix `JsonValue` `bool` serialization by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8190](https://github.com/pydantic/pydantic/pull/8159)* Fix handling of
        unhashable inputs with `Literal` in `Union`s by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1089](https://github.com/pydantic/pydantic-core/pull/1089)##
        v2.5.1 (2023-11-15)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.1)###
        What's Changed#### Packaging* uprev pydantic-core to 2.14.3 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8120](https://github.com/pydantic/pydantic/pull/8120)#### Fixes* Fix
        package description limit by [@dmontagu](https://github.com/dmontagu) in [#8097](https://github.com/pydantic/pydantic/pull/8097)*
        Fix `ValidateCallWrapper` error when creating a model which has a [@validate_call](https://github.com/validate_call)
        wrapped field annotation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#8110](https://github.com/pydantic/pydantic/pull/8110)## v2.5.0 (2023-11-13)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0)The code
        released in v2.5.0 is functionally identical to that of v2.5.0b1.### What's
        Changed#### Packaging* Update pydantic-core from 2.10.1 to 2.14.1, significant
        changes from these updates are described below, full changelog [here](https://github.com/pydantic/pydantic-core/compare/v2.10.1...v2.14.1)*
        Update to `pyright==1.1.335` by [@Viicos](https://github.com/Viicos) in [#8075](https://github.com/pydantic/pydantic/pull/8075)####
        New Features* Allow plugins to catch non `ValidationError` errors by [@adriangb](https://github.com/adriangb)
        in [#7806](https://github.com/pydantic/pydantic/pull/7806)* Support `__doc__`
        argument in `create_model()` by [@chris-spann](https://github.com/chris-spann)
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* Expose `regex_engine`
        flag - meaning you can use with the Rust or Python regex libraries in constraints
        by [@utkini](https://github.com/utkini) in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        Save return type generated from type annotation in `ComputedFieldInfo` by
        [@alexmojaki](https://github.com/alexmojaki) in [#7889](https://github.com/pydantic/pydantic/pull/7889)*
        Adopting `ruff` formatter by [@Luca-Blight](https://github.com/Luca-Blight)
        in [#7930](https://github.com/pydantic/pydantic/pull/7930)* Added `validation_error_cause`
        to config by [@zakstucke](https://github.com/zakstucke) in [#7626](https://github.com/pydantic/pydantic/pull/7626)*
        Make path of the item to validate available in plugin by [@hramezani](https://github.com/hramezani)
        in [#7861](https://github.com/pydantic/pydantic/pull/7861)* Add `CallableDiscriminator`
        and `Tag` by [@dmontagu](https://github.com/dmontagu) in [#7983](https://github.com/pydantic/pydantic/pull/7983)
        \ * `CallableDiscriminator` renamed to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Make union case
        tags affect union error messages by [@dmontagu](https://github.com/dmontagu)
        in [#8001](https://github.com/pydantic/pydantic/pull/8001)* Add `examples`
        and `json_schema_extra` to `@computed_field` by [@alexmojaki](https://github.com/alexmojaki)
        in [#8013](https://github.com/pydantic/pydantic/pull/8013)* Add `JsonValue`
        type by [@dmontagu](https://github.com/dmontagu) in [#7998](https://github.com/pydantic/pydantic/pull/7998)*
        Allow `str` as argument to `Discriminator` by [@dmontagu](https://github.com/dmontagu)
        in [#8047](https://github.com/pydantic/pydantic/pull/8047)* Add `SchemaSerializer.__reduce__`
        method to enable pickle serialization by [@edoakes](https://github.com/edoakes)
        in [pydantic/pydantic-core#1006](https://github.com/pydantic/pydantic-core/pull/1006)####
        Changes* **Significant Change:** replace `ultra_strict` with new smart union
        implementation, the way unions are validated has changed significantly to
        improve performance and correctness, we have worked hard to absolutely minimise
        the number of cases where behaviour has changed, see the PR for details -
        by [@davidhewitt](https://github.com/davidhewitt) in [pydantic/pydantic-core#867](https://github.com/pydantic/pydantic-core/pull/867)*
        Add support for instance method reassignment when `extra='allow'` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7683](https://github.com/pydantic/pydantic/pull/7683)* Support JSON schema
        generation for `Enum` types with no cases by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7927](https://github.com/pydantic/pydantic/pull/7927)* Warn if a class
        inherits from `Generic` before `BaseModel` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7891](https://github.com/pydantic/pydantic/pull/7891)#### Performance*
        New custom JSON parser, `jiter` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#974](https://github.com/pydantic/pydantic-core/pull/974)*
        PGO build for MacOS M1 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [pydantic/pydantic-core#1063](https://github.com/pydantic/pydantic-core/pull/1063)*
        Use `__getattr__` for all package imports, improve import time by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7947](https://github.com/pydantic/pydantic/pull/7947)#### Fixes* Fix
        `mypy` issue with subclasses of `RootModel` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7677](https://github.com/pydantic/pydantic/pull/7677)* Properly rebuild
        the `FieldInfo` when a forward ref gets evaluated by [@dmontagu](https://github.com/dmontagu)
        in [#7698](https://github.com/pydantic/pydantic/pull/7698)* Fix failure to
        load `SecretStr` from JSON (regression in v2.4) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7729](https://github.com/pydantic/pydantic/pull/7729)* Fix `defer_build`
        behavior with `TypeAdapter` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7736](https://github.com/pydantic/pydantic/pull/7736)* Improve compatibility
        with legacy `mypy` versions by [@dmontagu](https://github.com/dmontagu) in
        [#7742](https://github.com/pydantic/pydantic/pull/7742)* Fix: update `TypeVar`
        handling when default is not set by [@pmmmwh](https://github.com/pmmmwh) in
        [#7719](https://github.com/pydantic/pydantic/pull/7719)* Support specification
        of `strict` on `Enum` type fields by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7761](https://github.com/pydantic/pydantic/pull/7761)* Wrap `weakref.ref`
        instead of subclassing to fix `cloudpickle` serialization by [@edoakes](https://github.com/edoakes)
        in [#7780](https://github.com/pydantic/pydantic/pull/7780)* Keep values of
        private attributes set within `model_post_init` in subclasses by [@alexmojaki](https://github.com/alexmojaki)
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* Add more specific
        type for non-callable `json_schema_extra` by [@alexmojaki](https://github.com/alexmojaki)
        in [#7803](https://github.com/pydantic/pydantic/pull/7803)* Raise an error
        when deleting frozen (model) fields by [@alexmojaki](https://github.com/alexmojaki)
        in [#7800](https://github.com/pydantic/pydantic/pull/7800)* Fix schema sorting
        bug with default values by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7817](https://github.com/pydantic/pydantic/pull/7817)* Use generated
        alias for aliases that are not specified otherwise by [@alexmojaki](https://github.com/alexmojaki)
        in [#7802](https://github.com/pydantic/pydantic/pull/7802)* Support `strict`
        specification for `UUID` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7865](https://github.com/pydantic/pydantic/pull/7865)* JSON schema: fix
        extra parameter handling by [@me-and](https://github.com/me-and) in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        Fix: support `pydantic.Field(kw_only=True)` with inherited dataclasses by
        [@PrettyWood](https://github.com/PrettyWood) in [#7827](https://github.com/pydantic/pydantic/pull/7827)*
        Support `validate_call` decorator for methods in classes with `__slots__`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [#7883](https://github.com/pydantic/pydantic/pull/7883)*
        Fix pydantic dataclass problem with `dataclasses.field` default by [@hramezani](https://github.com/hramezani)
        in [#7898](https://github.com/pydantic/pydantic/pull/7898)* Fix schema generation
        for generics with union type bounds by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7899](https://github.com/pydantic/pydantic/pull/7899)* Fix version for
        `importlib_metadata` on python 3.7 by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7904](https://github.com/pydantic/pydantic/pull/7904)* Support `|` operator
        (Union) in PydanticRecursiveRef by [@alexmojaki](https://github.com/alexmojaki)
        in [#7892](https://github.com/pydantic/pydantic/pull/7892)* Fix `display_as_type`
        for `TypeAliasType` in python 3.12 by [@dmontagu](https://github.com/dmontagu)
        in [#7929](https://github.com/pydantic/pydantic/pull/7929)* Add support for
        `NotRequired` generics in `TypedDict` by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7932](https://github.com/pydantic/pydantic/pull/7932)* Make generic `TypeAliasType`
        specifications produce different schema definitions by [@alexdrydew](https://github.com/alexdrydew)
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* Added fix for
        signature of inherited dataclass by [@howsunjow](https://github.com/howsunjow)
        in [#7925](https://github.com/pydantic/pydantic/pull/7925)* Make the model
        name generation more robust in JSON schema by [@joakimnordling](https://github.com/joakimnordling)
        in [#7881](https://github.com/pydantic/pydantic/pull/7881)* Fix plurals in
        validation error messages (in tests) by [@Iipin](https://github.com/Iipin)
        in [#7972](https://github.com/pydantic/pydantic/pull/7972)* `PrivateAttr`
        is passed from `Annotated` default position by [@tabassco](https://github.com/tabassco)
        in [#8004](https://github.com/pydantic/pydantic/pull/8004)* Don't decode bytes
        (which may not be UTF8) when displaying SecretBytes by [@alexmojaki](https://github.com/alexmojaki)
        in [#8012](https://github.com/pydantic/pydantic/pull/8012)* Use `classmethod`
        instead of `classmethod[Any, Any, Any]` by [@Mr-Pepe](https://github.com/Mr-Pepe)
        in [#7979](https://github.com/pydantic/pydantic/pull/7979)* Clearer error
        on invalid Plugin by [@samuelcolvin](https://github.com/samuelcolvin) in [#8023](https://github.com/pydantic/pydantic/pull/8023)*
        Correct pydantic dataclasses import by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#8027](https://github.com/pydantic/pydantic/pull/8027)* Fix misbehavior
        for models referencing redefined type aliases by [@dmontagu](https://github.com/dmontagu)
        in [#8050](https://github.com/pydantic/pydantic/pull/8050)* Fix `Optional`
        field with `validate_default` only performing one field validation by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1002](https://github.com/pydantic/pydantic-core/pull/1002)*
        Fix `definition-ref` bug with `Dict` keys by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1014](https://github.com/pydantic/pydantic-core/pull/1014)*
        Fix bug allowing validation of `bool` types with `coerce_numbers_to_str=True`
        by [@sydney-runkle](https://github.com/sydney-runkle) in [pydantic/pydantic-core#1017](https://github.com/pydantic/pydantic-core/pull/1017)*
        Don't accept `NaN` in float and decimal constraints by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1037](https://github.com/pydantic/pydantic-core/pull/1037)*
        Add `lax_str` and `lax_int` support for enum values not inherited from str/int
        by [@michaelhly](https://github.com/michaelhly) in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)*
        Support subclasses in lists in `Union` of `List` types by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1039](https://github.com/pydantic/pydantic-core/pull/1039)*
        Allow validation against `max_digits` and `decimals` to pass if normalized
        or non-normalized input is valid by [@sydney-runkle](https://github.com/sydney-runkle)
        in [pydantic/pydantic-core#1049](https://github.com/pydantic/pydantic-core/pull/1049)*
        Fix: proper pluralization in `ValidationError` messages by [@Iipin](https://github.com/Iipin)
        in [pydantic/pydantic-core#1050](https://github.com/pydantic/pydantic-core/pull/1050)*
        Disallow the string `'-'` as `datetime` input by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/speedate#52](https://github.com/pydantic/speedate/pull/52) &
        [pydantic/pydantic-core#1060](https://github.com/pydantic/pydantic-core/pull/1060)*
        Fix: NaN and Inf float serialization by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1062](https://github.com/pydantic/pydantic-core/pull/1062)*
        Restore manylinux-compatible PGO builds by [@davidhewitt](https://github.com/davidhewitt)
        in [pydantic/pydantic-core#1068](https://github.com/pydantic/pydantic-core/pull/1068)###
        New Contributors#### `pydantic`* [@schneebuzz](https://github.com/schneebuzz)
        made their first contribution in [#7699](https://github.com/pydantic/pydantic/pull/7699)*
        [@edoakes](https://github.com/edoakes) made their first contribution in [#7780](https://github.com/pydantic/pydantic/pull/7780)*
        [@alexmojaki](https://github.com/alexmojaki) made their first contribution
        in [#7775](https://github.com/pydantic/pydantic/pull/7775)* [@NickG123](https://github.com/NickG123)
        made their first contribution in [#7751](https://github.com/pydantic/pydantic/pull/7751)*
        [@gowthamgts](https://github.com/gowthamgts) made their first contribution
        in [#7830](https://github.com/pydantic/pydantic/pull/7830)* [@jamesbraza](https://github.com/jamesbraza)
        made their first contribution in [#7848](https://github.com/pydantic/pydantic/pull/7848)*
        [@laundmo](https://github.com/laundmo) made their first contribution in [#7850](https://github.com/pydantic/pydantic/pull/7850)*
        [@rahmatnazali](https://github.com/rahmatnazali) made their first contribution
        in [#7870](https://github.com/pydantic/pydantic/pull/7870)* [@waterfountain1996](https://github.com/waterfountain1996)
        made their first contribution in [#7878](https://github.com/pydantic/pydantic/pull/7878)*
        [@chris-spann](https://github.com/chris-spann) made their first contribution
        in [#7863](https://github.com/pydantic/pydantic/pull/7863)* [@me-and](https://github.com/me-and)
        made their first contribution in [#7810](https://github.com/pydantic/pydantic/pull/7810)*
        [@utkini](https://github.com/utkini) made their first contribution in [#7768](https://github.com/pydantic/pydantic/pull/7768)*
        [@bn-l](https://github.com/bn-l) made their first contribution in [#7744](https://github.com/pydantic/pydantic/pull/7744)*
        [@alexdrydew](https://github.com/alexdrydew) made their first contribution
        in [#7893](https://github.com/pydantic/pydantic/pull/7893)* [@Luca-Blight](https://github.com/Luca-Blight)
        made their first contribution in [#7930](https://github.com/pydantic/pydantic/pull/7930)*
        [@howsunjow](https://github.com/howsunjow) made their first contribution in
        [#7925](https://github.com/pydantic/pydantic/pull/7925)* [@joakimnordling](https://github.com/joakimnordling)
        made their first contribution in [#7881](https://github.com/pydantic/pydantic/pull/7881)*
        [@icfly2](https://github.com/icfly2) made their first contribution in [#7976](https://github.com/pydantic/pydantic/pull/7976)*
        [@Yummy-Yums](https://github.com/Yummy-Yums) made their first contribution
        in [#8003](https://github.com/pydantic/pydantic/pull/8003)* [@Iipin](https://github.com/Iipin)
        made their first contribution in [#7972](https://github.com/pydantic/pydantic/pull/7972)*
        [@tabassco](https://github.com/tabassco) made their first contribution in
        [#8004](https://github.com/pydantic/pydantic/pull/8004)* [@Mr-Pepe](https://github.com/Mr-Pepe)
        made their first contribution in [#7979](https://github.com/pydantic/pydantic/pull/7979)*
        [@0x00cl](https://github.com/0x00cl) made their first contribution in [#8010](https://github.com/pydantic/pydantic/pull/8010)*
        [@barraponto](https://github.com/barraponto) made their first contribution
        in [#8032](https://github.com/pydantic/pydantic/pull/8032)#### `pydantic-core`*
        [@sisp](https://github.com/sisp) made their first contribution in [pydantic/pydantic-core#995](https://github.com/pydantic/pydantic-core/pull/995)*
        [@michaelhly](https://github.com/michaelhly) made their first contribution
        in [pydantic/pydantic-core#1015](https://github.com/pydantic/pydantic-core/pull/1015)##
        v2.5.0b1 (2023-11-09)Pre-release, see [the GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.5.0b1)
        for details.## v2.4.2 (2023-09-27)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.2)###
        What's Changed#### Fixes* Fix bug with JSON schema for sequence of discriminated
        union by [@dmontagu](https://github.com/dmontagu) in [#7647](https://github.com/pydantic/pydantic/pull/7647)*
        Fix schema references in discriminated unions by [@adriangb](https://github.com/adriangb)
        in [#7646](https://github.com/pydantic/pydantic/pull/7646)* Fix json schema
        generation for recursive models by [@adriangb](https://github.com/adriangb)
        in [#7653](https://github.com/pydantic/pydantic/pull/7653)* Fix `models_json_schema`
        for generic models by [@adriangb](https://github.com/adriangb) in [#7654](https://github.com/pydantic/pydantic/pull/7654)*
        Fix xfailed test for generic model signatures by [@adriangb](https://github.com/adriangb)
        in [#7658](https://github.com/pydantic/pydantic/pull/7658)### New Contributors*
        [@austinorr](https://github.com/austinorr) made their first contribution in
        [#7657](https://github.com/pydantic/pydantic/pull/7657)* [@peterHoburg](https://github.com/peterHoburg)
        made their first contribution in [#7670](https://github.com/pydantic/pydantic/pull/7670)##
        v2.4.1 (2023-09-26)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.4.1)###
        What's Changed#### Packaging* Update pydantic-core to 2.10.1 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7633](https://github.com/pydantic/pydantic/pull/7633)#### Fixes* Serialize
        unsubstituted type vars as `Any` by [@adriangb](https://github.com/adriangb)
        in [#7606](https://github.com/pydantic/pydantic/pull/7606)* Remove schema
        building caches by [@adriangb](https://github.com/adriangb) in [#7624](https://github.com/pydantic/pydantic/pull/7624)*
        Fix an issue where JSON schema extras weren't JSON encoded by [@dmontagu](https://github.com/dmontagu)
        in [#7625](https://github.com/pydantic/pydantic/pull/7625)## v2.4.0 (2023-09-22)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.4.0)### What's
        Changed#### Packaging* Update pydantic-core to 2.10.0 by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7542](https://github.com/pydantic/pydantic/pull/7542)#### New Features*
        Add `Base64Url` types by [@dmontagu](https://github.com/dmontagu) in [#7286](https://github.com/pydantic/pydantic/pull/7286)*
        Implement optional `number` to `str` coercion by [@lig](https://github.com/lig)
        in [#7508](https://github.com/pydantic/pydantic/pull/7508)* Allow access to
        `field_name` and `data` in all validators if there is data and a field name
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7542](https://github.com/pydantic/pydantic/pull/7542)*
        Add `BaseModel.model_validate_strings` and `TypeAdapter.validate_strings`
        by [@hramezani](https://github.com/hramezani) in [#7552](https://github.com/pydantic/pydantic/pull/7552)*
        Add Pydantic `plugins` experimental implementation by [@lig](https://github.com/lig)
        [@samuelcolvin](https://github.com/samuelcolvin) and [@Kludex](https://github.com/Kludex)
        in [#6820](https://github.com/pydantic/pydantic/pull/6820)#### Changes* Do
        not override `model_post_init` in subclass with private attrs by [@Viicos](https://github.com/Viicos)
        in [#7302](https://github.com/pydantic/pydantic/pull/7302)* Make fields with
        defaults not required in the serialization schema by default by [@dmontagu](https://github.com/dmontagu)
        in [#7275](https://github.com/pydantic/pydantic/pull/7275)* Mark `Extra` as
        deprecated by [@disrupted](https://github.com/disrupted) in [#7299](https://github.com/pydantic/pydantic/pull/7299)*
        Make `EncodedStr` a dataclass by [@Kludex](https://github.com/Kludex) in [#7396](https://github.com/pydantic/pydantic/pull/7396)*
        Move `annotated_handlers` to be public by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7569](https://github.com/pydantic/pydantic/pull/7569)#### Performance*
        Simplify flattening and inlining of `CoreSchema` by [@adriangb](https://github.com/adriangb)
        in [#7523](https://github.com/pydantic/pydantic/pull/7523)* Remove unused
        copies in `CoreSchema` walking by [@adriangb](https://github.com/adriangb)
        in [#7528](https://github.com/pydantic/pydantic/pull/7528)* Add caches for
        collecting definitions and invalid schemas from a CoreSchema by [@adriangb](https://github.com/adriangb)
        in [#7527](https://github.com/pydantic/pydantic/pull/7527)* Eagerly resolve
        discriminated unions and cache cases where we can't by [@adriangb](https://github.com/adriangb)
        in [#7529](https://github.com/pydantic/pydantic/pull/7529)* Replace `dict.get`
        and `dict.setdefault` with more verbose versions in `CoreSchema` building
        hot paths by [@adriangb](https://github.com/adriangb) in [#7536](https://github.com/pydantic/pydantic/pull/7536)*
        Cache invalid `CoreSchema` discovery by [@adriangb](https://github.com/adriangb)
        in [#7535](https://github.com/pydantic/pydantic/pull/7535)* Allow disabling
        `CoreSchema` validation for faster startup times by [@adriangb](https://github.com/adriangb)
        in [#7565](https://github.com/pydantic/pydantic/pull/7565)#### Fixes* Fix
        config detection for `TypedDict` from grandparent classes by [@dmontagu](https://github.com/dmontagu)
        in [#7272](https://github.com/pydantic/pydantic/pull/7272)* Fix hash function
        generation for frozen models with unusual MRO by [@dmontagu](https://github.com/dmontagu)
        in [#7274](https://github.com/pydantic/pydantic/pull/7274)* Make `strict`
        config overridable in field for Path by [@hramezani](https://github.com/hramezani)
        in [#7281](https://github.com/pydantic/pydantic/pull/7281)* Use `ser_json_<timedelta|bytes>`
        on default in `GenerateJsonSchema` by [@Kludex](https://github.com/Kludex)
        in [#7269](https://github.com/pydantic/pydantic/pull/7269)* Adding a check
        that alias is validated as an identifier for Python by [@andree0](https://github.com/andree0)
        in [#7319](https://github.com/pydantic/pydantic/pull/7319)* Raise an error
        when computed field overrides field by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7346](https://github.com/pydantic/pydantic/pull/7346)* Fix applying `SkipValidation`
        to referenced schemas by [@adriangb](https://github.com/adriangb) in [#7381](https://github.com/pydantic/pydantic/pull/7381)*
        Enforce behavior of private attributes having double leading underscore by
        [@lig](https://github.com/lig) in [#7265](https://github.com/pydantic/pydantic/pull/7265)*
        Standardize `__get_pydantic_core_schema__` signature by [@hramezani](https://github.com/hramezani)
        in [#7415](https://github.com/pydantic/pydantic/pull/7415)* Fix generic dataclass
        fields mutation bug (when using `TypeAdapter`) by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7435](https://github.com/pydantic/pydantic/pull/7435)* Fix `TypeError`
        on `model_validator` in `wrap` mode by [@pmmmwh](https://github.com/pmmmwh)
        in [#7496](https://github.com/pydantic/pydantic/pull/7496)* Improve enum error
        message by [@hramezani](https://github.com/hramezani) in [#7506](https://github.com/pydantic/pydantic/pull/7506)*
        Make `repr` work for instances that failed initialization when handling `ValidationError`s
        by [@dmontagu](https://github.com/dmontagu) in [#7439](https://github.com/pydantic/pydantic/pull/7439)*
        Fixed a regular expression denial of service issue by limiting whitespaces
        by [@prodigysml](https://github.com/prodigysml) in [#7360](https://github.com/pydantic/pydantic/pull/7360)*
        Fix handling of `UUID` values having `UUID.version=None` by [@lig](https://github.com/lig)
        in [#7566](https://github.com/pydantic/pydantic/pull/7566)* Fix `__iter__`
        returning private `cached_property` info by [@sydney-runkle](https://github.com/sydney-runkle)
        in [#7570](https://github.com/pydantic/pydantic/pull/7570)* Improvements to
        version info message by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#7594](https://github.com/pydantic/pydantic/pull/7594)### New Contributors*
        [@15498th](https://github.com/15498th) made their first contribution in [#7238](https://github.com/pydantic/pydantic/pull/7238)*
        [@GabrielCappelli](https://github.com/GabrielCappelli) made their first contribution
        in [#7213](https://github.com/pydantic/pydantic/pull/7213)* [@tobni](https://github.com/tobni)
        made their first contribution in [#7184](https://github.com/pydantic/pydantic/pull/7184)*
        [@redruin1](https://github.com/redruin1) made their first contribution in
        [#7282](https://github.com/pydantic/pydantic/pull/7282)* [@FacerAin](https://github.com/FacerAin)
        made their first contribution in [#7288](https://github.com/pydantic/pydantic/pull/7288)*
        [@acdha](https://github.com/acdha) made their first contribution in [#7297](https://github.com/pydantic/pydantic/pull/7297)*
        [@andree0](https://github.com/andree0) made their first contribution in [#7319](https://github.com/pydantic/pydantic/pull/7319)*
        [@gordonhart](https://github.com/gordonhart) made their first contribution
        in [#7375](https://github.com/pydantic/pydantic/pull/7375)* [@pmmmwh](https://github.com/pmmmwh)
        made their first contribution in [#7496](https://github.com/pydantic/pydantic/pull/7496)*
        [@disrupted](https://github.com/disrupted) made their first contribution in
        [#7299](https://github.com/pydantic/pydantic/pull/7299)* [@prodigysml](https://github.com/prodigysml)
        made their first contribution in [#7360](https://github.com/pydantic/pydantic/pull/7360)##
        v2.3.0 (2023-08-23)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.3.0)*
        \U0001F525 Remove orphaned changes file from repo by [@lig](https://github.com/lig)
        in [#7168](https://github.com/pydantic/pydantic/pull/7168)* Add copy button
        on documentation by [@Kludex](https://github.com/Kludex) in [#7190](https://github.com/pydantic/pydantic/pull/7190)*
        Fix docs on JSON type by [@Kludex](https://github.com/Kludex) in [#7189](https://github.com/pydantic/pydantic/pull/7189)*
        Update mypy 1.5.0 to 1.5.1 in CI by [@hramezani](https://github.com/hramezani)
        in [#7191](https://github.com/pydantic/pydantic/pull/7191)* fix download links
        badge by [@samuelcolvin](https://github.com/samuelcolvin) in [#7200](https://github.com/pydantic/pydantic/pull/7200)*
        add 2.2.1 to changelog by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7212](https://github.com/pydantic/pydantic/pull/7212)* Make ModelWrapValidator
        protocols generic by [@dmontagu](https://github.com/dmontagu) in [#7154](https://github.com/pydantic/pydantic/pull/7154)*
        Correct `Field(..., exclude: bool)` docs by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7214](https://github.com/pydantic/pydantic/pull/7214)* Make shadowing
        attributes a warning instead of an error by [@adriangb](https://github.com/adriangb)
        in [#7193](https://github.com/pydantic/pydantic/pull/7193)* Document `Base64Str`
        and `Base64Bytes` by [@Kludex](https://github.com/Kludex) in [#7192](https://github.com/pydantic/pydantic/pull/7192)*
        Fix `config.defer_build` for serialization first cases by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7024](https://github.com/pydantic/pydantic/pull/7024)* clean Model docstrings
        in JSON Schema by [@samuelcolvin](https://github.com/samuelcolvin) in [#7210](https://github.com/pydantic/pydantic/pull/7210)*
        fix [#7228](https://github.com/pydantic/pydantic/pull/7228) (typo): docs in
        `validators.md` to correct `validate_default` kwarg by [@lmmx](https://github.com/lmmx)
        in [#7229](https://github.com/pydantic/pydantic/pull/7229)* \u2705 Implement
        `tzinfo.fromutc` method for `TzInfo` in `pydantic-core` by [@lig](https://github.com/lig)
        in [#7019](https://github.com/pydantic/pydantic/pull/7019)* Support `__get_validators__`
        by [@hramezani](https://github.com/hramezani) in [#7197](https://github.com/pydantic/pydantic/pull/7197)##
        v2.2.1 (2023-08-18)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.2.1)*
        Make `xfail`ing test for root model extra stop `xfail`ing by [@dmontagu](https://github.com/dmontagu)
        in [#6937](https://github.com/pydantic/pydantic/pull/6937)* Optimize recursion
        detection by stopping on the second visit for the same object by [@mciucu](https://github.com/mciucu)
        in [#7160](https://github.com/pydantic/pydantic/pull/7160)* fix link in docs
        by [@tlambert03](https://github.com/tlambert03) in [#7166](https://github.com/pydantic/pydantic/pull/7166)*
        Replace MiMalloc w/ default allocator by [@adriangb](https://github.com/adriangb)
        in [pydantic/pydantic-core#900](https://github.com/pydantic/pydantic-core/pull/900)*
        Bump pydantic-core to 2.6.1 and prepare 2.2.1 release by [@adriangb](https://github.com/adriangb)
        in [#7176](https://github.com/pydantic/pydantic/pull/7176)## v2.2.0 (2023-08-17)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.2.0)* Split
        \"pipx install\" setup command into two commands on the documentation site
        by [@nomadmtb](https://github.com/nomadmtb) in [#6869](https://github.com/pydantic/pydantic/pull/6869)*
        Deprecate `Field.include` by [@hramezani](https://github.com/hramezani) in
        [#6852](https://github.com/pydantic/pydantic/pull/6852)* Fix typo in default
        factory error msg by [@hramezani](https://github.com/hramezani) in [#6880](https://github.com/pydantic/pydantic/pull/6880)*
        Simplify handling of typing.Annotated in GenerateSchema by [@dmontagu](https://github.com/dmontagu)
        in [#6887](https://github.com/pydantic/pydantic/pull/6887)* Re-enable fastapi
        tests in CI by [@dmontagu](https://github.com/dmontagu) in [#6883](https://github.com/pydantic/pydantic/pull/6883)*
        Make it harder to hit collisions with json schema defrefs by [@dmontagu](https://github.com/dmontagu)
        in [#6566](https://github.com/pydantic/pydantic/pull/6566)* Cleaner error
        for invalid input to `Path` fields by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6903](https://github.com/pydantic/pydantic/pull/6903)* :memo: support
        Coordinate Type by [@yezz123](https://github.com/yezz123) in [#6906](https://github.com/pydantic/pydantic/pull/6906)*
        Fix `ForwardRef` wrapper for py 3.10.0 (shim until bpo-45166) by [@randomir](https://github.com/randomir)
        in [#6919](https://github.com/pydantic/pydantic/pull/6919)* Fix misbehavior
        related to copying of RootModel by [@dmontagu](https://github.com/dmontagu)
        in [#6918](https://github.com/pydantic/pydantic/pull/6918)* Fix issue with
        recursion error caused by ParamSpec by [@dmontagu](https://github.com/dmontagu)
        in [#6923](https://github.com/pydantic/pydantic/pull/6923)* Add section about
        Constrained classes to the Migration Guide by [@Kludex](https://github.com/Kludex)
        in [#6924](https://github.com/pydantic/pydantic/pull/6924)* Use `main` branch
        for badge links by [@Viicos](https://github.com/Viicos) in [#6925](https://github.com/pydantic/pydantic/pull/6925)*
        Add test for v1/v2 Annotated discrepancy by [@carlbordum](https://github.com/carlbordum)
        in [#6926](https://github.com/pydantic/pydantic/pull/6926)* Make the v1 mypy
        plugin work with both v1 and v2 by [@dmontagu](https://github.com/dmontagu)
        in [#6921](https://github.com/pydantic/pydantic/pull/6921)* Fix issue where
        generic models couldn't be parametrized with BaseModel by [@dmontagu](https://github.com/dmontagu)
        in [#6933](https://github.com/pydantic/pydantic/pull/6933)* Remove xfail for
        discriminated union with alias by [@dmontagu](https://github.com/dmontagu)
        in [#6938](https://github.com/pydantic/pydantic/pull/6938)* add field_serializer
        to computed_field by [@andresliszt](https://github.com/andresliszt) in [#6965](https://github.com/pydantic/pydantic/pull/6965)*
        Use union_schema with Type[Union[...]] by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#6952](https://github.com/pydantic/pydantic/pull/6952)* Fix inherited
        typeddict attributes / config by [@adriangb](https://github.com/adriangb)
        in [#6981](https://github.com/pydantic/pydantic/pull/6981)* fix dataclass
        annotated before validator called twice by [@davidhewitt](https://github.com/davidhewitt)
        in [#6998](https://github.com/pydantic/pydantic/pull/6998)* Update test-fastapi
        deselected tests by [@hramezani](https://github.com/hramezani) in [#7014](https://github.com/pydantic/pydantic/pull/7014)*
        Fix validator doc format by [@hramezani](https://github.com/hramezani) in
        [#7015](https://github.com/pydantic/pydantic/pull/7015)* Fix typo in docstring
        of model_json_schema by [@AdamVinch-Federated](https://github.com/AdamVinch-Federated)
        in [#7032](https://github.com/pydantic/pydantic/pull/7032)* remove unused
        \"type ignores\" with pyright by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#7026](https://github.com/pydantic/pydantic/pull/7026)* Add benchmark
        representing FastAPI startup time by [@adriangb](https://github.com/adriangb)
        in [#7030](https://github.com/pydantic/pydantic/pull/7030)* Fix json_encoders
        for Enum subclasses by [@adriangb](https://github.com/adriangb) in [#7029](https://github.com/pydantic/pydantic/pull/7029)*
        Update docstring of `ser_json_bytes` regarding base64 encoding by [@Viicos](https://github.com/Viicos)
        in [#7052](https://github.com/pydantic/pydantic/pull/7052)* Allow `@validate_call`
        to work on async methods by [@adriangb](https://github.com/adriangb) in [#7046](https://github.com/pydantic/pydantic/pull/7046)*
        Fix: mypy error with `Settings` and `SettingsConfigDict` by [@JeanArhancet](https://github.com/JeanArhancet)
        in [#7002](https://github.com/pydantic/pydantic/pull/7002)* Fix some typos
        (repeated words and it's/its) by [@eumiro](https://github.com/eumiro) in [#7063](https://github.com/pydantic/pydantic/pull/7063)*
        Fix the typo in docstring by [@harunyasar](https://github.com/harunyasar)
        in [#7062](https://github.com/pydantic/pydantic/pull/7062)* Docs: Fix broken
        URL in the pydantic-settings package recommendation by [@swetjen](https://github.com/swetjen)
        in [#6995](https://github.com/pydantic/pydantic/pull/6995)* Handle constraints
        being applied to schemas that don't accept it by [@adriangb](https://github.com/adriangb)
        in [#6951](https://github.com/pydantic/pydantic/pull/6951)* Replace almost_equal_floats
        with math.isclose by [@eumiro](https://github.com/eumiro) in [#7082](https://github.com/pydantic/pydantic/pull/7082)*
        bump pydantic-core to 2.5.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#7077](https://github.com/pydantic/pydantic/pull/7077)* Add `short_version`
        and use it in links by [@hramezani](https://github.com/hramezani) in [#7115](https://github.com/pydantic/pydantic/pull/7115)*
        \U0001F4DD Add usage link to `RootModel` by [@Kludex](https://github.com/Kludex)
        in [#7113](https://github.com/pydantic/pydantic/pull/7113)* Revert \"Fix default
        port for mongosrv DSNs (#6827)\" by [@Kludex](https://github.com/Kludex) in
        [#7116](https://github.com/pydantic/pydantic/pull/7116)* Clarify validate_default
        and _Unset handling in usage docs and migration guide by [@benbenbang](https://github.com/benbenbang)
        in [#6950](https://github.com/pydantic/pydantic/pull/6950)* Tweak documentation
        of `Field.exclude` by [@Viicos](https://github.com/Viicos) in [#7086](https://github.com/pydantic/pydantic/pull/7086)*
        Do not require `validate_assignment` to use `Field.frozen` by [@Viicos](https://github.com/Viicos)
        in [#7103](https://github.com/pydantic/pydantic/pull/7103)* tweaks to `_core_utils`
        by [@samuelcolvin](https://github.com/samuelcolvin) in [#7040](https://github.com/pydantic/pydantic/pull/7040)*
        Make DefaultDict working with set by [@hramezani](https://github.com/hramezani)
        in [#7126](https://github.com/pydantic/pydantic/pull/7126)* Don't always require
        typing.Generic as a base for partially parametrized models by [@dmontagu](https://github.com/dmontagu)
        in [#7119](https://github.com/pydantic/pydantic/pull/7119)* Fix issue with
        JSON schema incorrectly using parent class core schema by [@dmontagu](https://github.com/dmontagu)
        in [#7020](https://github.com/pydantic/pydantic/pull/7020)* Fix xfailed test
        related to TypedDict and alias_generator by [@dmontagu](https://github.com/dmontagu)
        in [#6940](https://github.com/pydantic/pydantic/pull/6940)* Improve error
        message for NameEmail by [@dmontagu](https://github.com/dmontagu) in [#6939](https://github.com/pydantic/pydantic/pull/6939)*
        Fix generic computed fields by [@dmontagu](https://github.com/dmontagu) in
        [#6988](https://github.com/pydantic/pydantic/pull/6988)* Reflect namedtuple
        default values during validation by [@dmontagu](https://github.com/dmontagu)
        in [#7144](https://github.com/pydantic/pydantic/pull/7144)* Update dependencies,
        fix pydantic-core usage, fix CI issues by [@dmontagu](https://github.com/dmontagu)
        in [#7150](https://github.com/pydantic/pydantic/pull/7150)* Add mypy 1.5.0
        by [@hramezani](https://github.com/hramezani) in [#7118](https://github.com/pydantic/pydantic/pull/7118)*
        Handle non-json native enum values by [@adriangb](https://github.com/adriangb)
        in [#7056](https://github.com/pydantic/pydantic/pull/7056)* document `round_trip`
        in Json type documentation  by [@jc-louis](https://github.com/jc-louis) in
        [#7137](https://github.com/pydantic/pydantic/pull/7137)* Relax signature checks
        to better support builtins and C extension functions as validators by [@adriangb](https://github.com/adriangb)
        in [#7101](https://github.com/pydantic/pydantic/pull/7101)* add union_mode='left_to_right'
        by [@davidhewitt](https://github.com/davidhewitt) in [#7151](https://github.com/pydantic/pydantic/pull/7151)*
        Include an error message hint for inherited ordering by [@yvalencia91](https://github.com/yvalencia91)
        in [#7124](https://github.com/pydantic/pydantic/pull/7124)* Fix one docs link
        and resolve some warnings for two others by [@dmontagu](https://github.com/dmontagu)
        in [#7153](https://github.com/pydantic/pydantic/pull/7153)* Include Field
        extra keys name in warning by [@hramezani](https://github.com/hramezani) in
        [#7136](https://github.com/pydantic/pydantic/pull/7136)## v2.1.1 (2023-07-25)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.1.1)* Skip FieldInfo
        merging when unnecessary by [@dmontagu](https://github.com/dmontagu) in [#6862](https://github.com/pydantic/pydantic/pull/6862)##
        v2.1.0 (2023-07-25)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.1.0)*
        Add `StringConstraints` for use as Annotated metadata by [@adriangb](https://github.com/adriangb)
        in [#6605](https://github.com/pydantic/pydantic/pull/6605)* Try to fix intermittently
        failing CI by [@adriangb](https://github.com/adriangb) in [#6683](https://github.com/pydantic/pydantic/pull/6683)*
        Remove redundant example of optional vs default. by [@ehiggs-deliverect](https://github.com/ehiggs-deliverect)
        in [#6676](https://github.com/pydantic/pydantic/pull/6676)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6692](https://github.com/pydantic/pydantic/pull/6692)*
        Remove the Validate always section in validator docs by [@adriangb](https://github.com/adriangb)
        in [#6679](https://github.com/pydantic/pydantic/pull/6679)* Fix recursion
        error in json schema generation by [@adriangb](https://github.com/adriangb)
        in [#6720](https://github.com/pydantic/pydantic/pull/6720)* Fix incorrect
        subclass check for secretstr by [@AlexVndnblcke](https://github.com/AlexVndnblcke)
        in [#6730](https://github.com/pydantic/pydantic/pull/6730)* update pdm / pdm
        lockfile to 2.8.0 by [@davidhewitt](https://github.com/davidhewitt) in [#6714](https://github.com/pydantic/pydantic/pull/6714)*
        unpin pdm on more CI jobs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6755](https://github.com/pydantic/pydantic/pull/6755)* improve source
        locations for auxiliary packages in docs by [@davidhewitt](https://github.com/davidhewitt)
        in [#6749](https://github.com/pydantic/pydantic/pull/6749)* Assume builtins
        don't accept an info argument by [@adriangb](https://github.com/adriangb)
        in [#6754](https://github.com/pydantic/pydantic/pull/6754)* Fix bug where
        calling `help(BaseModelSubclass)` raises errors by [@hramezani](https://github.com/hramezani)
        in [#6758](https://github.com/pydantic/pydantic/pull/6758)* Fix mypy plugin
        handling of `@model_validator(mode=\"after\")` by [@ljodal](https://github.com/ljodal)
        in [#6753](https://github.com/pydantic/pydantic/pull/6753)* update pydantic-core
        to 2.3.1 by [@davidhewitt](https://github.com/davidhewitt) in [#6756](https://github.com/pydantic/pydantic/pull/6756)*
        Mypy plugin for settings by [@hramezani](https://github.com/hramezani) in
        [#6760](https://github.com/pydantic/pydantic/pull/6760)* Use `contentSchema`
        keyword for JSON schema by [@dmontagu](https://github.com/dmontagu) in [#6715](https://github.com/pydantic/pydantic/pull/6715)*
        fast-path checking finite decimals by [@davidhewitt](https://github.com/davidhewitt)
        in [#6769](https://github.com/pydantic/pydantic/pull/6769)* Docs update by
        [@samuelcolvin](https://github.com/samuelcolvin) in [#6771](https://github.com/pydantic/pydantic/pull/6771)*
        Improve json schema doc by [@hramezani](https://github.com/hramezani) in [#6772](https://github.com/pydantic/pydantic/pull/6772)*
        Update validator docs by [@adriangb](https://github.com/adriangb) in [#6695](https://github.com/pydantic/pydantic/pull/6695)*
        Fix typehint for wrap validator by [@dmontagu](https://github.com/dmontagu)
        in [#6788](https://github.com/pydantic/pydantic/pull/6788)* \U0001F41B Fix
        validation warning for unions of Literal and other type by [@lig](https://github.com/lig)
        in [#6628](https://github.com/pydantic/pydantic/pull/6628)* Update documentation
        for generics support in V2 by [@tpdorsey](https://github.com/tpdorsey) in
        [#6685](https://github.com/pydantic/pydantic/pull/6685)* add pydantic-core
        build info to `version_info()` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6785](https://github.com/pydantic/pydantic/pull/6785)* Fix pydantic dataclasses
        that use slots with default values by [@dmontagu](https://github.com/dmontagu)
        in [#6796](https://github.com/pydantic/pydantic/pull/6796)* Fix inheritance
        of hash function for frozen models by [@dmontagu](https://github.com/dmontagu)
        in [#6789](https://github.com/pydantic/pydantic/pull/6789)* \u2728 Add `SkipJsonSchema`
        annotation by [@Kludex](https://github.com/Kludex) in [#6653](https://github.com/pydantic/pydantic/pull/6653)*
        Error if an invalid field name is used with Field by [@dmontagu](https://github.com/dmontagu)
        in [#6797](https://github.com/pydantic/pydantic/pull/6797)* Add `GenericModel`
        to `MOVED_IN_V2` by [@adriangb](https://github.com/adriangb) in [#6776](https://github.com/pydantic/pydantic/pull/6776)*
        Remove unused code from `docs/usage/types/custom.md` by [@hramezani](https://github.com/hramezani)
        in [#6803](https://github.com/pydantic/pydantic/pull/6803)* Fix `float` ->
        `Decimal` coercion precision loss by [@adriangb](https://github.com/adriangb)
        in [#6810](https://github.com/pydantic/pydantic/pull/6810)* remove email validation
        from the north star benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6816](https://github.com/pydantic/pydantic/pull/6816)* Fix link to mypy
        by [@progsmile](https://github.com/progsmile) in [#6824](https://github.com/pydantic/pydantic/pull/6824)*
        Improve initialization hooks example by [@hramezani](https://github.com/hramezani)
        in [#6822](https://github.com/pydantic/pydantic/pull/6822)* Fix default port
        for mongosrv DSNs by [@dmontagu](https://github.com/dmontagu) in [#6827](https://github.com/pydantic/pydantic/pull/6827)*
        Improve API documentation, in particular more links between usage and API
        docs by [@samuelcolvin](https://github.com/samuelcolvin) in [#6780](https://github.com/pydantic/pydantic/pull/6780)*
        update pydantic-core to 2.4.0 by [@davidhewitt](https://github.com/davidhewitt)
        in [#6831](https://github.com/pydantic/pydantic/pull/6831)* Fix `annotated_types.MaxLen`
        validator for custom sequence types by [@ImogenBits](https://github.com/ImogenBits)
        in [#6809](https://github.com/pydantic/pydantic/pull/6809)* Update V1 by [@hramezani](https://github.com/hramezani)
        in [#6833](https://github.com/pydantic/pydantic/pull/6833)* Make it so callable
        JSON schema extra works by [@dmontagu](https://github.com/dmontagu) in [#6798](https://github.com/pydantic/pydantic/pull/6798)*
        Fix serialization issue with `InstanceOf` by [@dmontagu](https://github.com/dmontagu)
        in [#6829](https://github.com/pydantic/pydantic/pull/6829)* Add back support
        for `json_encoders` by [@adriangb](https://github.com/adriangb) in [#6811](https://github.com/pydantic/pydantic/pull/6811)*
        Update field annotations when building the schema by [@dmontagu](https://github.com/dmontagu)
        in [#6838](https://github.com/pydantic/pydantic/pull/6838)* Use `WeakValueDictionary`
        to fix generic memory leak by [@dmontagu](https://github.com/dmontagu) in
        [#6681](https://github.com/pydantic/pydantic/pull/6681)* Add `config.defer_build`
        to optionally make model building lazy by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6823](https://github.com/pydantic/pydantic/pull/6823)* delegate `UUID`
        serialization to pydantic-core by [@davidhewitt](https://github.com/davidhewitt)
        in [#6850](https://github.com/pydantic/pydantic/pull/6850)* Update `json_encoders`
        docs by [@adriangb](https://github.com/adriangb) in [#6848](https://github.com/pydantic/pydantic/pull/6848)*
        Fix error message for `staticmethod`/`classmethod` order with validate_call
        by [@dmontagu](https://github.com/dmontagu) in [#6686](https://github.com/pydantic/pydantic/pull/6686)*
        Improve documentation for `Config` by [@samuelcolvin](https://github.com/samuelcolvin)
        in [#6847](https://github.com/pydantic/pydantic/pull/6847)* Update serialization
        doc to mention `Field.exclude` takes priority over call-time `include/exclude`
        by [@hramezani](https://github.com/hramezani) in [#6851](https://github.com/pydantic/pydantic/pull/6851)*
        Allow customizing core schema generation by making `GenerateSchema` public
        by [@adriangb](https://github.com/adriangb) in [#6737](https://github.com/pydantic/pydantic/pull/6737)##
        v2.0.3 (2023-07-05)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.3)*
        Mention PyObject (v1) moving to ImportString (v2) in migration doc by [@slafs](https://github.com/slafs)
        in [#6456](https://github.com/pydantic/pydantic/pull/6456)* Fix release-tweet
        CI by [@Kludex](https://github.com/Kludex) in [#6461](https://github.com/pydantic/pydantic/pull/6461)*
        Revise the section on required / optional / nullable fields. by [@ybressler](https://github.com/ybressler)
        in [#6468](https://github.com/pydantic/pydantic/pull/6468)* Warn if a type
        hint is not in fact a type by [@adriangb](https://github.com/adriangb) in
        [#6479](https://github.com/pydantic/pydantic/pull/6479)* Replace TransformSchema
        with GetPydanticSchema by [@dmontagu](https://github.com/dmontagu) in [#6484](https://github.com/pydantic/pydantic/pull/6484)*
        Fix the un-hashability of various annotation types, for use in caching generic
        containers by [@dmontagu](https://github.com/dmontagu) in [#6480](https://github.com/pydantic/pydantic/pull/6480)*
        PYD-164: Rework custom types docs by [@adriangb](https://github.com/adriangb)
        in [#6490](https://github.com/pydantic/pydantic/pull/6490)* Fix ci by [@adriangb](https://github.com/adriangb)
        in [#6507](https://github.com/pydantic/pydantic/pull/6507)* Fix forward ref
        in generic by [@adriangb](https://github.com/adriangb) in [#6511](https://github.com/pydantic/pydantic/pull/6511)*
        Fix generation of serialization JSON schemas for core_schema.ChainSchema by
        [@dmontagu](https://github.com/dmontagu) in [#6515](https://github.com/pydantic/pydantic/pull/6515)*
        Document the change in `Field.alias` behavior in Pydantic V2 by [@hramezani](https://github.com/hramezani)
        in [#6508](https://github.com/pydantic/pydantic/pull/6508)* Give better error
        message attempting to compute the json schema of a model with undefined fields
        by [@dmontagu](https://github.com/dmontagu) in [#6519](https://github.com/pydantic/pydantic/pull/6519)*
        Document `alias_priority` by [@tpdorsey](https://github.com/tpdorsey) in [#6520](https://github.com/pydantic/pydantic/pull/6520)*
        Add redirect for types documentation by [@tpdorsey](https://github.com/tpdorsey)
        in [#6513](https://github.com/pydantic/pydantic/pull/6513)* Allow updating
        docs without release by [@samuelcolvin](https://github.com/samuelcolvin) in
        [#6551](https://github.com/pydantic/pydantic/pull/6551)* Ensure docs tests
        always run in the right folder by [@dmontagu](https://github.com/dmontagu)
        in [#6487](https://github.com/pydantic/pydantic/pull/6487)* Defer evaluation
        of return type hints for serializer functions by [@dmontagu](https://github.com/dmontagu)
        in [#6516](https://github.com/pydantic/pydantic/pull/6516)* Disable E501 from
        Ruff and rely on just Black by [@adriangb](https://github.com/adriangb) in
        [#6552](https://github.com/pydantic/pydantic/pull/6552)* Update JSON Schema
        documentation for V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6492](https://github.com/pydantic/pydantic/pull/6492)*
        Add documentation of cyclic reference handling by [@dmontagu](https://github.com/dmontagu)
        in [#6493](https://github.com/pydantic/pydantic/pull/6493)* Remove the need
        for change files by [@samuelcolvin](https://github.com/samuelcolvin) in [#6556](https://github.com/pydantic/pydantic/pull/6556)*
        add \"north star\" benchmark by [@davidhewitt](https://github.com/davidhewitt)
        in [#6547](https://github.com/pydantic/pydantic/pull/6547)* Update Dataclasses
        docs by [@tpdorsey](https://github.com/tpdorsey) in [#6470](https://github.com/pydantic/pydantic/pull/6470)*
        \u267B\uFE0F Use different error message on v1 redirects by [@Kludex](https://github.com/Kludex)
        in [#6595](https://github.com/pydantic/pydantic/pull/6595)* \u2B06 Upgrade
        `pydantic-core` to v2.2.0 by [@lig](https://github.com/lig) in [#6589](https://github.com/pydantic/pydantic/pull/6589)*
        Fix serialization for IPvAny by [@dmontagu](https://github.com/dmontagu) in
        [#6572](https://github.com/pydantic/pydantic/pull/6572)* Improve CI by using
        PDM instead of pip to install typing-extensions by [@adriangb](https://github.com/adriangb)
        in [#6602](https://github.com/pydantic/pydantic/pull/6602)* Add `enum` error
        type docs  by [@lig](https://github.com/lig) in [#6603](https://github.com/pydantic/pydantic/pull/6603)*
        \U0001F41B Fix `max_length` for unicode strings by [@lig](https://github.com/lig)
        in [#6559](https://github.com/pydantic/pydantic/pull/6559)* Add documentation
        for accessing features via `pydantic.v1` by [@tpdorsey](https://github.com/tpdorsey)
        in [#6604](https://github.com/pydantic/pydantic/pull/6604)* Include extra
        when iterating over a model by [@adriangb](https://github.com/adriangb) in
        [#6562](https://github.com/pydantic/pydantic/pull/6562)* Fix typing of model_validator
        by [@adriangb](https://github.com/adriangb) in [#6514](https://github.com/pydantic/pydantic/pull/6514)*
        Touch up Decimal validator by [@adriangb](https://github.com/adriangb) in
        [#6327](https://github.com/pydantic/pydantic/pull/6327)* Fix various docstrings
        using fixed pytest-examples by [@dmontagu](https://github.com/dmontagu) in
        [#6607](https://github.com/pydantic/pydantic/pull/6607)* Handle function validators
        in a discriminated union by [@dmontagu](https://github.com/dmontagu) in [#6570](https://github.com/pydantic/pydantic/pull/6570)*
        Review json_schema.md by [@tpdorsey](https://github.com/tpdorsey) in [#6608](https://github.com/pydantic/pydantic/pull/6608)*
        Make validate_call work on basemodel methods by [@dmontagu](https://github.com/dmontagu)
        in [#6569](https://github.com/pydantic/pydantic/pull/6569)* add test for big
        int json serde by [@davidhewitt](https://github.com/davidhewitt) in [#6614](https://github.com/pydantic/pydantic/pull/6614)*
        Fix pydantic dataclass problem with dataclasses.field default_factory by [@hramezani](https://github.com/hramezani)
        in [#6616](https://github.com/pydantic/pydantic/pull/6616)* Fixed mypy type
        inference for TypeAdapter by [@zakstucke](https://github.com/zakstucke) in
        [#6617](https://github.com/pydantic/pydantic/pull/6617)* Make it work to use
        None as a generic parameter by [@dmontagu](https://github.com/dmontagu) in
        [#6609](https://github.com/pydantic/pydantic/pull/6609)* Make it work to use
        `$ref` as an alias by [@dmontagu](https://github.com/dmontagu) in [#6568](https://github.com/pydantic/pydantic/pull/6568)*
        add note to migration guide about changes to `AnyUrl` etc by [@davidhewitt](https://github.com/davidhewitt)
        in [#6618](https://github.com/pydantic/pydantic/pull/6618)* \U0001F41B Support
        defining `json_schema_extra` on `RootModel` using `Field` by [@lig](https://github.com/lig)
        in [#6622](https://github.com/pydantic/pydantic/pull/6622)* Update pre-commit
        to prevent commits to main branch on accident by [@dmontagu](https://github.com/dmontagu)
        in [#6636](https://github.com/pydantic/pydantic/pull/6636)* Fix PDM CI for
        python 3.7 on MacOS/windows by [@dmontagu](https://github.com/dmontagu) in
        [#6627](https://github.com/pydantic/pydantic/pull/6627)* Produce more accurate
        signatures for pydantic dataclasses by [@dmontagu](https://github.com/dmontagu)
        in [#6633](https://github.com/pydantic/pydantic/pull/6633)* Updates to Url
        types for Pydantic V2 by [@tpdorsey](https://github.com/tpdorsey) in [#6638](https://github.com/pydantic/pydantic/pull/6638)*
        Fix list markdown in `transform` docstring by [@StefanBRas](https://github.com/StefanBRas)
        in [#6649](https://github.com/pydantic/pydantic/pull/6649)* simplify slots_dataclass
        construction to appease mypy by [@davidhewitt](https://github.com/davidhewitt)
        in [#6639](https://github.com/pydantic/pydantic/pull/6639)* Update TypedDict
        schema generation docstring by [@adriangb](https://github.com/adriangb) in
        [#6651](https://github.com/pydantic/pydantic/pull/6651)* Detect and lint-error
        for prints by [@dmontagu](https://github.com/dmontagu) in [#6655](https://github.com/pydantic/pydantic/pull/6655)*
        Add xfailing test for pydantic-core PR 766 by [@dmontagu](https://github.com/dmontagu)
        in [#6641](https://github.com/pydantic/pydantic/pull/6641)* Ignore unrecognized
        fields from dataclasses metadata by [@dmontagu](https://github.com/dmontagu)
        in [#6634](https://github.com/pydantic/pydantic/pull/6634)* Make non-existent
        class getattr a mypy error by [@dmontagu](https://github.com/dmontagu) in
        [#6658](https://github.com/pydantic/pydantic/pull/6658)* Update pydantic-core
        to 2.3.0 by [@hramezani](https://github.com/hramezani) in [#6648](https://github.com/pydantic/pydantic/pull/6648)*
        Use OrderedDict from typing_extensions by [@dmontagu](https://github.com/dmontagu)
        in [#6664](https://github.com/pydantic/pydantic/pull/6664)* Fix typehint for
        JSON schema extra callable by [@dmontagu](https://github.com/dmontagu) in
        [#6659](https://github.com/pydantic/pydantic/pull/6659)## v2.0.2 (2023-07-05)[GitHub
        release](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)* Fix bug
        where round-trip pickling/unpickling a `RootModel` would change the value
        of `__dict__`, [#6457](https://github.com/pydantic/pydantic/pull/6457) by
        [@dmontagu](https://github.com/dmontagu)* Allow single-item discriminated
        unions, [#6405](https://github.com/pydantic/pydantic/pull/6405) by [@dmontagu](https://github.com/dmontagu)*
        Fix issue with union parsing of enums, [#6440](https://github.com/pydantic/pydantic/pull/6440)
        by [@dmontagu](https://github.com/dmontagu)* Docs: Fixed `constr` documentation,
        renamed old `regex` to new `pattern`, [#6452](https://github.com/pydantic/pydantic/pull/6452)
        by [@miili](https://github.com/miili)* Change `GenerateJsonSchema.generate_definitions`
        signature, [#6436](https://github.com/pydantic/pydantic/pull/6436) by [@dmontagu](https://github.com/dmontagu)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.2)##
        v2.0.1 (2023-07-04)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)First
        patch release of Pydantic V2* Extra fields added via `setattr` (i.e. `m.some_extra_field
        = 'extra_value'`)  are added to `.model_extra` if `model_config` `extra='allowed'`.
        Fixed [#6333](https://github.com/pydantic/pydantic/pull/6333), [#6365](https://github.com/pydantic/pydantic/pull/6365)
        by [@aaraney](https://github.com/aaraney)* Automatically unpack JSON schema
        '$ref' for custom types, [#6343](https://github.com/pydantic/pydantic/pull/6343)
        by [@adriangb](https://github.com/adriangb)* Fix tagged unions multiple processing
        in submodels, [#6340](https://github.com/pydantic/pydantic/pull/6340) by [@suharnikov](https://github.com/suharnikov)See
        the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0.1)##
        v2.0 (2023-06-30)[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.0)Pydantic
        V2 is here! :tada:See [this post](https://docs.pydantic.dev/2.0/blog/pydantic-v2-final/)
        for more details.## v2.0b3 (2023-06-16)Third beta pre-release of Pydantic
        V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b3)##
        v2.0b2 (2023-06-03)Add `from_attributes` runtime flag to `TypeAdapter.validate_python`
        and `BaseModel.model_validate`.See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b2)##
        v2.0b1 (2023-06-01)First beta pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0b1)## v2.0a4
        (2023-05-05)Fourth pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a4)##
        v2.0a3 (2023-04-20)Third pre-release of Pydantic V2See the full changelog
        [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a3)## v2.0a2
        (2023-04-12)Second pre-release of Pydantic V2See the full changelog [here](https://github.com/pydantic/pydantic/releases/tag/v2.0a2)##
        v2.0a1 (2023-04-03)First pre-release of Pydantic V2!See [this post](https://docs.pydantic.dev/blog/pydantic-v2-alpha/)
        for more details.... see [here](https://docs.pydantic.dev/changelog/#v0322-2019-08-17)
        for earlier changes."
      Package: pydantic
      Source: pip
      Version: 1.10.14
      Hash: ''
      licenses:
      - MIT
      Title: pydantic
      DownloadURL: https://files.pythonhosted.org/packages/df/ab/67eda485b025e9253cce0eaede9b6158a08f62af7013a883b2c8775917b2/pydantic-1.10.14.tar.gz
  bazaar:
    register: 'no'
    prim: 24/CTX1030577
    community_link: https://pypi.org/project/pydantic
    community_name: https://pypi.org/project/pydantic
    community_url: https://pypi.org/project/pydantic
    component_comment: ''
    component_highlevel_description: Data validation using Python type hints
    component_name: pydantic
    component_platform: linux
    component_programing_language: Python
    component_version: 1.10.14
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/df/ab/67eda485b025e9253cce0eaede9b6158a08f62af7013a883b2c8775917b2/pydantic-1.10.14.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1076622&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United Kingdom
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pydantic
    target_sw: linux
    vendor: pip
    version: 1.10.14
    web_url: https://pypi.org/project/pydantic/2.7.0/
  licenses:
  - MIT
  name: pydantic
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.10.14
  mimer:
    linking: Static
    product_number: CTX1030577
    product_version_label: 1.10.14
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: python-dateutil+2.8.2
  additional_info:
    fossa-attribution:
      Description: "dateutil - powerful extensions to datetime==========================================|pypi|
        |support| |licence||gitter| |readthedocs||travis| |appveyor| |pipelines| |coverage|..
        |pypi| image:: https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: pypi version..
        |support| image:: https://img.shields.io/pypi/pyversions/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: supported
        Python version.. |travis| image:: https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-square&label=Travis%20Build
        \   :target: https://travis-ci.org/dateutil/dateutil    :alt: travis build
        status.. |appveyor| image:: https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-square&logo=appveyor
        \   :target: https://ci.appveyor.com/project/dateutil/dateutil    :alt: appveyor
        build status.. |pipelines| image:: https://dev.azure.com/pythondateutilazure/dateutil/_apis/build/status/dateutil.dateutil?branchName=master
        \   :target: https://dev.azure.com/pythondateutilazure/dateutil/_build/latest?definitionId=1&branchName=master
        \   :alt: azure pipelines build status.. |coverage| image:: https://codecov.io/gh/dateutil/dateutil/branch/master/graphs/badge.svg?branch=master
        \   :target: https://codecov.io/gh/dateutil/dateutil?branch=master    :alt:
        Code coverage.. |gitter| image:: https://badges.gitter.im/dateutil/dateutil.svg
        \  :alt: Join the chat at https://gitter.im/dateutil/dateutil   :target: https://gitter.im/dateutil/dateutil..
        |licence| image:: https://img.shields.io/pypi/l/python-dateutil.svg?style=flat-square
        \   :target: https://pypi.org/project/python-dateutil/    :alt: licence..
        |readthedocs| image:: https://img.shields.io/readthedocs/dateutil/latest.svg?style=flat-square&label=Read%20the%20Docs
        \  :alt: Read the documentation at https://dateutil.readthedocs.io/en/latest/
        \  :target: https://dateutil.readthedocs.io/en/latest/The `dateutil` module
        provides powerful extensions tothe standard `datetime` module, available in
        Python.Installation============`dateutil` can be installed from PyPI using
        `pip` (note that the package name isdifferent from the importable name)::
        \   pip install python-dateutilDownload========dateutil is available on PyPIhttps://pypi.org/project/python-dateutil/The
        documentation is hosted at:https://dateutil.readthedocs.io/en/stable/Code====The
        code and issue tracker are hosted on GitHub:https://github.com/dateutil/dateutil/Features========*
        Computing of relative deltas (next month, next year,  next Monday, last week
        of month, etc);* Computing of relative deltas between two given  date and/or
        datetime objects;* Computing of dates based on very flexible recurrence rules,
        \ using a superset of the `iCalendar <https://www.ietf.org/rfc/rfc2445.txt>`_
        \ specification. Parsing of RFC strings is supported as well.* Generic parsing
        of dates in almost any string format;* Timezone (tzinfo) implementations for
        tzfile(5) format  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ  environment
        string (in all known formats), iCalendar  format files, given ranges (with
        help from relative deltas),  local machine timezone, fixed offset timezone,
        UTC timezone,  and Windows registry-based time zones.* Internal up-to-date
        world timezone information based on  Olson's database.* Computing of Easter
        Sunday dates for any given year,  using Western, Orthodox or Julian algorithms;*
        A comprehensive test suite.Quick example=============Here's a snapshot, just
        to give an idea about the power of thepackage. For more examples, look at
        the documentation.Suppose you want to know how much time is left, inyears/months/days/etc,
        before the next easter happening on ayear with a Friday 13th in August, and
        you want to get today'sdate out of the \"date\" unix system command. Here
        is the code:.. code-block:: python3    >>> from dateutil.relativedelta import
        *    >>> from dateutil.easter import *    >>> from dateutil.rrule import *
        \   >>> from dateutil.parser import *    >>> from datetime import *    >>>
        now = parse(\"Sat Oct 11 17:13:46 UTC 2003\")    >>> today = now.date()    >>>
        year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year
        \   >>> rdelta = relativedelta(easter(year), today)    >>> print(\"Today is:
        %s\" % today)    Today is: 2003-10-11    >>> print(\"Year with next Aug 13th
        on a Friday is: %s\" % year)    Year with next Aug 13th on a Friday is: 2004
        \   >>> print(\"How far is the Easter of that year: %s\" % rdelta)    How
        far is the Easter of that year: relativedelta(months=+6)    >>> print(\"And
        the Easter of that year is: %s\" % (today+rdelta))    And the Easter of that
        year is: 2004-04-11Being exactly 6 months ahead was **really** a coincidence
        :)Contributing============We welcome many types of contributions - bug reports,
        pull requests (code, infrastructure or documentation fixes). For more information
        about how to contribute to the project, see the ``CONTRIBUTING.md`` file in
        the repository.Author======The dateutil module was written by Gustavo Niemeyer
        <gustavo@niemeyer.net>in 2003.It is maintained by:* Gustavo Niemeyer <gustavo@niemeyer.net>
        2003-2011* Tomi Pievil\xE4inen <tomi.pievilainen@iki.fi> 2012-2014* Yaron
        de Leeuw <me@jarondl.net> 2014-2016* Paul Ganssle <paul@ganssle.io> 2015-Starting
        with version 2.4.1 and running until 2.8.2, all source and binarydistributions
        will be signed by a PGP key that has, at the very least, beensigned by the
        key which made the previous release. A table of release signingkeys can be
        found below:===========  ============================Releases     Signing
        key fingerprint===========  ============================2.4.1-2.8.2  `6B49
        ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB`_===========  ============================New
        releases *may* have signed tags, but binary and source distributionsuploaded
        to PyPI will no longer have GPG signatures attached.Contact=======Our mailing
        list is available at `dateutil@python.org <https://mail.python.org/mailman/listinfo/dateutil>`_.
        As it is hosted by the PSF, it is subject to the `PSF code ofconduct <https://www.python.org/psf/conduct/>`_.License=======All
        contributions after December 1, 2017 released under dual license - either
        `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`_ or the
        `BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>`_. Contributions
        before December 1, 2017 - except those those explicitly relicensed - are released
        only under the BSD 3-Clause License... _6B49 ACBA DCF6 BD1C A206 67AB CD54
        FCE3 D964 BEFB:   https://pgp.mit.edu/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB"
      Package: python-dateutil
      Source: pip
      Version: 2.8.2
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      Title: python-dateutil
      DownloadURL: https://files.pythonhosted.org/packages/36/7a/87837f39d0296e723bb9b62bbb257d0355c7f6128853c78955f57342a56d/python_dateutil-2.8.2-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1057771
    community_link: https://github.com/dateutil/dateutil
    community_name: https://github.com/dateutil/dateutil
    community_url: https://github.com/dateutil/dateutil
    component_comment: ''
    component_highlevel_description: Extensions to the standard Python datetime module.The
      dateutil module provides powerful extensions to the datetime module available
      in the Python standard library.
    component_name: Python-Dateutil
    component_platform: linux
    component_programing_language: Python
    component_version: 2.8.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159998 (Dual License)
    src_download_link: https://github.com/dateutil/dateutil/archive/2.8.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=980699&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: python-dateutil
    target_sw: linux
    vendor: pip
    version: 2.8.2
    web_url: https://github.com/dateutil/dateutil
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  name: python-dateutil
  primary:
  - pandas+2.2.1
  subcomponent: false
  type: FOSS
  versions:
  - 2.8.2
  mimer:
    linking: Static
    product_number: CAX1057771
    product_version_label: 2.8.2
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: pytz+2024.1
  additional_info:
    fossa-attribution:
      Description: 'pytz - World Timezone Definitions for Python============================================:Author:
        Stuart Bishop <stuart@stuartbishop.net>Introduction~~~~~~~~~~~~pytz brings
        the Olson tz database into Python. This library allowsaccurate and cross platform
        timezone calculations using Python 2.4or higher. It also solves the issue
        of ambiguous times at the endof daylight saving time, which you can read more
        about in the PythonLibrary Reference (``datetime.tzinfo``).Almost all of the
        Olson timezones are supported... note::    Projects using Python 3.9 or later
        should be using the support    now included as part of the standard library,
        and third party    packages work with it such as `tzdata <https://pypi.org/project/tzdata/>`_.    pytz
        offers no advantages beyond backwards compatibility with    code written for
        earlier versions of Python... note::    This library differs from the documented
        Python API for    tzinfo implementations; if you want to create local wallclock    times
        you need to use the ``localize()`` method documented in this    document.
        In addition, if you perform date arithmetic on local    times that cross DST
        boundaries, the result may be in an incorrect    timezone (ie. subtract 1
        minute from 2002-10-27 1:00 EST and you get    2002-10-27 0:59 EST instead
        of the correct 2002-10-27 1:59 EDT). A    ``normalize()`` method is provided
        to correct this. Unfortunately these    issues cannot be resolved without
        modifying the Python datetime    implementation (see PEP-431).Installation~~~~~~~~~~~~This
        package can either be installed using ``pip`` or from a tarball using thestandard
        Python distutils.If you are installing using ``pip``, you don''t need to download
        anything as thelatest version will be downloaded for you from PyPI::    pip
        install pytzIf you are installing from a tarball, run the following command
        as anadministrative user::    python setup.py installpytz for Enterprise~~~~~~~~~~~~~~~~~~~Available
        as part of the Tidelift Subscription.The maintainers of pytz and thousands
        of other packages are working with Tidelift to deliver commercial support
        and maintenance for the open source dependencies you use to build your applications.
        Save time, reduce risk, and improve code health, while paying the maintainers
        of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-pytz?utm_source=pypi-pytz&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_.Example
        & Usage~~~~~~~~~~~~~~~Localized times and date arithmetic----------------------------------->>>
        from datetime import datetime, timedelta>>> from pytz import timezone>>> import
        pytz>>> utc = pytz.utc>>> utc.zone''UTC''>>> eastern = timezone(''US/Eastern'')>>>
        eastern.zone''US/Eastern''>>> amsterdam = timezone(''Europe/Amsterdam'')>>>
        fmt = ''%Y-%m-%d %H:%M:%S %Z%z''This library only supports two ways of building
        a localized time. Thefirst is to use the ``localize()`` method provided by
        the pytz library.This is used to localize a naive datetime (datetime with
        no timezoneinformation):>>> loc_dt = eastern.localize(datetime(2002, 10, 27,
        6, 0, 0))>>> print(loc_dt.strftime(fmt))2002-10-27 06:00:00 EST-0500The second
        way of building a localized time is by converting an existinglocalized time
        using the standard ``astimezone()`` method:>>> ams_dt = loc_dt.astimezone(amsterdam)>>>
        ams_dt.strftime(fmt)''2002-10-27 12:00:00 CET+0100''Unfortunately using the
        tzinfo argument of the standard datetimeconstructors ''''does not work''''
        with pytz for many timezones.>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)  #
        /!\ Does not work this way!''2002-10-27 12:00:00 LMT+0018''It is safe for
        timezones without daylight saving transitions though, suchas UTC:>>> datetime(2002,
        10, 27, 12, 0, 0, tzinfo=pytz.utc).strftime(fmt)  # /!\ Not recommended except
        for UTC''2002-10-27 12:00:00 UTC+0000''The preferred way of dealing with times
        is to always work in UTC,converting to localtime only when generating output
        to be readby humans.>>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)>>>
        loc_dt = utc_dt.astimezone(eastern)>>> loc_dt.strftime(fmt)''2002-10-27 01:00:00
        EST-0500''This library also allows you to do date arithmetic using localtimes,
        although it is more complicated than working in UTC as youneed to use the
        ``normalize()`` method to handle daylight saving timeand other timezone transitions.
        In this example, ``loc_dt`` is setto the instant when daylight saving time
        ends in the US/Easterntimezone.>>> before = loc_dt - timedelta(minutes=10)>>>
        before.strftime(fmt)''2002-10-27 00:50:00 EST-0500''>>> eastern.normalize(before).strftime(fmt)''2002-10-27
        01:50:00 EDT-0400''>>> after = eastern.normalize(before + timedelta(minutes=20))>>>
        after.strftime(fmt)''2002-10-27 01:10:00 EST-0500''Creating local times is
        also tricky, and the reason why working withlocal times is not recommended.
        Unfortunately, you cannot just passa ``tzinfo`` argument when constructing
        a datetime (see the nextsection for more details)>>> dt = datetime(2002, 10,
        27, 1, 30, 0)>>> dt1 = eastern.localize(dt, is_dst=True)>>> dt1.strftime(fmt)''2002-10-27
        01:30:00 EDT-0400''>>> dt2 = eastern.localize(dt, is_dst=False)>>> dt2.strftime(fmt)''2002-10-27
        01:30:00 EST-0500''Converting between timezones is more easily done, using
        thestandard astimezone method.>>> utc_dt = datetime.fromtimestamp(1143408899,
        tz=utc)>>> utc_dt.strftime(fmt)''2006-03-26 21:34:59 UTC+0000''>>> au_tz =
        timezone(''Australia/Sydney'')>>> au_dt = utc_dt.astimezone(au_tz)>>> au_dt.strftime(fmt)''2006-03-27
        08:34:59 AEDT+1100''>>> utc_dt2 = au_dt.astimezone(utc)>>> utc_dt2.strftime(fmt)''2006-03-26
        21:34:59 UTC+0000''>>> utc_dt == utc_dt2TrueYou can take shortcuts when dealing
        with the UTC side of timezoneconversions. ``normalize()`` and ``localize()``
        are not reallynecessary when there are no daylight saving time transitions
        todeal with.>>> utc_dt = datetime.fromtimestamp(1143408899, tz=utc)>>> utc_dt.strftime(fmt)''2006-03-26
        21:34:59 UTC+0000''>>> au_tz = timezone(''Australia/Sydney'')>>> au_dt = au_tz.normalize(utc_dt.astimezone(au_tz))>>>
        au_dt.strftime(fmt)''2006-03-27 08:34:59 AEDT+1100''>>> utc_dt2 = au_dt.astimezone(utc)>>>
        utc_dt2.strftime(fmt)''2006-03-26 21:34:59 UTC+0000''``tzinfo`` API--------------The
        ``tzinfo`` instances returned by the ``timezone()`` function havebeen extended
        to cope with ambiguous times by adding an ``is_dst``parameter to the ``utcoffset()``,
        ``dst()`` && ``tzname()`` methods.>>> tz = timezone(''America/St_Johns'')>>>
        normal = datetime(2009, 9, 1)>>> ambiguous = datetime(2009, 10, 31, 23, 30)The
        ``is_dst`` parameter is ignored for most timestamps. It is only usedduring
        DST transition ambiguous periods to resolve that ambiguity.>>> print(tz.utcoffset(normal,
        is_dst=True))-1 day, 21:30:00>>> print(tz.dst(normal, is_dst=True))1:00:00>>>
        tz.tzname(normal, is_dst=True)''NDT''>>> print(tz.utcoffset(ambiguous, is_dst=True))-1
        day, 21:30:00>>> print(tz.dst(ambiguous, is_dst=True))1:00:00>>> tz.tzname(ambiguous,
        is_dst=True)''NDT''>>> print(tz.utcoffset(normal, is_dst=False))-1 day, 21:30:00>>>
        tz.dst(normal, is_dst=False).seconds3600>>> tz.tzname(normal, is_dst=False)''NDT''>>>
        print(tz.utcoffset(ambiguous, is_dst=False))-1 day, 20:30:00>>> tz.dst(ambiguous,
        is_dst=False)datetime.timedelta(0)>>> tz.tzname(ambiguous, is_dst=False)''NST''If
        ``is_dst`` is not specified, ambiguous timestamps will raisean ``pytz.exceptions.AmbiguousTimeError``
        exception.>>> print(tz.utcoffset(normal))-1 day, 21:30:00>>> print(tz.dst(normal))1:00:00>>>
        tz.tzname(normal)''NDT''>>> import pytz.exceptions>>> try:...     tz.utcoffset(ambiguous)...
        except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00>>>
        try:...     tz.dst(ambiguous)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00>>>
        try:...     tz.tzname(ambiguous)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % ambiguous)pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00Problems
        with Localtime~~~~~~~~~~~~~~~~~~~~~~~The major problem we have to deal with
        is that certain datetimesmay occur twice in a year. For example, in the US/Eastern
        timezoneon the last Sunday morning in October, the following sequencehappens:    -
        01:00 EDT occurs    - 1 hour later, instead of 2:00am the clock is turned
        back 1 hour      and 01:00 happens again (this time 01:00 EST)In fact, every
        instant between 01:00 and 02:00 occurs twice. This meansthat if you try and
        create a time in the ''US/Eastern'' timezonethe standard datetime syntax,
        there is no way to specify if you meantbefore of after the end-of-daylight-saving-time
        transition. Using thepytz custom syntax, the best you can do is make an educated
        guess:>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 1, 30, 00))>>>
        loc_dt.strftime(fmt)''2002-10-27 01:30:00 EST-0500''As you can see, the system
        has chosen one for you and there is a 50%chance of it being out by one hour.
        For some applications, this doesnot matter. However, if you are trying to
        schedule meetings with peoplein different timezones or analyze log files it
        is not acceptable.The best and simplest solution is to stick with using UTC.  The
        pytzpackage encourages using UTC for internal timezone representation byincluding
        a special UTC implementation based on the standard Pythonreference implementation
        in the Python documentation.The UTC timezone unpickles to be the same instance,
        and pickles to asmaller size than other pytz tzinfo instances.  The UTC implementationcan
        be obtained as pytz.utc, pytz.UTC, or pytz.timezone(''UTC'').>>> import pickle,
        pytz>>> dt = datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)>>> naive = dt.replace(tzinfo=None)>>>
        p = pickle.dumps(dt, 1)>>> naive_p = pickle.dumps(naive, 1)>>> len(p) - len(naive_p)17>>>
        new = pickle.loads(p)>>> new == dtTrue>>> new is dtFalse>>> new.tzinfo is
        dt.tzinfoTrue>>> pytz.utc is pytz.UTC is pytz.timezone(''UTC'')TrueNote that
        some other timezones are commonly thought of as the same (GMT,Greenwich, Universal,
        etc.). The definition of UTC is distinct from theseother timezones, and they
        are not equivalent. For this reason, they willnot compare the same in Python.>>>
        utc == pytz.timezone(''GMT'')FalseSee the section `What is UTC`_, below.If
        you insist on working with local times, this library provides afacility for
        constructing them unambiguously:>>> loc_dt = datetime(2002, 10, 27, 1, 30,
        00)>>> est_dt = eastern.localize(loc_dt, is_dst=True)>>> edt_dt = eastern.localize(loc_dt,
        is_dst=False)>>> print(est_dt.strftime(fmt) + '' / '' + edt_dt.strftime(fmt))2002-10-27
        01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500If you pass None as the is_dst
        flag to localize(), pytz will refuse toguess and raise exceptions if you try
        to build ambiguous or non-existenttimes.For example, 1:30am on 27th Oct 2002
        happened twice in the US/Easterntimezone when the clocks where put back at
        the end of Daylight SavingTime:>>> dt = datetime(2002, 10, 27, 1, 30, 00)>>>
        try:...     eastern.localize(dt, is_dst=None)... except pytz.exceptions.AmbiguousTimeError:...     print(''pytz.exceptions.AmbiguousTimeError:
        %s'' % dt)pytz.exceptions.AmbiguousTimeError: 2002-10-27 01:30:00Similarly,
        2:30am on 7th April 2002 never happened at all in theUS/Eastern timezone,
        as the clocks where put forward at 2:00am skippingthe entire hour:>>> dt =
        datetime(2002, 4, 7, 2, 30, 00)>>> try:...     eastern.localize(dt, is_dst=None)...
        except pytz.exceptions.NonExistentTimeError:...     print(''pytz.exceptions.NonExistentTimeError:
        %s'' % dt)pytz.exceptions.NonExistentTimeError: 2002-04-07 02:30:00Both of
        these exceptions share a common base class to make error handlingeasier:>>>
        isinstance(pytz.AmbiguousTimeError(), pytz.InvalidTimeError)True>>> isinstance(pytz.NonExistentTimeError(),
        pytz.InvalidTimeError)TrueA special case is where countries change their timezone
        definitionswith no daylight savings time switch. For example, in 1915 Warsawswitched
        from Warsaw time to Central European time with no daylight savingstransition.
        So at the stroke of midnight on August 5th 1915 the clockswere wound back
        24 minutes creating an ambiguous time period that cannotbe specified without
        referring to the timezone abbreviation or theactual UTC offset. In this case
        midnight happened twice, neither timeduring a daylight saving time period.
        pytz handles this transition bytreating the ambiguous period before the switch
        as daylight savingstime, and the ambiguous period after as standard time.>>>
        warsaw = pytz.timezone(''Europe/Warsaw'')>>> amb_dt1 = warsaw.localize(datetime(1915,
        8, 4, 23, 59, 59), is_dst=True)>>> amb_dt1.strftime(fmt)''1915-08-04 23:59:59
        WMT+0124''>>> amb_dt2 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59),
        is_dst=False)>>> amb_dt2.strftime(fmt)''1915-08-04 23:59:59 CET+0100''>>>
        switch_dt = warsaw.localize(datetime(1915, 8, 5, 00, 00, 00), is_dst=False)>>>
        switch_dt.strftime(fmt)''1915-08-05 00:00:00 CET+0100''>>> str(switch_dt -
        amb_dt1)''0:24:01''>>> str(switch_dt - amb_dt2)''0:00:01''The best way of
        creating a time during an ambiguous time period isby converting from another
        timezone such as UTC:>>> utc_dt = datetime(1915, 8, 4, 22, 36, tzinfo=pytz.utc)>>>
        utc_dt.astimezone(warsaw).strftime(fmt)''1915-08-04 23:36:00 CET+0100''The
        standard Python way of handling all these ambiguities is not tohandle them,
        such as demonstrated in this example using the US/Easterntimezone definition
        from the Python documentation (Note that thisimplementation only works for
        dates between 1987 and 2006 - it isincluded for tests only!):>>> from pytz.reference
        import Eastern # pytz.reference only for tests>>> dt = datetime(2002, 10,
        27, 0, 30, tzinfo=Eastern)>>> str(dt)''2002-10-27 00:30:00-04:00''>>> str(dt
        + timedelta(hours=1))''2002-10-27 01:30:00-05:00''>>> str(dt + timedelta(hours=2))''2002-10-27
        02:30:00-05:00''>>> str(dt + timedelta(hours=3))''2002-10-27 03:30:00-05:00''Notice
        the first two results? At first glance you might think they arecorrect, but
        taking the UTC offset into account you find that they areactually two hours
        appart instead of the 1 hour we asked for.>>> from pytz.reference import UTC
        # pytz.reference only for tests>>> str(dt.astimezone(UTC))''2002-10-27 04:30:00+00:00''>>>
        str((dt + timedelta(hours=1)).astimezone(UTC))''2002-10-27 06:30:00+00:00''Country
        Information~~~~~~~~~~~~~~~~~~~A mechanism is provided to access the timezones
        commonly in usefor a particular country, looked up using the ISO 3166 country
        code.It returns a list of strings that can be used to retrieve the relevanttzinfo
        instance using ``pytz.timezone()``:>>> print('' ''.join(pytz.country_timezones[''nz'']))Pacific/Auckland
        Pacific/ChathamThe Olson database comes with a ISO 3166 country code to English
        countryname mapping that pytz exposes as a dictionary:>>> print(pytz.country_names[''nz''])New
        ZealandWhat is UTC~~~~~~~~~~~''UTC'' is `Coordinated Universal Time`_. It
        is a successor to, but distinctfrom, Greenwich Mean Time (GMT) and the various
        definitions of UniversalTime. UTC is now the worldwide standard for regulating
        clocks and timemeasurement.All other timezones are defined relative to UTC,
        and include offsets likeUTC+0800 - hours to add or subtract from UTC to derive
        the local time. Nodaylight saving time occurs in UTC, making it a useful timezone
        to performdate arithmetic without worrying about the confusion and ambiguities
        causedby daylight saving time transitions, your country changing its timezone,
        ormobile computers that roam through multiple timezones...  _Coordinated Universal
        Time: https://en.wikipedia.org/wiki/Coordinated_Universal_TimeHelpers~~~~~~~There
        are two lists of timezones provided.``all_timezones`` is the exhaustive list
        of the timezone names that canbe used.>>> from pytz import all_timezones>>>
        len(all_timezones) >= 500True>>> ''Etc/Greenwich'' in all_timezonesTrue``common_timezones``
        is a list of useful, current timezones. It doesn''tcontain deprecated zones
        or historical zones, except for a few I''vedeemed in common usage, such as
        US/Eastern (open a bug report if youthink other timezones are deserving of
        being included here). It is alsoa sequence of strings.>>> from pytz import
        common_timezones>>> len(common_timezones) < len(all_timezones)True>>> ''Etc/Greenwich''
        in common_timezonesFalse>>> ''Australia/Melbourne'' in common_timezonesTrue>>>
        ''US/Eastern'' in common_timezonesTrue>>> ''Canada/Eastern'' in common_timezonesTrue>>>
        ''Australia/Yancowinna'' in all_timezonesTrue>>> ''Australia/Yancowinna''
        in common_timezonesFalseBoth ``common_timezones`` and ``all_timezones`` are
        alphabeticallysorted:>>> common_timezones_dupe = common_timezones[:]>>> common_timezones_dupe.sort()>>>
        common_timezones == common_timezones_dupeTrue>>> all_timezones_dupe = all_timezones[:]>>>
        all_timezones_dupe.sort()>>> all_timezones == all_timezones_dupeTrue``all_timezones``
        and ``common_timezones`` are also available as sets.>>> from pytz import all_timezones_set,
        common_timezones_set>>> ''US/Eastern'' in all_timezones_setTrue>>> ''US/Eastern''
        in common_timezones_setTrue>>> ''Australia/Victoria'' in common_timezones_setFalseYou
        can also retrieve lists of timezones used by particular countriesusing the
        ``country_timezones()`` function. It requires an ISO-3166two letter country
        code.>>> from pytz import country_timezones>>> print('' ''.join(country_timezones(''ch'')))Europe/Zurich>>>
        print('' ''.join(country_timezones(''CH'')))Europe/ZurichInternationalization
        - i18n/l10n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Pytz is an interface to the IANA
        database, which uses ASCII names. The `Unicode  Consortium''s Unicode Locales
        (CLDR) <http://cldr.unicode.org>`_project provides translations. Python packages
        such as`Babel <https://babel.pocoo.org/en/latest/api/dates.html#timezone-functionality>`_and
        Thomas Khyn''s `l18n <https://pypi.org/project/l18n/>`_ package can be usedto
        access these translations from Python.License~~~~~~~MIT license.This code
        is also available as part of Zope 3 under the Zope PublicLicense,  Version
        2.1 (ZPL).I''m happy to relicense this code if necessary for inclusion in
        otheropen source projects.Latest Versions~~~~~~~~~~~~~~~This package will
        be updated after releases of the Olson timezonedatabase.  The latest version
        can be downloaded from the `Python PackageIndex <https://pypi.org/project/pytz/>`_.  The
        code that is usedto generate this distribution is hosted on Github and availableusing
        git::    git clone https://github.com/stub42/pytz.gitAnnouncements of new
        releases are made on`Launchpad <https://launchpad.net/pytz>`_, and the`Atom
        feed <http://feeds.launchpad.net/pytz/announcements.atom>`_hosted there.Bugs,
        Feature Requests & Patches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Bugs should be reported
        on `Github <https://github.com/stub42/pytz/issues>`_.Feature requests are
        unlikely to be considered, and efforts instead directedto timezone support
        now built into Python or packages that work with it.Security Issues~~~~~~~~~~~~~~~Reports
        about security issues can be made via `Tidelift <https://tidelift.com/security>`_.Issues
        & Limitations~~~~~~~~~~~~~~~~~~~~- This project is in maintenance mode. Projects
        using Python 3.9 or later  are best served by using the timezone functionaly
        now included in core  Python and packages that work with it such as `tzdata
        <https://pypi.org/project/tzdata/>`_.- Offsets from UTC are rounded to the
        nearest whole minute, so timezones  such as Europe/Amsterdam pre 1937 will
        be up to 30 seconds out. This  was a limitation of the Python datetime library.-
        If you think a timezone definition is incorrect, I probably can''t fix  it.
        pytz is a direct translation of the Olson timezone database, and  changes
        to the timezone definitions need to be made to this source.  If you find errors
        they should be reported to the time zone mailing  list, linked from http://www.iana.org/time-zones.Further
        Reading~~~~~~~~~~~~~~~More info than you want to know about timezones:https://data.iana.org/time-zones/tz-link.htmlContact~~~~~~~Stuart
        Bishop <stuart@stuartbishop.net>'
      Package: pytz
      Source: pip
      Version: '2024.1'
      Hash: ''
      licenses:
      - MIT
      - public-domain
      Title: pytz
      DownloadURL: https://files.pythonhosted.org/packages/90/26/9f1f00a5d021fff16dee3de13d43e5e978f3d58928e129c3a62cf7eb9738/pytz-2024.1.tar.gz
  bazaar:
    register: 'no'
    prim: 38/CAX1056526
    community_link: http://pythonhosted.org/pytz
    community_name: http://pythonhosted.org/pytz
    community_url: http://pythonhosted.org/pytz
    component_comment: ''
    component_highlevel_description: pytz Python historical timezone library and database
    component_name: pytz
    component_platform: linux
    component_programing_language: ''
    component_version: RELEASE_2024.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/90/26/9f1f00a5d021fff16dee3de13d43e5e978f3d58928e129c3a62cf7eb9738/pytz-2024.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1078650&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: ''
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pytz
    target_sw: linux
    vendor: pip
    version: '2024.1'
    web_url: http://pythonhosted.org/pytz
  licenses:
  - MIT
  - public-domain
  name: pytz
  primary:
  - pandas+2.2.1
  subcomponent: false
  type: FOSS
  versions:
  - '2024.1'
  mimer:
    linking: Static
    product_number: CAX1056526
    product_version_label: release_2024.1
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: scipy+1.12.0
  additional_info:
    fossa-attribution:
      Description: ".. image:: https://raw.githubusercontent.com/scipy/scipy/main/doc/source/_static/logo.svg
        \ :target: https://scipy.org  :width: 110  :height: 110  :align: left .. image::
        https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A
        \ :target: https://numfocus.org.. image:: https://img.shields.io/pypi/dm/scipy.svg?label=Pypi%20downloads
        \ :target: https://pypi.org/project/scipy/.. image:: https://img.shields.io/conda/dn/conda-forge/scipy.svg?label=Conda%20downloads
        \ :target: https://anaconda.org/conda-forge/scipy.. image:: https://img.shields.io/badge/stackoverflow-Ask%20questions-blue.svg
        \ :target: https://stackoverflow.com/questions/tagged/scipy.. image:: https://img.shields.io/badge/DOI-10.1038%2Fs41592--019--0686--2-blue
        \ :target: https://www.nature.com/articles/s41592-019-0686-2SciPy (pronounced
        \"Sigh Pie\") is an open-source software for mathematics,science, and engineering.
        It includes modules for statistics, optimization,integration, linear algebra,
        Fourier transforms, signal and image processing,ODE solvers, and more.- **Website:**
        https://scipy.org- **Documentation:** https://docs.scipy.org/doc/scipy/- **Development
        version of the documentation:** https://scipy.github.io/devdocs- **Mailing
        list:** https://mail.python.org/mailman3/lists/scipy-dev.python.org/- **Source
        code:** https://github.com/scipy/scipy- **Contributing:** https://scipy.github.io/devdocs/dev/index.html-
        **Bug reports:** https://github.com/scipy/scipy/issues- **Code of Conduct:**
        https://docs.scipy.org/doc/scipy/dev/conduct/code_of_conduct.html- **Report
        a security vulnerability:** https://tidelift.com/docs/security- **Citing in
        your work:** https://www.scipy.org/citing-scipy/SciPy is built to work withNumPy
        arrays, and provides many user-friendly and efficient numerical routines,such
        as routines for numerical integration and optimization. Together, theyrun
        on all popular operating systems, are quick to install, and are free ofcharge.
        NumPy and SciPy are easy to use, but powerful enough to be dependedupon by
        some of the world's leading scientists and engineers. If you need tomanipulate
        numbers on a computer and display or publish the results, giveSciPy a try!For
        the installation instructions, see `our installguide <https://scipy.org/install/>`__.Call
        for Contributions----------------------We appreciate and welcome contributions.
        Small improvements or fixes are always appreciated; issues labeled as \"goodfirst
        issue\" may be a good starting point. Have a look at `our contributingguide
        <https://scipy.github.io/devdocs/dev/index.html>`__.Writing code isn\u2019t
        the only way to contribute to SciPy. You can also:- review pull requests-
        triage issues- develop tutorials, presentations, and other educational materials-
        maintain and improve `our website <https://github.com/scipy/scipy.org>`__-
        develop graphic design for our brand assets and promotional materials- help
        with outreach and onboard new contributors- write grant proposals and help
        with other fundraising effortsIf you\u2019re unsure where to start or how
        your skills fit in, reach out! You canask on the mailing list or here, on
        GitHub, by leaving acomment on a relevant issue that is already open.If you
        are new to contributing to open source, `thisguide <https://opensource.guide/how-to-contribute/>`__
        helps explain why, what,and how to get involved."
      Package: scipy
      Source: pip
      Version: 1.12.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - BSD-3-Clause-LBNL
      - BSL-1.0
      - GPL-1.0-or-later
      - GPL-3.0-only
      - GPL-3.0-or-later
      - GPL-3.0-with-GCC-exception
      - LGPL-2.0-or-later
      - LGPL-2.1-only
      - LGPL-2.1-or-later
      - LPPL-1.3a
      - MIT
      - Qhull
      - Zlib
      - bsd-3-clause-open-mpi
      - lgpl-2.1-nokia-qt
      Title: scipy
      DownloadURL: https://files.pythonhosted.org/packages/30/85/cdbf2c3c460fe5aae812917866392068a88d02f07de0fe31ce738734c477/scipy-1.12.0.tar.gz
  bazaar:
    register: 'no'
    prim: 32/CTX1022508
    community_link: https://github.com/scipy/scipy
    community_name: https://github.com/scipy/scipy
    community_url: https://github.com/scipy/scipy
    component_comment: ''
    component_highlevel_description: SciPy library main repository
    component_name: scipy
    component_platform: linux
    component_programing_language: Python
    component_version: 1.12.0
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/scipy/scipy/archive/v1.12.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1078419&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: scipy
    target_sw: linux
    vendor: pip
    version: 1.12.0
    web_url: https://scipy.org/
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - BSD-3-Clause-LBNL
  - BSL-1.0
  - GPL-1.0-or-later
  - GPL-3.0-only
  - GPL-3.0-or-later
  - GPL-3.0-with-GCC-exception
  - LGPL-2.0-or-later
  - LGPL-2.1-only
  - LGPL-2.1-or-later
  - LPPL-1.3a
  - MIT
  - Qhull
  - Zlib
  - bsd-3-clause-open-mpi
  - lgpl-2.1-nokia-qt
  name: scipy
  primary:
  - lightgbm+4.3.0
  subcomponent: false
  type: FOSS
  versions:
  - 1.12.0
  mimer:
    linking: Static
    product_number: CTX1022508
    product_version_label: v1.12.0
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: six+1.16.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/six.svg   :target: https://pypi.org/project/six/   :alt:
        six on PyPI.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master   :target:
        https://travis-ci.org/benjaminp/six   :alt: six on TravisCI.. image:: https://readthedocs.org/projects/six/badge/?version=latest   :target:
        https://six.readthedocs.io/   :alt: six''s documentation on Read the Docs..
        image:: https://img.shields.io/badge/license-MIT-green.svg   :target: https://github.com/benjaminp/six/blob/master/LICENSE   :alt:
        MIT License badgeSix is a Python 2 and 3 compatibility library.  It provides
        utility functionsfor smoothing over the differences between the Python versions
        with the goal ofwriting Python code that is compatible on both Python versions.  See
        thedocumentation for more information on what is provided.Six supports Python
        2.7 and 3.3+.  It is contained in only one Pythonfile, so it can be easily
        copied into your project. (The copyright and licensenotice must be retained.)Online
        documentation is at https://six.readthedocs.io/.Bugs can be reported to https://github.com/benjaminp/six.  The
        code can alsobe found there.'
      Package: six
      Source: pip
      Version: 1.16.0
      Hash: ''
      licenses:
      - MIT
      Title: six
      DownloadURL: https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1056543
    community_link: https://pythonhosted.org/six/
    community_name: https://pythonhosted.org/six/
    community_url: https://pythonhosted.org/six/
    component_comment: ''
    component_highlevel_description: Six is a Python 2 and 3 compatibility library.  It
      provides utility functions for smoothing over the differences between the Python
      versions with the goal of writing Python code that is compatible on both Python
      versions
    component_name: six
    component_platform: linux
    component_programing_language: Python
    component_version: 1.16.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/benjaminp/six/archive/refs/tags/1.16.0.zip
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Inactive community.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=970756&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: six
    target_sw: linux
    vendor: pip
    version: 1.16.0
    web_url: https://github.com/benjaminp/six
  licenses:
  - MIT
  name: six
  primary:
  - pandas+2.2.1
  subcomponent: false
  type: FOSS
  versions:
  - 1.16.0
  mimer:
    linking: Static
    product_number: CAX1056543
    product_version_label: 1.16.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: typing-extensions+4.10.0
  additional_info:
    fossa-attribution:
      Description: "# Typing Extensions[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing)[Documentation](https://typing-extensions.readthedocs.io/en/latest/#)
        \u2013[PyPI](https://pypi.org/project/typing-extensions/)## OverviewThe `typing_extensions`
        module serves two related purposes:- Enable use of new type system features
        on older Python versions. For example,  `typing.TypeGuard` is new in Python
        3.10, but `typing_extensions` allows  users on previous Python versions to
        use it too.- Enable experimentation with new type system PEPs before they
        are accepted and  added to the `typing` module.`typing_extensions` is treated
        specially by static type checkers such asmypy and pyright. Objects defined
        in `typing_extensions` are treated the sameway as equivalent forms in `typing`.`typing_extensions`
        uses[Semantic Versioning](https://semver.org/). Themajor version will be incremented
        only for backwards-incompatible changes.Therefore, it's safe to dependon `typing_extensions`
        like this: `typing_extensions >=x.y, <(x+1)`,where `x.y` is the first version
        that includes all features you need.## Included itemsSee [the documentation](https://typing-extensions.readthedocs.io/en/latest/#)
        for acomplete listing of module contents.## ContributingSee [CONTRIBUTING.md](https://github.com/python/typing_extensions/blob/main/CONTRIBUTING.md)for
        how to contribute to `typing_extensions`."
      Package: typing-extensions
      Source: pip
      Version: 4.10.0
      Hash: ''
      licenses:
      - 0BSD
      - Python-2.0
      Title: typing-extensions
      DownloadURL: https://files.pythonhosted.org/packages/16/3a/0d26ce356c7465a19c9ea8814b960f8a36c3b0d07c323176620b7b483e44/typing_extensions-4.10.0.tar.gz
  bazaar:
    register: 'no'
    prim: 17/CTX1033609
    community_link: https://pypi.org/project/typing-extensions/4.10.0/
    community_name: https://pypi.org/project/typing-extensions/4.10.0/
    community_url: https://pypi.org/project/typing-extensions/4.10.0/
    component_comment: ''
    component_highlevel_description: 'This is a backport of the standard library typing
      module to Python versions older than 3.5.

      Typing defines a standard notation for Python function and variable type annotations.
      The notation can be used for documenting code in a concise, standard format,
      and it has been designed to also be used by static and runtime type checkers,
      static analyzers, IDEs and other tools.'
    component_name: typing-extensions
    component_platform: linux
    component_programing_language: Python
    component_version: 4.10.0
    licenses:
    - FAL1159179/20 (Python Software Foundation License 2.0 (PSF-2.0))
    src_download_link: https://files.pythonhosted.org/packages/16/3a/0d26ce356c7465a19c9ea8814b960f8a36c3b0d07c323176620b7b483e44/typing_extensions-4.10.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1080387&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: typing-extensions
    target_sw: linux
    vendor: pip
    version: 4.10.0
    web_url: https://pypi.org/project/typing-extensions/4.11.0/
  licenses:
  - 0BSD
  - Python-2.0
  name: typing-extensions
  primary:
  - pydantic+1.10.14
  subcomponent: false
  type: FOSS
  versions:
  - 4.10.0
  mimer:
    linking: Static
    product_number: CTX1033609
    product_version_label: 4.10.0
    selected_licenses:
    - PSF-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
- ID: tzdata+2024.1
  additional_info:
    fossa-attribution:
      Description: 'tzdata: Python package providing IANA time zone data====================================================This
        is a Python package containing ``zic``-compiled binaries for the IANA timezone
        database. It is intended to be a fallback for systems that do not havesystem
        time zone data installed (or don''t have it installed in a standardlocation),
        as a part of `PEP 615 <https://www.python.org/dev/peps/pep-0615/>`_This repository
        generates a ``pip``-installable package, published on PyPI as`tzdata <https://pypi.org/project/tzdata>`_.For
        more information, see `the documentation <https://tzdata.readthedocs.io>`_.'
      Package: tzdata
      Source: pip
      Version: '2024.1'
      Hash: ''
      licenses:
      - Apache-2.0
      - public-domain
      Title: tzdata
      DownloadURL: https://files.pythonhosted.org/packages/74/5b/e025d02cb3b66b7b76093404392d4b44343c69101cc85f4d180dd5784717/tzdata-2024.1.tar.gz
  bazaar:
    register: 'no'
    prim: 35/CAX1057935
    community_link: https://github.com/python/tzdata
    community_name: https://github.com/python/tzdata
    community_url: https://github.com/python/tzdata
    component_comment: ''
    component_highlevel_description: Python package wrapping the IANA time zone database
    component_name: tzdata
    component_platform: linux
    component_programing_language: Python
    component_version: '2024.1'
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/python/tzdata/archive/2024.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1082232&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Undefined
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: tzdata
    target_sw: linux
    vendor: pip
    version: '2024.1'
    web_url: https://github.com/python/tzdata
  licenses:
  - Apache-2.0
  - public-domain
  name: tzdata
  primary:
  - pandas+2.2.1
  subcomponent: false
  type: FOSS
  versions:
  - '2024.1'
  mimer:
    linking: Static
    product_number: CAX1057935
    product_version_label: '2024.1'
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'False'
